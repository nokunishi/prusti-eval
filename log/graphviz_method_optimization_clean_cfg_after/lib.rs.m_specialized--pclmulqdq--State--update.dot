digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_specialized$$pclmulqdq$$State$$update";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::specialized::pclmulqdq::\{impl#0\}::update"</font><br/><font color="orange">// Span: src/specialized/pclmulqdq.rs:40:5: 44:6 (#0)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(struct$m_specialized$$pclmulqdq$$State(_1.val_ref), write)) &amp;&amp; ((acc(_2.val_ref \ <br/>    , write)) &amp;&amp; ((acc(Slice$u8(_2.val_ref), read)) &amp;&amp; (true))))<br/>inhale (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>label pre<br/><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] _4 = ((*_1).0: u32)</font><br/>_4 := builtin$havoc_ref()<br/>inhale acc(_4.val_int, write)<br/>unfold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_1.val_ref), write)<br/>unfold acc(Ref(u32)(_1.val_ref.f$state), write)<br/>_4.val_int := copy _1.val_ref.f$state.val_int<br/>label l0<br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] _5 = &amp;'?4 (*_2)</font><br/>_5 := builtin$havoc_ref()<br/>inhale acc(_5.val_ref, write)<br/>_5.val_ref := borrow _2.val_ref // L4<br/>inhale acc(Slice$u8(_5.val_ref), read)<br/>label l1<br/><font color="orange">// [mir] _3 = specialized::pclmulqdq::calculate(move _4, move _5) -&gt; [return: bb1, unwind: bb2]</font><br/>label l2<br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>fold acc(Ref(u32)(_4), write)<br/>exhale (acc(u32(_4), write)) &amp;&amp; ((acc(_5.val_ref, write)) &amp;&amp; ((true) &amp;&amp; (true)))<br/>_3 := builtin$havoc_ref()<br/>inhale acc(u32(_3), write)<br/>transfer perm _5.val_ref --&gt; old[l2](_5.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; (true)<br/>label l3<br/><font color="orange">// ========== l4 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb1</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L5,L4,)</font><br/>if (__t0) &amp;&amp; ((__t0) &amp;&amp; (true)) \{<br/>    // expire loan L4<br/>    transfer perm old[l2](_5.val_ref) --&gt; old[l1](_5.val_ref) // unchecked: false<br/>    exhale acc(Slice$u8(old[l1](_5.val_ref)), read)<br/>\} else \{\}<br/><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] ((*_1).0: u32) = move _3</font><br/>_1.val_ref.f$state := move _3<br/>label l5<br/><font color="orange">// [mir] _0 = const ()</font><br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] return</font><br/><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l7<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>fold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_1.val_ref), write)<br/>obtain acc(struct$m_specialized$$pclmulqdq$$State(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/>obtain acc(Slice$u8(_2.val_ref), write)<br/>_old$pre$1 := move _2.val_ref<br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(tuple0$)(_0), write)<br/>obtain acc(tuple0$(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(struct$m_specialized$$pclmulqdq$$State(_old$pre$0), write)) &amp;&amp; ((acc(Slice$u8(_old$pre$1), read)) &amp;&amp; (true))<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(tuple0$(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
}
