digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_$openang$Hasher$space$as$space$std$$clone$$Clone$closeang$$$clone";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::\{impl#5\}::clone"</font><br/><font color="orange">// Span: src/lib.rs:52:10: 52:15 (#47)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/>__t2 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(struct$m_Hasher(_1.val_ref), read)) &amp;&amp; (true))<br/>inhale (true) &amp;&amp; (true)<br/>label pre<br/><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_2)</font><br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] _4 = &amp;'?3 ((*_1).0: u64)</font><br/>_4 := builtin$havoc_ref()<br/>inhale acc(_4.val_ref, write)<br/>unfold acc(Ref(struct$m_Hasher)(_1.val_ref), read)<br/>_4.val_ref := borrow _1.val_ref.f$amount // L4<br/>inhale acc(u64(_4.val_ref), read)<br/>label l0<br/><font color="orange">// [mir] _3 = &amp;'?4 (*_4)</font><br/>_3 := builtin$havoc_ref()<br/>inhale acc(_3.val_ref, write)<br/>_3.val_ref := borrow _4.val_ref // L6<br/>inhale acc(u64(_3.val_ref), read)<br/>label l1<br/><font color="orange">// [mir] _2 = &lt;u64 as std::clone::Clone&gt;::clone(move _3) -&gt; [return: bb1, unwind: bb3]</font><br/>label l2<br/>assert (true) &amp;&amp; (true)<br/>exhale (acc(_3.val_ref, write)) &amp;&amp; ((true) &amp;&amp; (true))<br/>_2 := builtin$havoc_ref()<br/>inhale acc(u64(_2), write)<br/>transfer perm _3.val_ref --&gt; old[l2](_3.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; (true)<br/>label l3<br/><font color="orange">// ========== l4 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb1</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L8,L6,L4,)</font><br/>if (__t0) &amp;&amp; ((__t0) &amp;&amp; (true)) \{<br/>    // expire loan L6<br/>    transfer perm old[l2](_3.val_ref) --&gt; old[l1](_3.val_ref) // unchecked: false<br/>    exhale acc(u64(old[l1](_3.val_ref)), read)<br/>\} else \{\}<br/>if (__t0) &amp;&amp; ((__t0) &amp;&amp; ((__t0) &amp;&amp; (true))) \{<br/>    // expire loan L4<br/>    exhale acc(u64(_4.val_ref), read)<br/>\} else \{\}<br/><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] StorageLive(_6)</font><br/><font color="orange">// [mir] StorageLive(_7)</font><br/><font color="orange">// [mir] _7 = &amp;'?5 ((*_1).1: State)</font><br/>_7 := builtin$havoc_ref()<br/>inhale acc(_7.val_ref, write)<br/>_7.val_ref := borrow _1.val_ref.f$state // L3<br/>inhale acc(m_State$_beg_$_end_(_7.val_ref), read)<br/>label l5<br/><font color="orange">// [mir] _6 = &amp;'?6 (*_7)</font><br/>_6 := builtin$havoc_ref()<br/>inhale acc(_6.val_ref, write)<br/>_6.val_ref := borrow _7.val_ref // L5<br/>inhale acc(m_State$_beg_$_end_(_6.val_ref), read)<br/>label l6<br/><font color="orange">// [mir] _5 = &lt;State as std::clone::Clone&gt;::clone(move _6) -&gt; [return: bb2, unwind: bb3]</font><br/>label l7<br/>assert (true) &amp;&amp; (true)<br/>exhale (acc(_6.val_ref, write)) &amp;&amp; ((true) &amp;&amp; (true))<br/>_5 := builtin$havoc_ref()<br/>inhale acc(m_State$_beg_$_end_(_5), write)<br/>transfer perm _6.val_ref --&gt; old[l7](_6.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; (true)<br/>label l8<br/><font color="orange">// ========== l9 ==========</font><br/><font color="orange">// MIR edge bb1 --&gt; bb2</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L7,L5,L3,)</font><br/>if (__t1) &amp;&amp; ((__t1) &amp;&amp; (true)) \{<br/>    // expire loan L5<br/>    transfer perm old[l7](_6.val_ref) --&gt; old[l6](_6.val_ref) // unchecked: false<br/>    exhale acc(m_State$_beg_$_end_(old[l6](_6.val_ref)), read)<br/>\} else \{\}<br/>if (__t1) &amp;&amp; ((__t1) &amp;&amp; ((__t1) &amp;&amp; (true))) \{<br/>    // expire loan L3<br/>    exhale acc(m_State$_beg_$_end_(_7.val_ref), read)<br/>\} else \{\}<br/><font color="orange">// ========== bb2 ==========</font><br/>__t2 := copy true<br/><font color="orange">// [mir] StorageDead(_6)</font><br/><font color="orange">// [mir] _0 = Hasher \{ amount: move _2, state: move _5 \}</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(struct$m_Hasher(_0), write)<br/>unfold acc(Ref(struct$m_Hasher)(_0), write)<br/>_0.f$amount := move _2<br/>label l10<br/>_0.f$state := move _5<br/>label l11<br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] StorageDead(_2)</font><br/><font color="orange">// [mir] StorageDead(_7)</font><br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] return</font><br/><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l13<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>fold acc(Ref(struct$m_Hasher)(_1.val_ref), read)<br/>obtain acc(struct$m_Hasher(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(struct$m_Hasher)(_0), write)<br/>obtain acc(struct$m_Hasher(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(struct$m_Hasher(_old$pre$0), read)) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(struct$m_Hasher(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
}
