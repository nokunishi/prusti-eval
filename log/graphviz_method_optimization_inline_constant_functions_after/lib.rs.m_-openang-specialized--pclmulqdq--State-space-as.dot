digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_$openang$specialized$$pclmulqdq$$State$space$as$space$std$$clone$$Clone$closeang$$$clone";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::specialized::pclmulqdq::\{impl#1\}::clone"</font><br/><font color="orange">// Span: src/specialized/pclmulqdq.rs:6:10: 6:15 (#8)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(struct$m_specialized$$pclmulqdq$$State(_1.val_ref), read)) &amp;&amp; (true))<br/>inhale true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l7<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>fold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_1.val_ref), read)<br/>obtain acc(struct$m_specialized$$pclmulqdq$$State(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_0), write)<br/>obtain acc(struct$m_specialized$$pclmulqdq$$State(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/>assert true<br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(struct$m_specialized$$pclmulqdq$$State(_old$pre$0), read)) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(struct$m_specialized$$pclmulqdq$$State(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_2)</font><br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] _4 = &amp;'?3 ((*_1).0: u32)</font><br/>_4 := builtin$havoc_ref()<br/>inhale acc(_4.val_ref, write)<br/>unfold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_1.val_ref), read)<br/>_4.val_ref := borrow _1.val_ref.f$state // L5<br/>inhale acc(u32(_4.val_ref), read)<br/>label l0<br/><font color="orange">// [mir] _3 = &amp;'?4 (*_4)</font><br/>_3 := builtin$havoc_ref()<br/>inhale acc(_3.val_ref, write)<br/>_3.val_ref := borrow _4.val_ref // L4<br/>inhale acc(u32(_3.val_ref), read)<br/>label l1<br/><font color="orange">// [mir] _2 = &lt;u32 as std::clone::Clone&gt;::clone(move _3) -&gt; [return: bb1, unwind: bb2]</font><br/>label l2<br/>assert true<br/>assert (true) &amp;&amp; (true)<br/>exhale (acc(_3.val_ref, write)) &amp;&amp; ((true) &amp;&amp; (true))<br/>_2 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(u32(_2), write)<br/>transfer perm _3.val_ref --&gt; old[l2](_3.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l3</td></tr><tr><td align="left">Goto(cfg:3)<br/></td></tr></table>>];
"block_l4" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l4 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l4 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb1</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L3,L4,L5,)</font><br/>if (__t0) &amp;&amp; (true) \{<br/>    // expire loan L3<br/>\} else \{\}<br/>if (__t0) &amp;&amp; ((__t0) &amp;&amp; (true)) \{<br/>    // expire loan L4<br/>    transfer perm old[l2](_3.val_ref) --&gt; old[l1](_3.val_ref) // unchecked: false<br/>    exhale acc(u32(old[l1](_3.val_ref)), read)<br/>\} else \{\}<br/>if (__t0) &amp;&amp; ((__t0) &amp;&amp; ((__t0) &amp;&amp; (true))) \{<br/>    // expire loan L5<br/>    exhale acc(u32(_4.val_ref), read)<br/>\} else \{\}</td></tr><tr><td align="left">Goto(cfg:4)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:4)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] _0 = specialized::pclmulqdq::State \{ state: move _2 \}</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(struct$m_specialized$$pclmulqdq$$State(_0), write)<br/>unfold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_0), write)<br/>_0.f$state := move _2<br/>label l5<br/><font color="orange">// [mir] StorageDead(_2)</font><br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_l4";
"block_l4" -> "block_bb1";
"block_bb1" -> "block_return";
}
