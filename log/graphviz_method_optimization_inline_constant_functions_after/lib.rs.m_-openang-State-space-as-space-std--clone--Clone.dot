digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_$openang$State$space$as$space$std$$clone$$Clone$closeang$$$clone";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::\{impl#4\}::clone"</font><br/><font color="orange">// Span: src/lib.rs:46:10: 46:15 (#46)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/>__t2 := copy false<br/>__t3 := copy false<br/>__t4 := copy false<br/>__t5 := copy false<br/>__t6 := copy false<br/>__t7 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(m_State$_beg_$_end_(_1.val_ref), read)) &amp;&amp; (true))<br/>inhale true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l15<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>obtain acc(m_State$_beg_$_end_(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/><font color="orange">// Fold the result</font><br/>obtain acc(m_State$_beg_$_end_(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/>assert true<br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(m_State$_beg_$_end_(_old$pre$0), read)) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(m_State$_beg_$_end_(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] FakeRead(ForMatchedPlace(None), _1)</font><br/><font color="orange">// [mir] _2 = discriminant((*_1))</font><br/>_2 := builtin$havoc_ref()<br/>inhale acc(_2.val_int, write)<br/>_2.val_int := copy m_State$_beg_$_end_$$discriminant$$&lt;&gt;(_1.val_ref)<br/><font color="orange">// [mir] switchInt(move _2) -&gt; [0: bb1, 1: bb2, otherwise: bb3]</font><br/>__t8 := copy _2.val_int<br/><font color="orange">// Ignore default target bb3, as the compiler marked it as unreachable.</font></td></tr><tr><td align="left">GotoSwitch(((__t8) == (0), cfg:4), cfg:3)<br/></td></tr></table>>];
"block_l0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l0 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l0 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb2</font></td></tr><tr><td align="left">Goto(cfg:6)<br/></td></tr></table>>];
"block_l1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l1 (cfg:4)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l1 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb1</font></td></tr><tr><td align="left">Goto(cfg:9)<br/></td></tr></table>>];
"block_bb3" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb3 (cfg:5)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb3 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] unreachable</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb2" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb2 (cfg:6)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb2 ==========</font><br/>__t2 := copy true<br/><font color="orange">// [mir] StorageLive(_6)</font><br/><font color="orange">// [mir] _6 = &amp;'?3 (((*_1) as Specialized).0: specialized::pclmulqdq::State)</font><br/>_6 := builtin$havoc_ref()<br/>inhale acc(_6.val_ref, write)<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Specialized\}&gt;(_1.val_ref), read)<br/>unfold acc(Ref(m_State$_beg_$_end_Specialized)(_1.val_ref[enum_Specialized]), read)<br/>_6.val_ref := borrow _1.val_ref[enum_Specialized].f$0 // L3<br/>inhale acc(struct$m_specialized$$pclmulqdq$$State(_6.val_ref), read)<br/>label l2<br/><font color="orange">// [mir] StorageLive(_7)</font><br/><font color="orange">// [mir] StorageLive(_8)</font><br/><font color="orange">// [mir] _8 = &amp;'?4 (*_6)</font><br/>_8 := builtin$havoc_ref()<br/>inhale acc(_8.val_ref, write)<br/>_8.val_ref := borrow _6.val_ref // L6<br/>inhale acc(struct$m_specialized$$pclmulqdq$$State(_8.val_ref), read)<br/>label l3<br/><font color="orange">// [mir] _7 = &lt;specialized::pclmulqdq::State as std::clone::Clone&gt;::clone(move _8) -&gt; [return: bb6, unwind: bb8]</font><br/>label l4<br/>assert true<br/>assert (true) &amp;&amp; (true)<br/>exhale (acc(_8.val_ref, write)) &amp;&amp; ((true) &amp;&amp; (true))<br/>_7 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(struct$m_specialized$$pclmulqdq$$State(_7), write)<br/>transfer perm _8.val_ref --&gt; old[l4](_8.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l5</td></tr><tr><td align="left">Goto(cfg:7)<br/></td></tr></table>>];
"block_l6" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l6 (cfg:7)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l6 ==========</font><br/><font color="orange">// MIR edge bb2 --&gt; bb6</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L8,L6,L3,)</font><br/>if (__t2) &amp;&amp; (true) \{<br/>    // expire loan L8<br/>\} else \{\}<br/>if (__t2) &amp;&amp; ((__t2) &amp;&amp; (true)) \{<br/>    // expire loan L6<br/>    transfer perm old[l4](_8.val_ref) --&gt; old[l3](_8.val_ref) // unchecked: false<br/>    exhale acc(struct$m_specialized$$pclmulqdq$$State(old[l3](_8.val_ref)), read)<br/>\} else \{\}<br/>if (__t2) &amp;&amp; ((__t2) &amp;&amp; ((__t2) &amp;&amp; (true))) \{<br/>    // expire loan L3<br/>    exhale acc(struct$m_specialized$$pclmulqdq$$State(_6.val_ref), read)<br/>\} else \{\}</td></tr><tr><td align="left">Goto(cfg:8)<br/></td></tr></table>>];
"block_bb6" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb6 (cfg:8)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb6 ==========</font><br/>__t3 := copy true<br/><font color="orange">// [mir] StorageDead(_8)</font><br/><font color="orange">// [mir] _0 = State::Specialized(move _7)</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(m_State$_beg_$_end_(_0), write)<br/>inhale (m_State$_beg_$_end_$$discriminant$$&lt;&gt;(_0)) == (1)<br/>downcast _0 to enum_Specialized<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Specialized\}&gt;(_0), write)<br/>unfold acc(Ref(m_State$_beg_$_end_Specialized)(_0[enum_Specialized]), write)<br/>_0[enum_Specialized].f$0 := move _7<br/>label l7<br/><font color="orange">// [mir] StorageDead(_7)</font><br/><font color="orange">// [mir] StorageDead(_6)</font><br/><font color="orange">// [mir] goto -&gt; bb7</font></td></tr><tr><td align="left">Goto(cfg:14)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:9)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t4 := copy true<br/><font color="orange">// [mir] falseEdge -&gt; [real: bb4, imaginary: bb2]</font></td></tr><tr><td align="left">Goto(cfg:10)<br/></td></tr></table>>];
"block_bb4" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb4 (cfg:10)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb4 ==========</font><br/>__t5 := copy true<br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] _3 = &amp;'?5 (((*_1) as Baseline).0: baseline::State)</font><br/>_3 := builtin$havoc_ref()<br/>inhale acc(_3.val_ref, write)<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_1.val_ref), read)<br/>unfold acc(Ref(m_State$_beg_$_end_Baseline)(_1.val_ref[enum_Baseline]), read)<br/>_3.val_ref := borrow _1.val_ref[enum_Baseline].f$0 // L7<br/>inhale acc(struct$m_baseline$$State(_3.val_ref), read)<br/>label l8<br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] _5 = &amp;'?6 (*_3)</font><br/>_5 := builtin$havoc_ref()<br/>inhale acc(_5.val_ref, write)<br/>_5.val_ref := borrow _3.val_ref // L5<br/>inhale acc(struct$m_baseline$$State(_5.val_ref), read)<br/>label l9<br/><font color="orange">// [mir] _4 = &lt;baseline::State as std::clone::Clone&gt;::clone(move _5) -&gt; [return: bb5, unwind: bb8]</font><br/>label l10<br/>assert true<br/>assert (true) &amp;&amp; (true)<br/>exhale (acc(_5.val_ref, write)) &amp;&amp; ((true) &amp;&amp; (true))<br/>_4 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(struct$m_baseline$$State(_4), write)<br/>transfer perm _5.val_ref --&gt; old[l10](_5.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l11</td></tr><tr><td align="left">Goto(cfg:11)<br/></td></tr></table>>];
"block_l12" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l12 (cfg:11)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l12 ==========</font><br/><font color="orange">// MIR edge bb4 --&gt; bb5</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L4,L5,L7,)</font><br/>if (__t5) &amp;&amp; (true) \{<br/>    // expire loan L4<br/>\} else \{\}<br/>if (__t5) &amp;&amp; ((__t5) &amp;&amp; (true)) \{<br/>    // expire loan L5<br/>    transfer perm old[l10](_5.val_ref) --&gt; old[l9](_5.val_ref) // unchecked: false<br/>    exhale acc(struct$m_baseline$$State(old[l9](_5.val_ref)), read)<br/>\} else \{\}<br/>if (__t5) &amp;&amp; ((__t5) &amp;&amp; ((__t5) &amp;&amp; (true))) \{<br/>    // expire loan L7<br/>    exhale acc(struct$m_baseline$$State(_3.val_ref), read)<br/>\} else \{\}</td></tr><tr><td align="left">Goto(cfg:12)<br/></td></tr></table>>];
"block_bb5" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb5 (cfg:12)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb5 ==========</font><br/>__t6 := copy true<br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] _0 = State::Baseline(move _4)</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(m_State$_beg_$_end_(_0), write)<br/>inhale (m_State$_beg_$_end_$$discriminant$$&lt;&gt;(_0)) == (0)<br/>downcast _0 to enum_Baseline<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_0), write)<br/>unfold acc(Ref(m_State$_beg_$_end_Baseline)(_0[enum_Baseline]), write)<br/>_0[enum_Baseline].f$0 := move _4<br/>label l13<br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] goto -&gt; bb7</font></td></tr><tr><td align="left">Goto(cfg:15)<br/></td></tr></table>>];
"block_bb7" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb7 (cfg:13)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb7 ==========</font><br/>__t7 := copy true<br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_l14" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l14 (cfg:14)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l14 ==========</font><br/>fold acc(Ref(m_State$_beg_$_end_Specialized)(_0[enum_Specialized]), write)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Specialized\}&gt;(_0), write)<br/>fold acc(Ref(m_State$_beg_$_end_Specialized)(_1.val_ref[enum_Specialized]), read)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Specialized\}&gt;(_1.val_ref), read)<br/><font color="orange">// drop Acc(_6.val_ref, write) (Acc(_6.val_ref, write))</font></td></tr><tr><td align="left">Goto(cfg:13)<br/></td></tr></table>>];
"block_l16" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l16 (cfg:15)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l16 ==========</font><br/>fold acc(Ref(m_State$_beg_$_end_Baseline)(_0[enum_Baseline]), write)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_0), write)<br/>fold acc(Ref(m_State$_beg_$_end_Baseline)(_1.val_ref[enum_Baseline]), read)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_1.val_ref), read)<br/><font color="orange">// drop Acc(_3.val_ref, write) (Acc(_3.val_ref, write))</font></td></tr><tr><td align="left">Goto(cfg:13)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_l1";
"block_bb0" -> "block_l0";
"block_l0" -> "block_bb2";
"block_l1" -> "block_bb1";
"block_bb2" -> "block_l6";
"block_l6" -> "block_bb6";
"block_bb6" -> "block_l14";
"block_bb1" -> "block_bb4";
"block_bb4" -> "block_l12";
"block_l12" -> "block_bb5";
"block_bb5" -> "block_l16";
"block_bb7" -> "block_return";
"block_l14" -> "block_bb7";
"block_l16" -> "block_bb7";
}
