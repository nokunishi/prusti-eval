domain Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(): Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0: Snap$struct$m_specialized$$pclmulqdq$$State): Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State(self: Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_): Snap$struct$m_specialized$$pclmulqdq$$State 
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$1$injectivity {
    (forall _l_0: Snap$struct$m_specialized$$pclmulqdq$$State, _r_0: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$1$discriminant_axiom {
    (forall _0: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$1$field$f$0$axiom {
    (forall _0: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0)) ==
      _0)
  }
}

domain Snap$struct$m_specialized$$pclmulqdq$$State  {
  
  function cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_0: Int): Snap$struct$m_specialized$$pclmulqdq$$State 
  
  function Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self: Snap$struct$m_specialized$$pclmulqdq$$State): Int 
  
  axiom Snap$struct$m_specialized$$pclmulqdq$$State$0$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_l_0),
      cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_r_0) }
      cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state$axiom {
    (forall _0: Int ::
      { Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_0)) }
      Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_0)) ==
      _0)
  }
  
  axiom Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state$valid {
    (forall self: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self) }
      0 <=
      Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self) &&
      Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self) <=
      4294967295)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$state: Ref

field val_bool: Bool

field val_int: Int

function m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_
  requires acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_((unfolding acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some(self.enum_Some), read$()) in
        snap$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$struct$m_specialized$$pclmulqdq$$State$Snap$struct$m_specialized$$pclmulqdq$$State(self.enum_Some.f$0)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_())
}

function snap$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$struct$m_specialized$$pclmulqdq$$State$Snap$struct$m_specialized$$pclmulqdq$$State(self: Ref): Snap$struct$m_specialized$$pclmulqdq$$State
  requires acc(struct$m_specialized$$pclmulqdq$$State(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State((unfolding acc(struct$m_specialized$$pclmulqdq$$State(self), read$()) in
    (unfolding acc(u32(self.f$state), read$()) in self.f$state.val_int)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some(self: Ref) {
  acc(self.f$0, write) &&
  acc(struct$m_specialized$$pclmulqdq$$State(self.f$0), write)
}

predicate struct$m_specialized$$pclmulqdq$$State(self: Ref) {
  acc(self.f$state, write) && acc(u32(self.f$state), write)
}

predicate u32(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 4294967295)
}

method m_specialized$$pclmulqdq$$State$$new() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  
  label start
  // ========== start ==========
  // Def path: "crc32fast::specialized::pclmulqdq::{impl#0}::new"
  // Span: src/specialized/pclmulqdq.rs:27:5: 38:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  // Preconditions:
  inhale acc(u32(_1), write)
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] _2 = const false
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_bool, write)
  _2.val_bool := false
  // [mir] switchInt(move _2) -> [0: bb1, otherwise: bb3]
  __t12 := _2.val_bool
  if (!__t12) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageLive(_3)
  // [mir] _3 = std_detect::detect::arch::x86::__is_feature_detected::pclmulqdq() -> [return: bb2, unwind: bb12]
  label l2
  _3 := builtin$havoc_ref()
  inhale acc(bool(_3), write)
  inhale true
  label l3
  // ========== bb2 ==========
  __t2 := true
  // [mir] switchInt(move _3) -> [0: bb10, otherwise: bb3]
  unfold acc(bool(_3), write)
  __t13 := _3.val_bool
  if (!__t13) {
    goto l11
  }
  goto l0
  
  label bb1
  // ========== l6 ==========
  // MIR edge bb3 --> bb6
  goto l5
  
  label bb2
  // ========== l7 ==========
  // MIR edge bb3 --> bb4
  // ========== bb4 ==========
  __t4 := true
  // [mir] StorageLive(_5)
  // [mir] _5 = std_detect::detect::arch::x86::__is_feature_detected::sse2() -> [return: bb5, unwind: bb12]
  label l8
  _5 := builtin$havoc_ref()
  inhale acc(bool(_5), write)
  inhale true
  label l9
  // ========== bb5 ==========
  __t5 := true
  // [mir] switchInt(move _5) -> [0: bb10, otherwise: bb6]
  unfold acc(bool(_5), write)
  __t15 := _5.val_bool
  if (!__t15) {
    goto l10
  }
  goto l4
  
  label bb3
  // ========== l12 ==========
  // MIR edge bb6 --> bb7
  // ========== bb7 ==========
  __t7 := true
  // [mir] StorageLive(_7)
  // [mir] _7 = std_detect::detect::arch::x86::__is_feature_detected::sse4_1() -> [return: bb8, unwind: bb12]
  label l14
  _7 := builtin$havoc_ref()
  inhale acc(bool(_7), write)
  inhale true
  label l15
  // ========== bb8 ==========
  __t8 := true
  // [mir] switchInt(move _7) -> [0: bb10, otherwise: bb9]
  unfold acc(bool(_7), write)
  __t17 := _7.val_bool
  if (!__t17) {
    goto l7
  }
  goto l6
  
  label bb4
  // ========== l13 ==========
  // MIR edge bb6 --> bb9
  goto bb5
  
  label bb5
  // ========== bb9 ==========
  __t9 := true
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = _1
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_int, write)
  unfold acc(u32(_1), write)
  _9.val_int := _1.val_int
  label l18
  // [mir] _8 = specialized::pclmulqdq::State { state: move _9 }
  _8 := builtin$havoc_ref()
  inhale acc(struct$m_specialized$$pclmulqdq$$State(_8), write)
  unfold acc(struct$m_specialized$$pclmulqdq$$State(_8), write)
  _8.f$state := _9
  label l19
  // [mir] StorageDead(_9)
  // [mir] _0 = std::option::Option::<specialized::pclmulqdq::State>::Some(move _8)
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)
  inhale m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(_0) ==
    1
  // downcast _0 to enum_Some

  unfold acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)
  unfold acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some(_0.enum_Some), write)
  _0.enum_Some.f$0 := _8
  label l20
  // [mir] StorageDead(_8)
  // [mir] goto -> bb11
  // ========== l28 ==========
  fold acc(u32(_0.enum_Some.f$0.f$state), write)
  fold acc(struct$m_specialized$$pclmulqdq$$State(_0.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some(_0.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)
  // drop Acc(_6.val_bool, write) (Acc(_6.val_bool, write))
  // drop Acc(_4.val_bool, write) (Acc(_4.val_bool, write))
  goto l12
  
  label bb6
  // ========== bb10 ==========
  __t10 := true
  // [mir] _0 = std::option::Option::<specialized::pclmulqdq::State>::None
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)
  inhale m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$int$(_0) ==
    0
  // [mir] goto -> bb11
  // ========== l29 ==========
  unfold acc(u32(_1), write)
  goto l12
  
  label l0
  // ========== l4 ==========
  // MIR edge bb2 --> bb3
  // ========== l21 ==========
  // drop Acc(_3.val_bool, write) (Acc(_3.val_bool, write))
  goto l1
  
  label l1
  // ========== bb3 ==========
  __t3 := true
  // [mir] StorageLive(_4)
  // [mir] _4 = const true
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_bool, write)
  _4.val_bool := true
  // [mir] switchInt(move _4) -> [0: bb4, otherwise: bb6]
  __t14 := _4.val_bool
  if (!__t14) {
    goto bb2
  }
  goto bb1
  
  label l10
  // ========== l11 ==========
  // MIR edge bb5 --> bb10
  // ========== l26 ==========
  // drop Acc(_5.val_bool, write) (Acc(_5.val_bool, write))
  // drop Acc(_4.val_bool, write) (Acc(_4.val_bool, write))
  goto bb6
  
  label l11
  // ========== l5 ==========
  // MIR edge bb2 --> bb10
  // ========== l25 ==========
  // drop Acc(_3.val_bool, write) (Acc(_3.val_bool, write))
  goto bb6
  
  label l12
  // ========== bb11 ==========
  __t11 := true
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l22
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  // obtain acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l4
  // ========== l10 ==========
  // MIR edge bb5 --> bb6
  // ========== l23 ==========
  // drop Acc(_5.val_bool, write) (Acc(_5.val_bool, write))
  goto l5
  
  label l5
  // ========== bb6 ==========
  __t6 := true
  // [mir] StorageLive(_6)
  // [mir] _6 = const false
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_bool, write)
  _6.val_bool := false
  // [mir] switchInt(move _6) -> [0: bb7, otherwise: bb9]
  __t16 := _6.val_bool
  if (__t16) {
    goto bb4
  }
  goto bb3
  
  label l6
  // ========== l16 ==========
  // MIR edge bb8 --> bb9
  // ========== l24 ==========
  // drop Acc(_7.val_bool, write) (Acc(_7.val_bool, write))
  goto bb5
  
  label l7
  // ========== l17 ==========
  // MIR edge bb8 --> bb10
  // ========== l27 ==========
  // drop Acc(_6.val_bool, write) (Acc(_6.val_bool, write))
  // drop Acc(_7.val_bool, write) (Acc(_7.val_bool, write))
  // drop Acc(_4.val_bool, write) (Acc(_4.val_bool, write))
  goto bb6
  
  label return
  // ========== l0 ==========
  // MIR edge bb0 --> bb3
  goto l1
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
