domain Snap$struct$m_std$$arch$$x86_64$$__m128i  {
  
  function cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_0: Int,
  _1: Int): Snap$struct$m_std$$arch$$x86_64$$__m128i 
  
  function Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self: Snap$struct$m_std$$arch$$x86_64$$__m128i): Int 
  
  function Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self: Snap$struct$m_std$$arch$$x86_64$$__m128i): Int 
  
  axiom Snap$struct$m_std$$arch$$x86_64$$__m128i$0$injectivity {
    (forall _l_0: Int, _l_1: Int, _r_0: Int, _r_1: Int ::
      { cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_l_0,
      _l_1), cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_r_0,
      _r_1) }
      cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_l_0,
      _l_1) ==
      cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_r_0,
      _r_1) ==>
      _l_0 == _r_0 && _l_1 == _r_1)
  }
  
  axiom Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0$axiom {
    (forall _0: Int, _1: Int ::
      { Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_0,
      _1)) }
      Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_0,
      _1)) ==
      _0)
  }
  
  axiom Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0$valid {
    (forall self: Snap$struct$m_std$$arch$$x86_64$$__m128i ::
      { Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self) }
      -9223372036854775808 <=
      Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self) &&
      Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$0__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self) <=
      9223372036854775807)
  }
  
  axiom Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1$axiom {
    (forall _0: Int, _1: Int ::
      { Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_0,
      _1)) }
      Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i(_0,
      _1)) ==
      _1)
  }
  
  axiom Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1$valid {
    (forall self: Snap$struct$m_std$$arch$$x86_64$$__m128i ::
      { Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self) }
      -9223372036854775808 <=
      Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self) &&
      Snap$struct$m_std$$arch$$x86_64$$__m128i$0$field$f$1__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$(self) <=
      9223372036854775807)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$0: Ref

field f$1: Ref

field val_int: Int

function snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(self: Ref): Snap$struct$m_std$$arch$$x86_64$$__m128i
  requires acc(struct$m_std$$arch$$x86_64$$__m128i(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$$int$$$int$$Snap$struct$m_std$$arch$$x86_64$$__m128i((unfolding acc(struct$m_std$$arch$$x86_64$$__m128i(self), read$()) in
    (unfolding acc(i64(self.f$0), read$()) in self.f$0.val_int)), (unfolding acc(struct$m_std$$arch$$x86_64$$__m128i(self), read$()) in
    (unfolding acc(i64(self.f$1), read$()) in self.f$1.val_int)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate i64(self: Ref) {
  acc(self.val_int, write) &&
  (-9223372036854775808 <= self.val_int &&
  self.val_int <= 9223372036854775807)
}

predicate struct$m_std$$arch$$x86_64$$__m128i(self: Ref) {
  acc(self.f$0, write) &&
  (acc(i64(self.f$0), write) &&
  (acc(self.f$1, write) && acc(i64(self.f$1), write)))
}

method m_specialized$$pclmulqdq$$reduce128() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  var _10: Ref
  var _11: Ref
  var _12: Ref
  var _13: Ref
  
  label start
  // ========== start ==========
  // Def path: "crc32fast::specialized::pclmulqdq::reduce128"
  // Span: src/specialized/pclmulqdq.rs:192:1: 196:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  // Preconditions:
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_1), write) &&
    (acc(struct$m_std$$arch$$x86_64$$__m128i(_2), write) &&
    acc(struct$m_std$$arch$$x86_64$$__m128i(_3), write))
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _1
  _5 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_5), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_1) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_5)
  label l0
  // [mir] StorageLive(_6)
  // [mir] _6 = _3
  _6 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_6), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_3) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_6)
  label l1
  // [mir] _4 = std::arch::x86_64::_mm_clmulepi64_si128::<0>(move _5, move _6) -> [return: bb1, unwind: bb5]
  label l2
  assert true
  exhale acc(struct$m_std$$arch$$x86_64$$__m128i(_5), write) &&
    acc(struct$m_std$$arch$$x86_64$$__m128i(_6), write)
  _4 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_4), write)
  inhale true
  label l3
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = _1
  _8 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_8), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_1) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_8)
  label l4
  // [mir] StorageLive(_9)
  // [mir] _9 = _3
  _9 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_9), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_3) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_9)
  label l5
  // [mir] _7 = std::arch::x86_64::_mm_clmulepi64_si128::<17>(move _8, move _9) -> [return: bb2, unwind: bb5]
  label l6
  assert true
  exhale acc(struct$m_std$$arch$$x86_64$$__m128i(_8), write) &&
    acc(struct$m_std$$arch$$x86_64$$__m128i(_9), write)
  _7 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_7), write)
  inhale true
  label l7
  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_8)
  // [mir] FakeRead(ForLet(None), _7)
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = _2
  _11 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_11), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_2) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_11)
  label l8
  // [mir] StorageLive(_12)
  // [mir] _12 = _4
  _12 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_12), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_4) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_12)
  label l9
  // [mir] _10 = std::arch::x86_64::_mm_xor_si128(move _11, move _12) -> [return: bb3, unwind: bb5]
  label l10
  assert true
  exhale acc(struct$m_std$$arch$$x86_64$$__m128i(_11), write) &&
    acc(struct$m_std$$arch$$x86_64$$__m128i(_12), write)
  _10 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_10), write)
  inhale true
  label l11
  // ========== bb3 ==========
  __t3 := true
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] StorageLive(_13)
  // [mir] _13 = _7
  _13 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_13), write)
  inhale snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_7) ==
    snap$__$TY$__Snap$struct$m_std$$arch$$x86_64$$__m128i$struct$m_std$$arch$$x86_64$$__m128i$Snap$struct$m_std$$arch$$x86_64$$__m128i(_13)
  label l12
  // [mir] _0 = std::arch::x86_64::_mm_xor_si128(move _10, move _13) -> [return: bb4, unwind: bb5]
  label l13
  assert true
  exhale acc(struct$m_std$$arch$$x86_64$$__m128i(_10), write) &&
    acc(struct$m_std$$arch$$x86_64$$__m128i(_13), write)
  _0 := builtin$havoc_ref()
  inhale acc(struct$m_std$$arch$$x86_64$$__m128i(_0), write)
  inhale true
  label l14
  // ========== bb4 ==========
  __t4 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_4)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l16
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  // obtain acc(struct$m_std$$arch$$x86_64$$__m128i(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(struct$m_std$$arch$$x86_64$$__m128i(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
