domain Snap$m_State$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(self: Snap$m_State$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_0: Snap$struct$m_baseline$$State): Snap$m_State$_beg_$_end_ 
  
  function Snap$m_State$_beg_$_end_$0$field$f$0__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State(self: Snap$m_State$_beg_$_end_): Snap$struct$m_baseline$$State 
  
  function cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_0: Snap$struct$m_specialized$$pclmulqdq$$State): Snap$m_State$_beg_$_end_ 
  
  function Snap$m_State$_beg_$_end_$1$field$f$0__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State(self: Snap$m_State$_beg_$_end_): Snap$struct$m_specialized$$pclmulqdq$$State 
  
  axiom Snap$m_State$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_State$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_State$_beg_$_end_$0$injectivity {
    (forall _l_0: Snap$struct$m_baseline$$State, _r_0: Snap$struct$m_baseline$$State ::
      { cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_l_0),
      cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_r_0) }
      cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_l_0) ==
      cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_State$_beg_$_end_$0$discriminant_axiom {
    (forall _0: Snap$struct$m_baseline$$State ::
      { cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_0)) ==
      0)
  }
  
  axiom Snap$m_State$_beg_$_end_$0$field$f$0$axiom {
    (forall _0: Snap$struct$m_baseline$$State ::
      { Snap$m_State$_beg_$_end_$0$field$f$0__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State(cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_0)) }
      Snap$m_State$_beg_$_end_$0$field$f$0__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State(cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_State$_beg_$_end_$1$injectivity {
    (forall _l_0: Snap$struct$m_specialized$$pclmulqdq$$State, _r_0: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_l_0),
      cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_State$_beg_$_end_$1$discriminant_axiom {
    (forall _0: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_State$_beg_$_end_$1$field$f$0$axiom {
    (forall _0: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { Snap$m_State$_beg_$_end_$1$field$f$0__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State(cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_0)) }
      Snap$m_State$_beg_$_end_$1$field$f$0__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State(cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_(_0)) ==
      _0)
  }
}

domain Snap$struct$m_baseline$$State  {
  
  function cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_0: Int): Snap$struct$m_baseline$$State 
  
  function Snap$struct$m_baseline$$State$0$field$f$state__$TY$__Snap$struct$m_baseline$$State$$int$(self: Snap$struct$m_baseline$$State): Int 
  
  axiom Snap$struct$m_baseline$$State$0$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_l_0),
      cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_r_0) }
      cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_baseline$$State$0$field$f$state$axiom {
    (forall _0: Int ::
      { Snap$struct$m_baseline$$State$0$field$f$state__$TY$__Snap$struct$m_baseline$$State$$int$(cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_0)) }
      Snap$struct$m_baseline$$State$0$field$f$state__$TY$__Snap$struct$m_baseline$$State$$int$(cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State(_0)) ==
      _0)
  }
  
  axiom Snap$struct$m_baseline$$State$0$field$f$state$valid {
    (forall self: Snap$struct$m_baseline$$State ::
      { Snap$struct$m_baseline$$State$0$field$f$state__$TY$__Snap$struct$m_baseline$$State$$int$(self) }
      0 <=
      Snap$struct$m_baseline$$State$0$field$f$state__$TY$__Snap$struct$m_baseline$$State$$int$(self) &&
      Snap$struct$m_baseline$$State$0$field$f$state__$TY$__Snap$struct$m_baseline$$State$$int$(self) <=
      4294967295)
  }
}

domain Snap$struct$m_specialized$$pclmulqdq$$State  {
  
  function cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_0: Int): Snap$struct$m_specialized$$pclmulqdq$$State 
  
  function Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self: Snap$struct$m_specialized$$pclmulqdq$$State): Int 
  
  axiom Snap$struct$m_specialized$$pclmulqdq$$State$0$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_l_0),
      cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_r_0) }
      cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state$axiom {
    (forall _0: Int ::
      { Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_0)) }
      Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State(_0)) ==
      _0)
  }
  
  axiom Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state$valid {
    (forall self: Snap$struct$m_specialized$$pclmulqdq$$State ::
      { Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self) }
      0 <=
      Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self) &&
      Snap$struct$m_specialized$$pclmulqdq$$State$0$field$f$state__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$(self) <=
      4294967295)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Baseline: Ref

field enum_Specialized: Ref

field f$0: Ref

field f$amount: Ref

field f$state: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function Slice$len__$TY$__u8$Slice$u8$$int$(self: Ref): Int
  requires acc(Slice$u8(self), read$())
  ensures result >= 0
  ensures result <= 18446744073709551615


function builtin$cast$usize$u64__$TY$__$int$$$int$(number: Int): Int
  requires 0 <= number
  requires number <= 18446744073709551615
  requires 0 <= number
  requires number <= 18446744073709551615
  ensures 0 <= result
  ensures result <= 18446744073709551615
{
  number
}

function m_State$_beg_$_end_$$discriminant$$__$TY$__m_State$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_State$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_$$int$(snap$__$TY$__Snap$m_State$_beg_$_end_$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_State$_beg_$_end_(self), read$()) in self.discriminant)
}

function snap$__$TY$__Snap$m_State$_beg_$_end_$m_State$_beg_$_end_$Snap$m_State$_beg_$_end_(self: Ref): Snap$m_State$_beg_$_end_
  requires acc(m_State$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_State$_beg_$_end_(self), read$()) in self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_specialized$$pclmulqdq$$State$Snap$m_State$_beg_$_end_((unfolding acc(m_State$_beg_$_end_(self), read$()) in
      (unfolding acc(m_State$_beg_$_end_Specialized(self.enum_Specialized), read$()) in
        snap$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$struct$m_specialized$$pclmulqdq$$State$Snap$struct$m_specialized$$pclmulqdq$$State(self.enum_Specialized.f$0)))) :
    cons$0$__$TY$__Snap$m_State$_beg_$_end_$Snap$struct$m_baseline$$State$Snap$m_State$_beg_$_end_((unfolding acc(m_State$_beg_$_end_(self), read$()) in
      (unfolding acc(m_State$_beg_$_end_Baseline(self.enum_Baseline), read$()) in
        snap$__$TY$__Snap$struct$m_baseline$$State$struct$m_baseline$$State$Snap$struct$m_baseline$$State(self.enum_Baseline.f$0)))))
}

function snap$__$TY$__Snap$struct$m_baseline$$State$struct$m_baseline$$State$Snap$struct$m_baseline$$State(self: Ref): Snap$struct$m_baseline$$State
  requires acc(struct$m_baseline$$State(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_baseline$$State$$int$$Snap$struct$m_baseline$$State((unfolding acc(struct$m_baseline$$State(self), read$()) in
    (unfolding acc(u32(self.f$state), read$()) in self.f$state.val_int)))
}

function snap$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$struct$m_specialized$$pclmulqdq$$State$Snap$struct$m_specialized$$pclmulqdq$$State(self: Ref): Snap$struct$m_specialized$$pclmulqdq$$State
  requires acc(struct$m_specialized$$pclmulqdq$$State(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_specialized$$pclmulqdq$$State$$int$$Snap$struct$m_specialized$$pclmulqdq$$State((unfolding acc(struct$m_specialized$$pclmulqdq$$State(self), read$()) in
    (unfolding acc(u32(self.f$state), read$()) in self.f$state.val_int)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate Slice$u8(self: Ref) 

predicate m_State$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Baseline, write) &&
  (acc(self.enum_Specialized, write) &&
  (self.discriminant == 1 ?
    acc(m_State$_beg_$_end_Specialized(self.enum_Specialized), write) :
    acc(m_State$_beg_$_end_Baseline(self.enum_Baseline), write)))))
}

predicate m_State$_beg_$_end_Baseline(self: Ref) {
  acc(self.f$0, write) && acc(struct$m_baseline$$State(self.f$0), write)
}

predicate m_State$_beg_$_end_Specialized(self: Ref) {
  acc(self.f$0, write) &&
  acc(struct$m_specialized$$pclmulqdq$$State(self.f$0), write)
}

predicate struct$m_Hasher(self: Ref) {
  acc(self.f$amount, write) &&
  (acc(u64(self.f$amount), write) &&
  (acc(self.f$state, write) &&
  acc(m_State$_beg_$_end_(self.f$state), write)))
}

predicate struct$m_baseline$$State(self: Ref) {
  acc(self.f$state, write) && acc(u32(self.f$state), write)
}

predicate struct$m_specialized$$pclmulqdq$$State(self: Ref) {
  acc(self.f$state, write) && acc(u32(self.f$state), write)
}

predicate tuple0$(self: Ref) 

predicate u32(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 4294967295)
}

predicate u64(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_Hasher$$update() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Int
  var _old$pre$0: Ref
  var _old$pre$1: Ref
  var _1: Ref
  var _2: Ref
  var _3: Int
  var _4: Int
  var _5: Ref
  var _6: Ref
  var _7: Int
  var _8: Ref
  var _9: Ref
  var _10: Ref
  var _11: Ref
  var _12: Ref
  var _13: Ref
  
  label start
  // ========== start ==========
  // Def path: "crc32fast::{impl#0}::update"
  // Span: src/lib.rs:102:5: 108:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_Hasher(_1.val_ref), write) &&
    (acc(_2.val_ref, write) && acc(Slice$u8(_2.val_ref), read$())))
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = &'?4 (*_2)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  _5.val_ref := _2.val_ref
  inhale acc(Slice$u8(_5.val_ref), read$())
  label l0
  // [mir] _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind: bb10]
  label l1
  _4 := builtin$havoc_int()
  _4 := Slice$len__$TY$__u8$Slice$u8$$int$(_5.val_ref)
  // transfer perm _5.val_ref --> old[l1](_5.val_ref) // unchecked: false
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L15,L12,)

  if (__t0 && __t0) {
    // expire loan L12
    // transfer perm old[l1](_5.val_ref) --> old[l0](_5.val_ref) // unchecked: false
    exhale acc(Slice$u8(old[l0](_5.val_ref)), read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_5)
  // [mir] _3 = move _4 as u64 (IntToInt)
  _3 := builtin$havoc_int()
  _3 := builtin$cast$usize$u64__$TY$__$int$$$int$(_4)
  // [mir] StorageDead(_4)
  // [mir] _6 = CheckedAdd(((*_1).0: u64), _3)
  _6 := builtin$havoc_ref()
  inhale acc(_6.tuple_0, write)
  inhale acc(_6.tuple_0.val_int, write)
  inhale acc(_6.tuple_1, write)
  inhale acc(_6.tuple_1.val_bool, write)
  unfold acc(struct$m_Hasher(_1.val_ref), write)
  unfold acc(u64(_1.val_ref.f$amount), write)
  _6.tuple_0.val_int := _1.val_ref.f$amount.val_int + _3
  _6.tuple_1.val_bool := _1.val_ref.f$amount.val_int + _3 < 0 ||
    _1.val_ref.f$amount.val_int + _3 > 18446744073709551615
  // [mir] assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: u64), move _3) -> [success: bb2, unwind: bb10]
  __t10 := _6.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t10
  // ========== bb2 ==========
  __t2 := true
  // [mir] ((*_1).0: u64) = move (_6.0: u64)
  _1.val_ref.f$amount := _6.tuple_0
  label l3
  // [mir] StorageDead(_3)
  // [mir] FakeRead(ForMatchedPlace(None), ((*_1).1: State))
  // [mir] _7 = discriminant(((*_1).1: State))
  _7 := builtin$havoc_int()
  _7 := m_State$_beg_$_end_$$discriminant$$__$TY$__m_State$_beg_$_end_$$int$(_1.val_ref.f$state)
  // [mir] switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb5]
  __t11 := _7
  // Ignore default target bb5, as the compiler marked it as unreachable.
  if (__t11 == 0) {
    goto l2
  }
  goto bb0
  
  label bb0
  // ========== l4 ==========
  // MIR edge bb2 --> bb4
  // ========== bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = &'?5 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State)
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_ref, write)
  unfold acc(m_State$_beg_$_end_(_1.val_ref.f$state), write)
  unfold acc(m_State$_beg_$_end_Specialized(_1.val_ref.f$state.enum_Specialized), write)
  _11.val_ref := _1.val_ref.f$state.enum_Specialized.f$0
  label l6
  // [mir] StorageLive(_12)
  // [mir] _12 = &'?6 mut (*_11)
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_ref, write)
  _12.val_ref := _11.val_ref
  label l7
  // [mir] StorageLive(_13)
  // [mir] _13 = &'?7 (*_2)
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_ref, write)
  _13.val_ref := _2.val_ref
  inhale acc(Slice$u8(_13.val_ref), read$())
  label l8
  // [mir] _0 = specialized::pclmulqdq::State::update(move _12, move _13) -> [return: bb8, unwind: bb10]
  label l9
  assert true
  exhale acc(_12.val_ref, write) &&
    (acc(struct$m_specialized$$pclmulqdq$$State(_12.val_ref), write) &&
    acc(_13.val_ref, write))
  _0 := builtin$havoc_ref()
  inhale acc(struct$m_specialized$$pclmulqdq$$State(old[l9](_12.val_ref)), write)
  inhale acc(tuple0$(_0), write)
  // transfer perm _13.val_ref --> old[l9](_13.val_ref) // unchecked: true
  inhale true
  label l10
  // ========== l11 ==========
  // MIR edge bb4 --> bb8
  // Expire borrows
  // expire_borrows ReborrowingDAG(L9,L13,L8,L1,L0,)

  if (__t4 && __t4) {
    // expire loan L13
    // transfer perm old[l9](_13.val_ref) --> old[l8](_13.val_ref) // unchecked: false
    exhale acc(Slice$u8(old[l8](_13.val_ref)), read$())
    // drop Pred(old[l9](_12.val_ref), write) (Pred(old[l9](_12.val_ref), write))
  }
  // ========== bb8 ==========
  __t5 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] goto -> bb9
  // ========== l18 ==========
  fold acc(m_State$_beg_$_end_Specialized(_1.val_ref.f$state.enum_Specialized), write)
  fold acc(m_State$_beg_$_end_(_1.val_ref.f$state), write)
  // drop Acc(_11.val_ref, write) (Acc(_11.val_ref, write))
  goto bb1
  
  label bb1
  // ========== bb9 ==========
  __t9 := true
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l19
  // Fold predicates for &mut args and transfer borrow permissions to old
  fold acc(u64(_1.val_ref.f$amount), write)
  fold acc(struct$m_Hasher(_1.val_ref), write)
  // obtain acc(struct$m_Hasher(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // obtain acc(Slice$u8(_2.val_ref), write)
  _old$pre$1 := _2.val_ref
  // Fold the result
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_Hasher(_old$pre$0), write) &&
    acc(Slice$u8(_old$pre$1), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l2
  // ========== l5 ==========
  // MIR edge bb2 --> bb3
  // ========== bb3 ==========
  __t6 := true
  // [mir] falseEdge -> [real: bb6, imaginary: bb4]
  // ========== bb6 ==========
  __t7 := true
  // [mir] StorageLive(_8)
  // [mir] _8 = &'?8 mut ((((*_1).1: State) as Baseline).0: baseline::State)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  unfold acc(m_State$_beg_$_end_(_1.val_ref.f$state), write)
  unfold acc(m_State$_beg_$_end_Baseline(_1.val_ref.f$state.enum_Baseline), write)
  _8.val_ref := _1.val_ref.f$state.enum_Baseline.f$0
  label l12
  // [mir] StorageLive(_9)
  // [mir] _9 = &'?9 mut (*_8)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _8.val_ref
  label l13
  // [mir] StorageLive(_10)
  // [mir] _10 = &'?10 (*_2)
  _10 := builtin$havoc_ref()
  inhale acc(_10.val_ref, write)
  _10.val_ref := _2.val_ref
  inhale acc(Slice$u8(_10.val_ref), read$())
  label l14
  // [mir] _0 = baseline::State::update(move _9, move _10) -> [return: bb7, unwind: bb10]
  label l15
  assert true
  exhale acc(_9.val_ref, write) &&
    (acc(struct$m_baseline$$State(_9.val_ref), write) &&
    acc(_10.val_ref, write))
  _0 := builtin$havoc_ref()
  inhale acc(struct$m_baseline$$State(old[l15](_9.val_ref)), write)
  inhale acc(tuple0$(_0), write)
  // transfer perm _10.val_ref --> old[l15](_10.val_ref) // unchecked: true
  inhale true
  label l16
  // ========== l17 ==========
  // MIR edge bb6 --> bb7
  // Expire borrows
  // expire_borrows ReborrowingDAG(L11,L14,L10,L3,L2,)

  if (__t7 && __t7) {
    // expire loan L14
    // transfer perm old[l15](_10.val_ref) --> old[l14](_10.val_ref) // unchecked: false
    exhale acc(Slice$u8(old[l14](_10.val_ref)), read$())
    // drop Pred(old[l15](_9.val_ref), write) (Pred(old[l15](_9.val_ref), write))
  }
  // ========== bb7 ==========
  __t8 := true
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_8)
  // [mir] goto -> bb9
  // ========== l20 ==========
  fold acc(m_State$_beg_$_end_Baseline(_1.val_ref.f$state.enum_Baseline), write)
  fold acc(m_State$_beg_$_end_(_1.val_ref.f$state), write)
  // drop Acc(_8.val_ref, write) (Acc(_8.val_ref, write))
  goto bb1
  
  label return
  // ========== bb5 ==========
  __t3 := true
  // [mir] unreachable
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
