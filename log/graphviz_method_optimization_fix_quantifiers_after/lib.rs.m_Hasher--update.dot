digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_Hasher$$update";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::\{impl#0\}::update"</font><br/><font color="orange">// Span: src/lib.rs:102:5: 108:6 (#0)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/>__t2 := copy false<br/>__t3 := copy false<br/>__t4 := copy false<br/>__t5 := copy false<br/>__t6 := copy false<br/>__t7 := copy false<br/>__t8 := copy false<br/>__t9 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(struct$m_Hasher(_1.val_ref), write)) &amp;&amp; ((acc(_2.val_ref, write)) &amp;&amp; ((acc(Slic \ <br/>    e$u8(_2.val_ref), read)) &amp;&amp; (true))))<br/>inhale true<br/>inhale (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>inhale true<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l19<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>fold acc(Ref(u64)(_1.val_ref.f$amount), write)<br/>fold acc(Ref(struct$m_Hasher)(_1.val_ref), write)<br/>obtain acc(struct$m_Hasher(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/>obtain acc(Slice$u8(_2.val_ref), write)<br/>_old$pre$1 := move _2.val_ref<br/><font color="orange">// Fold the result</font><br/>obtain acc(tuple0$(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/>assert true<br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(struct$m_Hasher(_old$pre$0), write)) &amp;&amp; ((acc(Slice$u8(_old$pre$1), read)) &amp;&amp; (true))<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(tuple0$(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] _5 = &amp;'?4 (*_2)</font><br/>_5 := builtin$havoc_ref()<br/>inhale acc(_5.val_ref, write)<br/>_5.val_ref := borrow _2.val_ref // L12<br/>inhale acc(Slice$u8(_5.val_ref), read)<br/>label l0<br/><font color="orange">// [mir] _4 = core::slice::&lt;impl [u8]&gt;::len(move _5) -&gt; [return: bb1, unwind: bb10]</font><br/>label l1<br/>_4 := builtin$havoc_int()<br/>inhale true<br/>_4 := copy Slice$len&lt;Ref(u8)&gt;(_5.val_ref)<br/>transfer perm _5.val_ref --&gt; old[l1](_5.val_ref) // unchecked: false</td></tr><tr><td align="left">Goto(cfg:3)<br/></td></tr></table>>];
"block_l2" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l2 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l2 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb1</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L15,L12,)</font><br/>if (__t0) &amp;&amp; (true) \{<br/>    // expire loan L15<br/>\} else \{\}<br/>if (__t0) &amp;&amp; ((__t0) &amp;&amp; (true)) \{<br/>    // expire loan L12<br/>    transfer perm old[l1](_5.val_ref) --&gt; old[l0](_5.val_ref) // unchecked: false<br/>    exhale acc(Slice$u8(old[l0](_5.val_ref)), read)<br/>\} else \{\}</td></tr><tr><td align="left">Goto(cfg:4)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:4)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] _3 = move _4 as u64 (IntToInt)</font><br/>_3 := builtin$havoc_int()<br/>inhale true<br/>_3 := copy builtin$cast$usize$u64&lt;&gt;(_4)<br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] _6 = CheckedAdd(((*_1).0: u64), _3)</font><br/>_6 := builtin$havoc_ref()<br/>inhale acc(_6.tuple_0, write)<br/>inhale acc(_6.tuple_0.val_int, write)<br/>inhale acc(_6.tuple_1, write)<br/>inhale acc(_6.tuple_1.val_bool, write)<br/>unfold acc(Ref(struct$m_Hasher)(_1.val_ref), write)<br/>unfold acc(Ref(u64)(_1.val_ref.f$amount), write)<br/>_6.tuple_0.val_int := copy (_1.val_ref.f$amount.val_int) + (_3)<br/>_6.tuple_1.val_bool := copy (((_1.val_ref.f$amount.val_int) + (_3)) &lt; (0)) &#124;&#124; (((_1.val_ref.f$amount.val_int) + (_3)) &gt;  \ <br/>    (18446744073709551615))<br/><font color="orange">// [mir] assert(!move (_6.1: bool), "attempt to compute `\{\} + \{\}`, which would overflow", ((*_1).0: u64), move _3) -&gt; [s \ <br/>    uccess: bb2, unwind: bb10]</font><br/>__t10 := copy _6.tuple_1.val_bool<br/><font color="orange">// Rust assertion: attempt to add with overflow</font><br/>assert !(__t10)</td></tr><tr><td align="left">Goto(cfg:5)<br/></td></tr></table>>];
"block_bb2" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb2 (cfg:5)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb2 ==========</font><br/>__t2 := copy true<br/><font color="orange">// [mir] ((*_1).0: u64) = move (_6.0: u64)</font><br/>_1.val_ref.f$amount := move _6.tuple_0<br/>label l3<br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] FakeRead(ForMatchedPlace(None), ((*_1).1: State))</font><br/><font color="orange">// [mir] _7 = discriminant(((*_1).1: State))</font><br/>_7 := builtin$havoc_int()<br/>inhale true<br/>_7 := copy m_State$_beg_$_end_$$discriminant$$&lt;&gt;(_1.val_ref.f$state)<br/><font color="orange">// [mir] switchInt(move _7) -&gt; [0: bb3, 1: bb4, otherwise: bb5]</font><br/>__t11 := copy _7<br/><font color="orange">// Ignore default target bb5, as the compiler marked it as unreachable.</font></td></tr><tr><td align="left">GotoSwitch(((__t11) == (0), cfg:7), cfg:6)<br/></td></tr></table>>];
"block_l4" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l4 (cfg:6)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l4 ==========</font><br/><font color="orange">// MIR edge bb2 --&gt; bb4</font></td></tr><tr><td align="left">Goto(cfg:9)<br/></td></tr></table>>];
"block_l5" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l5 (cfg:7)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l5 ==========</font><br/><font color="orange">// MIR edge bb2 --&gt; bb3</font></td></tr><tr><td align="left">Goto(cfg:12)<br/></td></tr></table>>];
"block_bb5" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb5 (cfg:8)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb5 ==========</font><br/>__t3 := copy true<br/><font color="orange">// [mir] unreachable</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb4" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb4 (cfg:9)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb4 ==========</font><br/>__t4 := copy true<br/><font color="orange">// [mir] StorageLive(_11)</font><br/><font color="orange">// [mir] _11 = &amp;'?5 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State)</font><br/>_11 := builtin$havoc_ref()<br/>inhale acc(_11.val_ref, write)<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Specialized\}&gt;(_1.val_ref.f$state), write)<br/>unfold acc(Ref(m_State$_beg_$_end_Specialized)(_1.val_ref.f$state[enum_Specialized]), write)<br/>_11.val_ref := mut borrow _1.val_ref.f$state[enum_Specialized].f$0 // L0<br/>label l6<br/><font color="orange">// [mir] StorageLive(_12)</font><br/><font color="orange">// [mir] _12 = &amp;'?6 mut (*_11)</font><br/>_12 := builtin$havoc_ref()<br/>inhale acc(_12.val_ref, write)<br/>_12.val_ref := mut borrow _11.val_ref // L1<br/>label l7<br/><font color="orange">// [mir] StorageLive(_13)</font><br/><font color="orange">// [mir] _13 = &amp;'?7 (*_2)</font><br/>_13 := builtin$havoc_ref()<br/>inhale acc(_13.val_ref, write)<br/>_13.val_ref := borrow _2.val_ref // L13<br/>inhale acc(Slice$u8(_13.val_ref), read)<br/>label l8<br/><font color="orange">// [mir] _0 = specialized::pclmulqdq::State::update(move _12, move _13) -&gt; [return: bb8, unwind: bb10]</font><br/>label l9<br/>assert true<br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>exhale (acc(_12.val_ref, write)) &amp;&amp; ((acc(struct$m_specialized$$pclmulqdq$$State(_12.val_ref), write)) &amp;&amp; ((acc(_13.val_ \ <br/>    ref, write)) &amp;&amp; ((true) &amp;&amp; (true))))<br/>_0 := builtin$havoc_ref()<br/>inhale (acc(struct$m_specialized$$pclmulqdq$$State(old[l9](_12.val_ref)), write)) &amp;&amp; (true)<br/>inhale acc(tuple0$(_0), write)<br/>transfer perm _13.val_ref --&gt; old[l9](_13.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>inhale true<br/>exhale true<br/>label l10</td></tr><tr><td align="left">Goto(cfg:10)<br/></td></tr></table>>];
"block_l11" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l11 (cfg:10)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l11 ==========</font><br/><font color="orange">// MIR edge bb4 --&gt; bb8</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L9,L13,L8,L1,L0,)</font><br/>if (__t4) &amp;&amp; (true) \{<br/>    // expire loan L9<br/>\} else \{\}<br/>if (__t4) &amp;&amp; ((__t4) &amp;&amp; (true)) \{<br/>    // expire loan L13<br/>    transfer perm old[l9](_13.val_ref) --&gt; old[l8](_13.val_ref) // unchecked: false<br/>    exhale acc(Slice$u8(old[l8](_13.val_ref)), read)<br/>    // drop Pred(old[l9](_12.val_ref), write) (Pred(old[l9](_12.val_ref), write))<br/>\} else \{\}<br/>if (__t4) &amp;&amp; (true) \{<br/>    // expire loan L8<br/>\} else \{\}<br/>if (__t4) &amp;&amp; ((__t4) &amp;&amp; (true)) \{<br/>    // expire loan L1<br/>    transfer perm old[l9](_12.val_ref) --&gt; old[l7](_12.val_ref) // unchecked: false<br/>    transfer perm old[l7](_12.val_ref) --&gt; _11.val_ref // unchecked: false<br/>\} else \{\}<br/>if (__t4) &amp;&amp; ((__t4) &amp;&amp; ((__t4) &amp;&amp; (true))) \{<br/>    // expire loan L0<br/>    transfer perm _11.val_ref --&gt; _1.val_ref.f$state[enum_Specialized].f$0 // unchecked: false<br/>    // drop Pred(old[l9](_13.val_ref), read) (Pred(old[l9](_13.val_ref), read))<br/>    // drop Pred(_1.val_ref.f$state[enum_Specialized].f$0, write) (Pred(_1.val_ref.f$state[enum_Specialized].f$0, write) \ <br/>    )<br/>    // restored (in branch merge): Pred(_1.val_ref.f$state[enum_Specialized].f$0, write) (Pred(_1.val_ref.f$state[enum_S \ <br/>    pecialized].f$0, write))<br/>\} else \{\}</td></tr><tr><td align="left">Goto(cfg:11)<br/></td></tr></table>>];
"block_bb8" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb8 (cfg:11)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb8 ==========</font><br/>__t5 := copy true<br/><font color="orange">// [mir] StorageDead(_13)</font><br/><font color="orange">// [mir] StorageDead(_12)</font><br/><font color="orange">// [mir] StorageDead(_11)</font><br/><font color="orange">// [mir] goto -&gt; bb9</font></td></tr><tr><td align="left">Goto(cfg:17)<br/></td></tr></table>>];
"block_bb3" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb3 (cfg:12)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb3 ==========</font><br/>__t6 := copy true<br/><font color="orange">// [mir] falseEdge -&gt; [real: bb6, imaginary: bb4]</font></td></tr><tr><td align="left">Goto(cfg:13)<br/></td></tr></table>>];
"block_bb6" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb6 (cfg:13)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb6 ==========</font><br/>__t7 := copy true<br/><font color="orange">// [mir] StorageLive(_8)</font><br/><font color="orange">// [mir] _8 = &amp;'?8 mut ((((*_1).1: State) as Baseline).0: baseline::State)</font><br/>_8 := builtin$havoc_ref()<br/>inhale acc(_8.val_ref, write)<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_1.val_ref.f$state), write)<br/>unfold acc(Ref(m_State$_beg_$_end_Baseline)(_1.val_ref.f$state[enum_Baseline]), write)<br/>_8.val_ref := mut borrow _1.val_ref.f$state[enum_Baseline].f$0 // L2<br/>label l12<br/><font color="orange">// [mir] StorageLive(_9)</font><br/><font color="orange">// [mir] _9 = &amp;'?9 mut (*_8)</font><br/>_9 := builtin$havoc_ref()<br/>inhale acc(_9.val_ref, write)<br/>_9.val_ref := mut borrow _8.val_ref // L3<br/>label l13<br/><font color="orange">// [mir] StorageLive(_10)</font><br/><font color="orange">// [mir] _10 = &amp;'?10 (*_2)</font><br/>_10 := builtin$havoc_ref()<br/>inhale acc(_10.val_ref, write)<br/>_10.val_ref := borrow _2.val_ref // L14<br/>inhale acc(Slice$u8(_10.val_ref), read)<br/>label l14<br/><font color="orange">// [mir] _0 = baseline::State::update(move _9, move _10) -&gt; [return: bb7, unwind: bb10]</font><br/>label l15<br/>assert true<br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>exhale (acc(_9.val_ref, write)) &amp;&amp; ((acc(struct$m_baseline$$State(_9.val_ref), write)) &amp;&amp; ((acc(_10.val_ref, write)) &amp;&amp;  \ <br/>    ((true) &amp;&amp; (true))))<br/>_0 := builtin$havoc_ref()<br/>inhale (acc(struct$m_baseline$$State(old[l15](_9.val_ref)), write)) &amp;&amp; (true)<br/>inhale acc(tuple0$(_0), write)<br/>transfer perm _10.val_ref --&gt; old[l15](_10.val_ref) // unchecked: true<br/>inhale (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>inhale true<br/>exhale true<br/>label l16</td></tr><tr><td align="left">Goto(cfg:14)<br/></td></tr></table>>];
"block_l17" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l17 (cfg:14)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l17 ==========</font><br/><font color="orange">// MIR edge bb6 --&gt; bb7</font><br/><font color="orange">// Expire borrows</font><br/><font color="orange">// expire_borrows ReborrowingDAG(L11,L14,L10,L3,L2,)</font><br/>if (__t7) &amp;&amp; (true) \{<br/>    // expire loan L11<br/>\} else \{\}<br/>if (__t7) &amp;&amp; ((__t7) &amp;&amp; (true)) \{<br/>    // expire loan L14<br/>    transfer perm old[l15](_10.val_ref) --&gt; old[l14](_10.val_ref) // unchecked: false<br/>    exhale acc(Slice$u8(old[l14](_10.val_ref)), read)<br/>    // drop Pred(old[l15](_9.val_ref), write) (Pred(old[l15](_9.val_ref), write))<br/>\} else \{\}<br/>if (__t7) &amp;&amp; (true) \{<br/>    // expire loan L10<br/>\} else \{\}<br/>if (__t7) &amp;&amp; ((__t7) &amp;&amp; (true)) \{<br/>    // expire loan L3<br/>    transfer perm old[l15](_9.val_ref) --&gt; old[l13](_9.val_ref) // unchecked: false<br/>    transfer perm old[l13](_9.val_ref) --&gt; _8.val_ref // unchecked: false<br/>\} else \{\}<br/>if (__t7) &amp;&amp; ((__t7) &amp;&amp; ((__t7) &amp;&amp; (true))) \{<br/>    // expire loan L2<br/>    transfer perm _8.val_ref --&gt; _1.val_ref.f$state[enum_Baseline].f$0 // unchecked: false<br/>    // drop Pred(_1.val_ref.f$state[enum_Baseline].f$0, write) (Pred(_1.val_ref.f$state[enum_Baseline].f$0, write))<br/>    // restored (in branch merge): Pred(_1.val_ref.f$state[enum_Baseline].f$0, write) (Pred(_1.val_ref.f$state[enum_Base \ <br/>    line].f$0, write))<br/>    // drop Pred(old[l15](_10.val_ref), read) (Pred(old[l15](_10.val_ref), read))<br/>\} else \{\}</td></tr><tr><td align="left">Goto(cfg:15)<br/></td></tr></table>>];
"block_bb7" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb7 (cfg:15)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb7 ==========</font><br/>__t8 := copy true<br/><font color="orange">// [mir] StorageDead(_10)</font><br/><font color="orange">// [mir] StorageDead(_9)</font><br/><font color="orange">// [mir] StorageDead(_8)</font><br/><font color="orange">// [mir] goto -&gt; bb9</font></td></tr><tr><td align="left">Goto(cfg:18)<br/></td></tr></table>>];
"block_bb9" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb9 (cfg:16)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb9 ==========</font><br/>__t9 := copy true<br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_l18" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l18 (cfg:17)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l18 ==========</font><br/>fold acc(Ref(m_State$_beg_$_end_Specialized)(_1.val_ref.f$state[enum_Specialized]), write)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Specialized\}&gt;(_1.val_ref.f$state), write)<br/><font color="orange">// drop Acc(_11.val_ref, write) (Acc(_11.val_ref, write))</font></td></tr><tr><td align="left">Goto(cfg:16)<br/></td></tr></table>>];
"block_l20" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l20 (cfg:18)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l20 ==========</font><br/>fold acc(Ref(m_State$_beg_$_end_Baseline)(_1.val_ref.f$state[enum_Baseline]), write)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_1.val_ref.f$state), write)<br/><font color="orange">// drop Acc(_8.val_ref, write) (Acc(_8.val_ref, write))</font></td></tr><tr><td align="left">Goto(cfg:16)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_l2";
"block_l2" -> "block_bb1";
"block_bb1" -> "block_bb2";
"block_bb2" -> "block_l5";
"block_bb2" -> "block_l4";
"block_l4" -> "block_bb4";
"block_l5" -> "block_bb3";
"block_bb4" -> "block_l11";
"block_l11" -> "block_bb8";
"block_bb8" -> "block_l18";
"block_bb3" -> "block_bb6";
"block_bb6" -> "block_l17";
"block_l17" -> "block_bb7";
"block_bb7" -> "block_l20";
"block_bb9" -> "block_return";
"block_l18" -> "block_bb9";
"block_l20" -> "block_bb9";
}
