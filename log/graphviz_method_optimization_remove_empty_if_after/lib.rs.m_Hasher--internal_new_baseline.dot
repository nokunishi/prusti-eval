digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_Hasher$$internal_new_baseline";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::\{impl#0\}::internal_new_baseline"</font><br/><font color="orange">// Span: src/lib.rs:80:5: 85:6 (#0)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(u32(_1), write)) &amp;&amp; (true)<br/>inhale true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l6<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(m_State$_beg_$_end_Baseline)(_0.f$state[enum_Baseline]), write)<br/>fold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_0.f$state), write)<br/>fold acc(Ref(u64)(_0.f$amount), write)<br/>fold acc(Ref(struct$m_Hasher)(_0), write)<br/>obtain acc(struct$m_Hasher(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/>assert true<br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale true<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(struct$m_Hasher(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_2)</font><br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] _4 = _1</font><br/>_4 := builtin$havoc_ref()<br/>inhale acc(_4.val_int, write)<br/>unfold acc(Ref(u32)(_1), write)<br/>_4.val_int := copy _1.val_int<br/>label l0<br/><font color="orange">// [mir] _3 = baseline::State::new(move _4) -&gt; [return: bb1, unwind: bb2]</font><br/>label l1<br/>assert true<br/>assert (true) &amp;&amp; (true)<br/>fold acc(Ref(u32)(_4), write)<br/>exhale (acc(u32(_4), write)) &amp;&amp; (true)<br/>_3 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(struct$m_baseline$$State(_3), write)<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l2</td></tr><tr><td align="left">Goto(cfg:3)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] _2 = State::Baseline(move _3)</font><br/>_2 := builtin$havoc_ref()<br/>inhale acc(m_State$_beg_$_end_(_2), write)<br/>inhale (m_State$_beg_$_end_$$discriminant$$&lt;&gt;(_2)) == (0)<br/>downcast _2 to enum_Baseline<br/>unfold acc(Ref(m_State$_beg_$_end_)&lt;variant \{Baseline\}&gt;(_2), write)<br/>unfold acc(Ref(m_State$_beg_$_end_Baseline)(_2[enum_Baseline]), write)<br/>_2[enum_Baseline].f$0 := move _3<br/>label l3<br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] _0 = Hasher \{ amount: const 0_u64, state: move _2 \}</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(struct$m_Hasher(_0), write)<br/>_aux_havoc_u64 := builtin$havoc_ref()<br/>unfold acc(Ref(struct$m_Hasher)(_0), write)<br/>_0.f$amount := move _aux_havoc_u64<br/>inhale acc(_0.f$amount.val_int, write)<br/>_0.f$amount.val_int := copy 0<br/>_0.f$state := move _2<br/>label l4<br/><font color="orange">// [mir] StorageDead(_2)</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_bb1";
"block_bb1" -> "block_return";
}
