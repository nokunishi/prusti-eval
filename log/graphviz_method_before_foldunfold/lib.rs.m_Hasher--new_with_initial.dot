digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_Hasher$$new_with_initial";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::\{impl#0\}::new_with_initial"</font><br/><font color="orange">// Span: src/lib.rs:74:5: 76:6 (#0)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/>__t2 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(u32(_1), write)) &amp;&amp; (true)<br/>inhale true<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l9<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/><font color="orange">// Fold the result</font><br/>obtain acc(struct$m_Hasher(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/>assert true<br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale true<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(struct$m_Hasher(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_2)</font><br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] _3 = _1</font><br/>_3 := builtin$havoc_ref()<br/>inhale acc(_3.val_int, write)<br/>_3.val_int := copy _1.val_int<br/>label l0<br/><font color="orange">// [mir] _2 = Hasher::internal_new_specialized(move _3) -&gt; [return: bb1, unwind: bb3]</font><br/>label l1<br/>assert true<br/>assert (true) &amp;&amp; (true)<br/>exhale (acc(u32(_3), write)) &amp;&amp; (true)<br/>_2 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(m_std$$option$$Option$_beg_$struct$m_Hasher$_end_(_2), write)<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l2</td></tr><tr><td align="left">Goto(cfg:3)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] _5 = &amp;'?2 _1</font><br/>_5 := builtin$havoc_ref()<br/>inhale acc(_5.val_ref, write)<br/>_5.val_ref := borrow _1 // L0<br/>label l3<br/><font color="orange">// [mir] _4 = [closure@src/lib.rs:75:61: 75:63] \{ init: move _5 \}</font><br/>_4 := builtin$havoc_ref()<br/>inhale acc(closure$m_Hasher$$new_with_initial$$$opencur$closure$sharp$0$closecur$(_4), write)<br/>_aux_havoc_ref$u32 := builtin$havoc_ref()<br/>_4.closure_0 := move _aux_havoc_ref$u32<br/>inhale acc(_4.closure_0.val_ref, write)<br/>_4.closure_0.val_ref := move _5.val_ref<br/>label l4<br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] _0 = std::option::Option::&lt;Hasher&gt;::unwrap_or_else::&lt;[closure@src/lib.rs:75:61: 75:63]&gt;(move _2, move _4) -&gt; [r \ <br/>    eturn: bb2, unwind: bb3]</font><br/>label l5<br/>assert true<br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/>exhale (acc(m_std$$option$$Option$_beg_$struct$m_Hasher$_end_(_2), write)) &amp;&amp; ((acc(closure$m_Hasher$$new_with_initial$$ \ <br/>    $opencur$closure$sharp$0$closecur$(_4), write)) &amp;&amp; (true))<br/>_0 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(struct$m_Hasher(_0), write)<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l6</td></tr><tr><td align="left">Goto(cfg:4)<br/></td></tr></table>>];
"block_l7" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l7 (cfg:4)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l7 ==========</font><br/><font color="orange">// MIR edge bb1 --&gt; bb2</font><br/><font color="orange">// Expire borrows</font><br/>expire_borrows ReborrowingDAG(L0,)</td></tr><tr><td align="left">Goto(cfg:5)<br/></td></tr></table>>];
"block_bb2" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb2 (cfg:5)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb2 ==========</font><br/>__t2 := copy true<br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] StorageDead(_2)</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_bb1";
"block_bb1" -> "block_l7";
"block_l7" -> "block_bb2";
"block_bb2" -> "block_return";
}
