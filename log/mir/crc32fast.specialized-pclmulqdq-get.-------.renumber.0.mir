// MIR for `specialized::pclmulqdq::get` 0 renumber

fn specialized::pclmulqdq::get(_1: &'?10 mut &'?11 [u8]) -> std::arch::x86_64::__m128i {
    debug a => _1;
    let mut _0: std::arch::x86_64::__m128i;
    let mut _2: !;
    let _3: ();
    let mut _4: bool;
    let _5: ();
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: &'?12 [u8];
    let mut _9: !;
    let _10: std::arch::x86_64::__m128i;
    let mut _11: *const std::arch::x86_64::__m128i;
    let mut _12: *const u8;
    let mut _13: &'?13 [u8];
    let mut _14: &'?14 [u8];
    let _15: &'?15 [u8];
    let _16: &'?16 [u8];
    let mut _17: &'?17 [u8];
    let mut _18: std::ops::RangeFrom<usize>;
    scope 1 {
        debug r => _10;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const true;
        switchInt(move _4) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &'?4 (*(*_1));
        _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        StorageDead(_8);
        _6 = Ge(move _7, const 16_usize);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        goto -> bb6;
    }

    bb4: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = core::panicking::panic(const "assertion failed: a.len() >= 16") -> bb10;
    }

    bb5: {
        _3 = const ();
        goto -> bb6;
    }

    bb6: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &'?6 (*(*_1));
        _12 = core::slice::<impl [u8]>::as_ptr(move _13) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_13);
        _11 = move _12 as *const std::arch::x86_64::__m128i (PtrToPtr);
        StorageDead(_12);
        _10 = std::arch::x86_64::_mm_loadu_si128(move _11) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        StorageDead(_11);
        FakeRead(ForLet(None), _10);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &'?7 (*(*_1));
        StorageLive(_18);
        _18 = std::ops::RangeFrom::<usize> { start: const 16_usize };
        _16 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _17, move _18) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = &'?8 (*_16);
        _14 = &'?9 (*_15);
        (*_1) = move _14;
        StorageDead(_14);
        StorageDead(_16);
        StorageDead(_15);
        _0 = _10;
        StorageDead(_10);
        return;
    }

    bb10 (cleanup): {
        resume;
    }
}
