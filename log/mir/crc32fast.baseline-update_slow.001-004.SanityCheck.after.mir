// MIR for `baseline::update_slow` after SanityCheck

fn baseline::update_slow(_1: u32, _2: &[u8]) -> u32 {
    debug prev => _1;
    debug buf => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;
    let _5: ();
    let mut _6: std::slice::Iter<'_, u8>;
    let mut _7: std::slice::Iter<'_, u8>;
    let mut _8: &[u8];
    let mut _10: ();
    let _11: ();
    let mut _12: std::option::Option<&u8>;
    let mut _13: &mut std::slice::Iter<'_, u8>;
    let mut _14: &mut std::slice::Iter<'_, u8>;
    let mut _15: isize;
    let mut _16: !;
    let mut _18: u32;
    let mut _19: [[u32; 256]; 16];
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let _23: usize;
    let mut _24: u8;
    let mut _25: u8;
    let mut _26: u32;
    let mut _27: u8;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: u32;
    let mut _31: u32;
    let mut _32: u32;
    let mut _33: bool;
    let mut _34: u32;
    scope 1 {
        debug crc => _3;
        let mut _9: std::slice::Iter<'_, u8>;
        scope 2 {
            debug iter => _9;
            let _17: u8;
            scope 3 {
                debug byte => _17;
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        _3 = Not(move _4);
        StorageDead(_4);
        FakeRead(ForLet(None), _3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &'_ (*_2);
        _7 = core::slice::<impl [u8]>::iter(move _8) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::slice::Iter<'_, u8> as std::iter::IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        StorageDead(_7);
        FakeRead(ForMatchedPlace(None), _6);
        StorageLive(_9);
        _9 = move _6;
        goto -> bb3;
    }

    bb3: {
        falseUnwind -> [real: bb4, unwind: bb13];
    }

    bb4: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &'_ mut _9;
        _13 = &'_ mut (*_14);
        _12 = <std::slice::Iter<'_, u8> as std::iter::Iterator>::next(move _13) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        StorageDead(_13);
        FakeRead(ForMatchedPlace(None), _12);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb6, 1: bb7, otherwise: bb8];
    }

    bb6: {
        falseEdge -> [real: bb9, imaginary: bb7];
    }

    bb7: {
        StorageLive(_17);
        _17 = (*((_12 as Some).0: &u8));
        StorageLive(_18);
        StorageLive(_19);
        _19 = const _;
        StorageLive(_20);
        _20 = const 0_usize;
        _21 = Len(_19);
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb10, unwind: bb13];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _5 = const ();
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_34);
        _34 = _3;
        _0 = Not(move _34);
        StorageDead(_34);
        StorageDead(_3);
        return;
    }

    bb10: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _3;
        _25 = move _26 as u8 (IntToInt);
        StorageDead(_26);
        StorageLive(_27);
        _27 = _17;
        _24 = BitXor(move _25, move _27);
        StorageDead(_27);
        StorageDead(_25);
        _23 = move _24 as usize (IntToInt);
        StorageDead(_24);
        _28 = Len(_19[_20]);
        _29 = Lt(_23, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _23) -> [success: bb11, unwind: bb13];
    }

    bb11: {
        _18 = _19[_20][_23];
        StorageLive(_30);
        StorageLive(_31);
        _31 = _3;
        _32 = const 8_i32 as u32 (IntToInt);
        _33 = Lt(move _32, const 32_u32);
        assert(move _33, "attempt to shift right by `{}`, which would overflow", const 8_i32) -> [success: bb12, unwind: bb13];
    }

    bb12: {
        _30 = Shr(move _31, const 8_i32);
        StorageDead(_31);
        _3 = BitXor(move _18, move _30);
        StorageDead(_30);
        StorageDead(_18);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        _11 = const ();
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _10 = const ();
        goto -> bb3;
    }

    bb13 (cleanup): {
        resume;
    }
}
