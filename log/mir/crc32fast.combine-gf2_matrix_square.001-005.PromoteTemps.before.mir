// MIR for `combine::gf2_matrix_square` before PromoteTemps

fn combine::gf2_matrix_square(_1: &mut [u32; 32], _2: &[u32; 32]) -> () {
    debug square => _1;
    debug mat => _2;
    let mut _0: ();
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _5: std::ops::Range<usize>;
    let mut _6: ();
    let _7: ();
    let mut _8: std::option::Option<usize>;
    let mut _9: &mut std::ops::Range<usize>;
    let mut _10: &mut std::ops::Range<usize>;
    let mut _11: isize;
    let mut _12: !;
    let mut _14: u32;
    let mut _15: &[u32; 32];
    let mut _16: u32;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    scope 1 {
        debug iter => _5;
        let _13: usize;
        scope 2 {
            debug n => _13;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _3 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        StorageDead(_4);
        FakeRead(ForMatchedPlace(None), _3);
        StorageLive(_5);
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        falseUnwind -> [real: bb3, unwind: bb12];
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &'_ mut _5;
        _9 = &'_ mut (*_10);
        _8 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _9) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        StorageDead(_9);
        FakeRead(ForMatchedPlace(None), _8);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb5, 1: bb6, otherwise: bb7];
    }

    bb5: {
        falseEdge -> [real: bb8, imaginary: bb6];
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_8 as Some).0: usize);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &'_ (*_2);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _13;
        _18 = Len((*_2));
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb9, unwind: bb12];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _0 = const ();
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }

    bb9: {
        _16 = (*_2)[_17];
        _14 = combine::gf2_matrix_times(move _15, move _16) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_20);
        _20 = _13;
        _21 = Len((*_1));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb11, unwind: bb12];
    }

    bb11: {
        (*_1)[_20] = move _14;
        StorageDead(_14);
        StorageDead(_20);
        StorageDead(_17);
        _7 = const ();
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        _6 = const ();
        goto -> bb2;
    }

    bb12 (cleanup): {
        resume;
    }
}
