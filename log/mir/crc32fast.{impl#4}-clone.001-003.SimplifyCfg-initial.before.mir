// MIR for `<impl at src/lib.rs:46:10: 46:15>::clone` before SimplifyCfg-initial

fn <impl at src/lib.rs:46:10: 46:15>::clone(_1: &State) -> State {
    debug self => _1;
    let mut _0: State;
    let mut _2: isize;
    let _3: &baseline::State;
    let mut _4: baseline::State;
    let mut _5: &baseline::State;
    let _6: &specialized::pclmulqdq::State;
    let mut _7: specialized::pclmulqdq::State;
    let mut _8: &specialized::pclmulqdq::State;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _6;
    }

    bb0: {
        FakeRead(ForMatchedPlace(None), _1);
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb3];
    }

    bb1: {
        falseEdge -> [real: bb4, imaginary: bb2];
    }

    bb2: {
        StorageLive(_6);
        _6 = &'_ (((*_1) as Specialized).0: specialized::pclmulqdq::State);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &'_ (*_6);
        _7 = <specialized::pclmulqdq::State as std::clone::Clone>::clone(move _8) -> [return: bb6, unwind: bb8];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_3);
        _3 = &'_ (((*_1) as Baseline).0: baseline::State);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &'_ (*_3);
        _4 = <baseline::State as std::clone::Clone>::clone(move _5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        StorageDead(_5);
        _0 = State::Baseline(move _4);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_8);
        _0 = State::Specialized(move _7);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }
}
