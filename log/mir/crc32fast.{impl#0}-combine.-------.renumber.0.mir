// MIR for `<impl at src/lib.rs:61:1: 61:12>::combine` 0 renumber

fn <impl at src/lib.rs:61:1: 61:12>::combine(_1: &'?9 mut Hasher, _2: &'?10 Hasher) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let mut _3: u64;
    let mut _4: (u64, bool);
    let _5: u32;
    let mut _6: Hasher;
    let mut _7: &'?11 Hasher;
    let mut _8: isize;
    let mut _10: &'?13 mut baseline::State;
    let mut _11: u32;
    let mut _12: u64;
    let mut _14: &'?15 mut specialized::pclmulqdq::State;
    let mut _15: u32;
    let mut _16: u64;
    scope 1 {
        debug other_crc => _5;
        let _9: &'?12 mut baseline::State;
        let _13: &'?14 mut specialized::pclmulqdq::State;
        scope 2 {
            debug state => _9;
        }
        scope 3 {
            debug state => _13;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = ((*_2).0: u64);
        _4 = CheckedAdd(((*_1).0: u64), _3);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: u64), move _3) -> [success: bb1, unwind: bb11];
    }

    bb1: {
        ((*_1).0: u64) = move (_4.0: u64);
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &'?4 (*_2);
        _6 = <Hasher as std::clone::Clone>::clone(move _7) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_7);
        _5 = Hasher::finalize(move _6) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        StorageDead(_6);
        FakeRead(ForLet(None), _5);
        FakeRead(ForMatchedPlace(None), ((*_1).1: State));
        _8 = discriminant(((*_1).1: State));
        switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb6];
    }

    bb4: {
        falseEdge -> [real: bb7, imaginary: bb5];
    }

    bb5: {
        StorageLive(_13);
        _13 = &'?5 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State);
        StorageLive(_14);
        _14 = &'?6 mut (*_13);
        StorageLive(_15);
        _15 = _5;
        StorageLive(_16);
        _16 = ((*_2).0: u64);
        _0 = specialized::pclmulqdq::State::combine(move _14, move _15, move _16) -> [return: bb9, unwind: bb11];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_9);
        _9 = &'?7 mut ((((*_1).1: State) as Baseline).0: baseline::State);
        StorageLive(_10);
        _10 = &'?8 mut (*_9);
        StorageLive(_11);
        _11 = _5;
        StorageLive(_12);
        _12 = ((*_2).0: u64);
        _0 = baseline::State::combine(move _10, move _11, move _12) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_5);
        return;
    }

    bb11 (cleanup): {
        resume;
    }
}
