// MIR for `<impl at src/lib.rs:61:1: 61:12>::reset` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0], '?1}
| '?2 | U0 | {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0], '?2}
| '?3 | U0 | {bb2[1..=4]}
| '?4 | U0 | {bb2[3..=4]}
| '?5 | U0 | {bb4[1..=4]}
| '?6 | U0 | {bb4[3..=4]}
| '?7 | U0 | {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0], '?1}
| '?8 | U0 | {bb4[2..=4]}
| '?9 | U0 | {bb4[4]}
| '?10 | U0 | {bb2[2..=4]}
| '?11 | U0 | {bb2[4]}
| '?12 | U0 | {bb2[4]}
| '?13 | U0 | {bb4[4]}
|
| Inference Constraints
| '?0 live at {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0]}
| '?1 live at {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0]}
| '?2 live at {bb0[0..=3], bb1[0], bb2[0..=4], bb3[0], bb4[0..=4], bb5[0..=2], bb6[0..=2], bb7[0], bb8[0]}
| '?3 live at {bb2[1]}
| '?4 live at {bb2[3]}
| '?5 live at {bb4[1]}
| '?6 live at {bb4[3]}
| '?8 live at {bb4[2..=3]}
| '?9 live at {bb4[4]}
| '?10 live at {bb2[2..=3]}
| '?11 live at {bb2[4]}
| '?12 live at {bb2[4]}
| '?13 live at {bb4[4]}
| '?1: '?7 due to BoringNoLocation at All(src/lib.rs:119:18: 119:27) (src/lib.rs:119:18: 119:27 (#0)
| '?3: '?10 due to Assignment at Single(bb2[1]) (src/lib.rs:123:32: 123:45 (#0)
| '?4: '?11 due to Boring at Single(bb2[3]) (src/lib.rs:123:50: 123:55 (#0)
| '?5: '?8 due to Assignment at Single(bb4[1]) (src/lib.rs:122:29: 122:42 (#0)
| '?6: '?9 due to Boring at Single(bb4[3]) (src/lib.rs:122:47: 122:52 (#0)
| '?7: '?1 due to BoringNoLocation at All(src/lib.rs:119:18: 119:27) (src/lib.rs:119:18: 119:27 (#0)
| '?7: '?3 due to Boring at Single(bb2[1]) (src/lib.rs:123:32: 123:45 (#0)
| '?7: '?5 due to Boring at Single(bb4[1]) (src/lib.rs:122:29: 122:42 (#0)
| '?8: '?6 due to Boring at Single(bb4[3]) (src/lib.rs:122:47: 122:52 (#0)
| '?9: '?13 due to CallArgument(Some(FnDef(DefId(0:13 ~ crc32fast[c0c6]::baseline::{impl#0}::reset), []))) at Single(bb4[4]) (src/lib.rs:122:47: 122:60 (#0)
| '?10: '?4 due to Boring at Single(bb2[3]) (src/lib.rs:123:50: 123:55 (#0)
| '?11: '?12 due to CallArgument(Some(FnDef(DefId(0:62 ~ crc32fast[c0c6]::specialized::pclmulqdq::{impl#0}::reset), []))) at Single(bb2[4]) (src/lib.rs:123:50: 123:63 (#0)
|
fn <impl at src/lib.rs:61:1: 61:12>::reset(_1: &'?7 mut Hasher) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &'?8 mut baseline::State;
    let mut _4: &'?9 mut baseline::State;
    let _5: &'?10 mut specialized::pclmulqdq::State;
    let mut _6: &'?11 mut specialized::pclmulqdq::State;
    scope 1 {
        debug state => _3;
    }
    scope 2 {
        debug state => _5;
    }

    bb0: {
        ((*_1).0: u64) = const 0_u64;
        FakeRead(ForMatchedPlace(None), ((*_1).1: State));
        _2 = discriminant(((*_1).1: State));
        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb3];
    }

    bb1: {
        falseEdge -> [real: bb4, imaginary: bb2];
    }

    bb2: {
        StorageLive(_5);
        _5 = &'?3 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State);
        StorageLive(_6);
        _6 = &'?4 mut (*_5);
        _0 = specialized::pclmulqdq::State::reset(move _6) -> [return: bb6, unwind: bb8];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_3);
        _3 = &'?5 mut ((((*_1).1: State) as Baseline).0: baseline::State);
        StorageLive(_4);
        _4 = &'?6 mut (*_3);
        _0 = baseline::State::reset(move _4) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }
}
