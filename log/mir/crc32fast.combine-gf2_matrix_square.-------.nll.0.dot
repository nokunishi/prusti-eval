digraph Mir_0_23 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn combine::gf2_matrix_square(_1: &amp;'?7 mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }], _2: &amp;'?8 [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }]) -&gt; ()<br align="left"/>let mut _3: Adt(std::ops::Range, [usize]);<br align="left"/>let mut _4: Adt(std::ops::Range, [usize]);<br align="left"/>let mut _5: Adt(std::ops::Range, [usize]);<br align="left"/>let mut _6: ();<br align="left"/>let _7: ();<br align="left"/>let mut _8: Adt(std::option::Option, [usize]);<br align="left"/>let mut _9: &amp;'?9 mut Adt(std::ops::Range, [usize]);<br align="left"/>let mut _10: &amp;'?10 mut Adt(std::ops::Range, [usize]);<br align="left"/>let mut _11: isize;<br align="left"/>let mut _12: !;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: u32;<br align="left"/>let mut _15: &amp;'?11 [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _16: u32;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>debug square =&gt; _1;<br align="left"/>debug mat =&gt; _2;<br align="left"/>debug iter =&gt; _5;<br align="left"/>debug n =&gt; _13;<br align="left"/>>;
    bb0__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const _ }<br/></td></tr><tr><td align="left">_3 = &lt;std::ops::Range&lt;usize&gt; as std::iter::IntoIterator&gt;::into_iter(move _4)</td></tr></table>>];
    bb1__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>FakeRead(ForMatchedPlace(None), _3)<br/>StorageLive(_5)<br/>_5 = move _3<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">falseUnwind</td></tr></table>>];
    bb3__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;'?4 mut _5<br/>_9 = &amp;'?5 mut (*_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::ops::Range&lt;usize&gt; as std::iter::Iterator&gt;::next(move _9)</td></tr></table>>];
    bb4__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>FakeRead(ForMatchedPlace(None), _8)<br/>_11 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb5__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">falseEdge</td></tr></table>>];
    bb6__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_8 as Some).0: usize)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;'?6 (*_2)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _13<br/>_18 = Len((*_2))<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb7__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_0 = const ()<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_16 = (*_2)[_17]<br/></td></tr><tr><td align="left">_14 = combine::gf2_matrix_times(move _15, move _16)</td></tr></table>>];
    bb10__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_20)<br/>_20 = _13<br/>_21 = Len((*_1))<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb11__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">(*_1)[_20] = move _14<br/>StorageDead(_14)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>_7 = const ()<br/>StorageDead(_13)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>_6 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_23 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_23 -> bb1__0_23 [label="return"];
    bb0__0_23 -> bb12__0_23 [label="unwind"];
    bb1__0_23 -> bb2__0_23 [label=""];
    bb2__0_23 -> bb3__0_23 [label="real"];
    bb2__0_23 -> bb12__0_23 [label="unwind"];
    bb3__0_23 -> bb4__0_23 [label="return"];
    bb3__0_23 -> bb12__0_23 [label="unwind"];
    bb4__0_23 -> bb5__0_23 [label="0"];
    bb4__0_23 -> bb6__0_23 [label="1"];
    bb4__0_23 -> bb7__0_23 [label="otherwise"];
    bb5__0_23 -> bb8__0_23 [label="real"];
    bb5__0_23 -> bb6__0_23 [label="imaginary"];
    bb6__0_23 -> bb9__0_23 [label="success"];
    bb6__0_23 -> bb12__0_23 [label="unwind"];
    bb9__0_23 -> bb10__0_23 [label="return"];
    bb9__0_23 -> bb12__0_23 [label="unwind"];
    bb10__0_23 -> bb11__0_23 [label="success"];
    bb10__0_23 -> bb12__0_23 [label="unwind"];
    bb11__0_23 -> bb2__0_23 [label=""];
}
