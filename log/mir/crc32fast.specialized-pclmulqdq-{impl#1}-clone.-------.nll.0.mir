// MIR for `specialized::pclmulqdq::<impl at src/specialized/pclmulqdq.rs:6:10: 6:15>::clone` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], '?1}
| '?2 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], '?2}
| '?3 | U0 | {bb0[3..=5]}
| '?4 | U0 | {bb0[4..=5]}
| '?5 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], '?1}
| '?6 | U0 | {bb0[5]}
| '?7 | U0 | {bb0[4..=5]}
| '?8 | U0 | {bb0[5]}
|
| Inference Constraints
| '?0 live at {bb0[0..=5], bb1[0..=4], bb2[0]}
| '?1 live at {bb0[0..=5], bb1[0..=4], bb2[0]}
| '?2 live at {bb0[0..=5], bb1[0..=4], bb2[0]}
| '?3 live at {bb0[3]}
| '?4 live at {bb0[4]}
| '?6 live at {bb0[5]}
| '?7 live at {bb0[4]}
| '?8 live at {bb0[5]}
| '?1: '?5 due to BoringNoLocation at All(src/specialized/pclmulqdq.rs:6:10: 6:15) (src/specialized/pclmulqdq.rs:6:10: 6:15 (#8)
| '?3: '?7 due to Boring at Single(bb0[3]) (src/specialized/pclmulqdq.rs:8:5: 8:15 (#8)
| '?4: '?6 due to Boring at Single(bb0[4]) (src/specialized/pclmulqdq.rs:8:5: 8:15 (#8)
| '?5: '?1 due to BoringNoLocation at All(src/specialized/pclmulqdq.rs:6:10: 6:15) (src/specialized/pclmulqdq.rs:6:10: 6:15 (#8)
| '?5: '?3 due to Boring at Single(bb0[3]) (src/specialized/pclmulqdq.rs:8:5: 8:15 (#8)
| '?6: '?8 due to CallArgument(Some(FnDef(DefId(2:2280 ~ core[5e8a]::clone::Clone::clone), [u32]))) at Single(bb0[5]) (src/specialized/pclmulqdq.rs:8:5: 8:15 (#8)
| '?7: '?4 due to Boring at Single(bb0[4]) (src/specialized/pclmulqdq.rs:8:5: 8:15 (#8)
|
fn specialized::pclmulqdq::<impl at src/specialized/pclmulqdq.rs:6:10: 6:15>::clone(_1: &'?5 specialized::pclmulqdq::State) -> specialized::pclmulqdq::State {
    debug self => _1;
    let mut _0: specialized::pclmulqdq::State;
    let mut _2: u32;
    let mut _3: &'?6 u32;
    let _4: &'?7 u32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &'?3 ((*_1).0: u32);
        _3 = &'?4 (*_4);
        _2 = <u32 as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_3);
        _0 = specialized::pclmulqdq::State { state: move _2 };
        StorageDead(_2);
        StorageDead(_4);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}
