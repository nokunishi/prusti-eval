// MIR for `combine::combine` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?1]
| '?1 | Local | ['?1]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=12], bb1[0..=4], bb2[0], bb3[0..=8], bb4[0..=7], bb5[0..=4], bb6[0], bb7[0..=6], bb8[0..=3], bb9[0], bb10[0..=8], bb11[0..=16], bb12[0..=5], bb13[0..=7], bb14[0..=14], bb15[0..=6], bb16[0], bb17[0..=9], bb18[0..=13], bb19[0..=8], bb20[0..=6], bb21[0..=2], bb22[0..=4], bb23[0..=6], bb24[0..=4], bb25[0..=13], bb26[0..=13], bb27[0..=8], bb28[0..=6], bb29[0..=2], bb30[0..=4], bb31[0..=5], bb32[0..=3], bb33[0..=3], bb34[0..=6], bb35[0..=3], bb36[0], '?0, '?1}
| '?1 | U0 | {bb0[0..=12], bb1[0..=4], bb2[0], bb3[0..=8], bb4[0..=7], bb5[0..=4], bb6[0], bb7[0..=6], bb8[0..=3], bb9[0], bb10[0..=8], bb11[0..=16], bb12[0..=5], bb13[0..=7], bb14[0..=14], bb15[0..=6], bb16[0], bb17[0..=9], bb18[0..=13], bb19[0..=8], bb20[0..=6], bb21[0..=2], bb22[0..=4], bb23[0..=6], bb24[0..=4], bb25[0..=13], bb26[0..=13], bb27[0..=8], bb28[0..=6], bb29[0..=2], bb30[0..=4], bb31[0..=5], bb32[0..=3], bb33[0..=3], bb34[0..=6], bb35[0..=3], bb36[0], '?1}
| '?2 | U0 | {bb7[4..=6]}
| '?3 | U0 | {bb7[5..=6]}
| '?4 | U0 | {bb11[10..=16]}
| '?5 | U0 | {bb11[11..=16]}
| '?6 | U0 | {bb11[14..=16]}
| '?7 | U0 | {bb11[15..=16]}
| '?8 | U0 | {bb14[8..=14]}
| '?9 | U0 | {bb14[9..=14]}
| '?10 | U0 | {bb14[12..=14]}
| '?11 | U0 | {bb14[13..=14]}
| '?12 | U0 | {bb17[3..=9]}
| '?13 | U0 | {bb17[4..=9]}
| '?14 | U0 | {bb17[7..=9]}
| '?15 | U0 | {bb17[8..=9]}
| '?16 | U0 | {bb19[4..=8]}
| '?17 | U0 | {bb19[5..=8]}
| '?18 | U0 | {bb25[7..=13]}
| '?19 | U0 | {bb25[8..=13]}
| '?20 | U0 | {bb25[11..=13]}
| '?21 | U0 | {bb25[12..=13]}
| '?22 | U0 | {bb27[4..=8]}
| '?23 | U0 | {bb27[5..=8]}
| '?24 | U0 | {bb7[6]}
| '?25 | U0 | {bb7[5..=6]}
| '?26 | U0 | {bb11[12..=16]}
| '?27 | U0 | {bb11[11..=16]}
| '?28 | U0 | {bb11[16]}
| '?29 | U0 | {bb11[15..=16]}
| '?30 | U0 | {bb14[10..=14]}
| '?31 | U0 | {bb14[9..=14]}
| '?32 | U0 | {bb14[14]}
| '?33 | U0 | {bb14[13..=14]}
| '?34 | U0 | {bb17[5..=9]}
| '?35 | U0 | {bb17[4..=9]}
| '?36 | U0 | {bb17[9]}
| '?37 | U0 | {bb17[8..=9]}
| '?38 | U0 | {bb19[6..=8]}
| '?39 | U0 | {bb19[5..=8]}
| '?40 | U0 | {bb25[9..=13]}
| '?41 | U0 | {bb25[8..=13]}
| '?42 | U0 | {bb25[13]}
| '?43 | U0 | {bb25[12..=13]}
| '?44 | U0 | {bb27[6..=8]}
| '?45 | U0 | {bb27[5..=8]}
| '?46 | U0 | {bb7[6]}
| '?47 | U0 | {bb11[16]}
| '?48 | U0 | {bb11[16]}
| '?49 | U0 | {bb14[14]}
| '?50 | U0 | {bb14[14]}
| '?51 | U0 | {bb17[9]}
| '?52 | U0 | {bb17[9]}
| '?53 | U0 | {bb19[8]}
| '?54 | U0 | {bb25[13]}
| '?55 | U0 | {bb25[13]}
| '?56 | U0 | {bb27[8]}
|
| Inference Constraints
| '?0 live at {bb0[0..=12], bb1[0..=4], bb2[0], bb3[0..=8], bb4[0..=7], bb5[0..=4], bb6[0], bb7[0..=6], bb8[0..=3], bb9[0], bb10[0..=8], bb11[0..=16], bb12[0..=5], bb13[0..=7], bb14[0..=14], bb15[0..=6], bb16[0], bb17[0..=9], bb18[0..=13], bb19[0..=8], bb20[0..=6], bb21[0..=2], bb22[0..=4], bb23[0..=6], bb24[0..=4], bb25[0..=13], bb26[0..=13], bb27[0..=8], bb28[0..=6], bb29[0..=2], bb30[0..=4], bb31[0..=5], bb32[0..=3], bb33[0..=3], bb34[0..=6], bb35[0..=3], bb36[0]}
| '?1 live at {bb0[0..=12], bb1[0..=4], bb2[0], bb3[0..=8], bb4[0..=7], bb5[0..=4], bb6[0], bb7[0..=6], bb8[0..=3], bb9[0], bb10[0..=8], bb11[0..=16], bb12[0..=5], bb13[0..=7], bb14[0..=14], bb15[0..=6], bb16[0], bb17[0..=9], bb18[0..=13], bb19[0..=8], bb20[0..=6], bb21[0..=2], bb22[0..=4], bb23[0..=6], bb24[0..=4], bb25[0..=13], bb26[0..=13], bb27[0..=8], bb28[0..=6], bb29[0..=2], bb30[0..=4], bb31[0..=5], bb32[0..=3], bb33[0..=3], bb34[0..=6], bb35[0..=3], bb36[0]}
| '?2 live at {bb7[4]}
| '?3 live at {bb7[5]}
| '?4 live at {bb11[10]}
| '?5 live at {bb11[11]}
| '?6 live at {bb11[14]}
| '?7 live at {bb11[15]}
| '?8 live at {bb14[8]}
| '?9 live at {bb14[9]}
| '?10 live at {bb14[12]}
| '?11 live at {bb14[13]}
| '?12 live at {bb17[3]}
| '?13 live at {bb17[4]}
| '?14 live at {bb17[7]}
| '?15 live at {bb17[8]}
| '?16 live at {bb19[4]}
| '?17 live at {bb19[5]}
| '?18 live at {bb25[7]}
| '?19 live at {bb25[8]}
| '?20 live at {bb25[11]}
| '?21 live at {bb25[12]}
| '?22 live at {bb27[4]}
| '?23 live at {bb27[5]}
| '?24 live at {bb7[6]}
| '?25 live at {bb7[5]}
| '?26 live at {bb11[12..=16]}
| '?27 live at {bb11[11]}
| '?28 live at {bb11[16]}
| '?29 live at {bb11[15]}
| '?30 live at {bb14[10..=14]}
| '?31 live at {bb14[9]}
| '?32 live at {bb14[14]}
| '?33 live at {bb14[13]}
| '?34 live at {bb17[5..=9]}
| '?35 live at {bb17[4]}
| '?36 live at {bb17[9]}
| '?37 live at {bb17[8]}
| '?38 live at {bb19[6..=8]}
| '?39 live at {bb19[5]}
| '?40 live at {bb25[9..=13]}
| '?41 live at {bb25[8]}
| '?42 live at {bb25[13]}
| '?43 live at {bb25[12]}
| '?44 live at {bb27[6..=8]}
| '?45 live at {bb27[5]}
| '?46 live at {bb7[6]}
| '?47 live at {bb11[16]}
| '?48 live at {bb11[16]}
| '?49 live at {bb14[14]}
| '?50 live at {bb14[14]}
| '?51 live at {bb17[9]}
| '?52 live at {bb17[9]}
| '?53 live at {bb19[8]}
| '?54 live at {bb25[13]}
| '?55 live at {bb25[13]}
| '?56 live at {bb27[8]}
| '?2: '?25 due to Boring at Single(bb7[4]) (src/combine.rs:35:14: 35:24 (#69)
| '?3: '?24 due to Boring at Single(bb7[5]) (src/combine.rs:35:14: 35:24 (#69)
| '?4: '?27 due to Boring at Single(bb11[10]) (src/combine.rs:41:23: 41:32 (#0)
| '?5: '?26 due to Boring at Single(bb11[11]) (src/combine.rs:41:23: 41:32 (#0)
| '?6: '?29 due to Boring at Single(bb11[14]) (src/combine.rs:41:34: 41:38 (#0)
| '?7: '?28 due to Boring at Single(bb11[15]) (src/combine.rs:41:34: 41:38 (#0)
| '?8: '?31 due to Boring at Single(bb14[8]) (src/combine.rs:44:23: 44:31 (#0)
| '?9: '?30 due to Boring at Single(bb14[9]) (src/combine.rs:44:23: 44:31 (#0)
| '?10: '?33 due to Boring at Single(bb14[12]) (src/combine.rs:44:33: 44:38 (#0)
| '?11: '?32 due to Boring at Single(bb14[13]) (src/combine.rs:44:33: 44:38 (#0)
| '?12: '?35 due to Boring at Single(bb17[3]) (src/combine.rs:50:27: 50:36 (#0)
| '?13: '?34 due to Boring at Single(bb17[4]) (src/combine.rs:50:27: 50:36 (#0)
| '?14: '?37 due to Boring at Single(bb17[7]) (src/combine.rs:50:38: 50:42 (#0)
| '?15: '?36 due to Boring at Single(bb17[8]) (src/combine.rs:50:38: 50:42 (#0)
| '?16: '?39 due to Boring at Single(bb19[4]) (src/combine.rs:52:37: 52:42 (#0)
| '?17: '?38 due to Boring at Single(bb19[5]) (src/combine.rs:52:37: 52:42 (#0)
| '?18: '?41 due to Boring at Single(bb25[7]) (src/combine.rs:62:27: 62:35 (#0)
| '?19: '?40 due to Boring at Single(bb25[8]) (src/combine.rs:62:27: 62:35 (#0)
| '?20: '?43 due to Boring at Single(bb25[11]) (src/combine.rs:62:37: 62:42 (#0)
| '?21: '?42 due to Boring at Single(bb25[12]) (src/combine.rs:62:37: 62:42 (#0)
| '?22: '?45 due to Boring at Single(bb27[4]) (src/combine.rs:64:37: 64:41 (#0)
| '?23: '?44 due to Boring at Single(bb27[5]) (src/combine.rs:64:37: 64:41 (#0)
| '?24: '?46 due to CallArgument(Some(FnDef(DefId(2:7549 ~ core[5e8a]::iter::traits::iterator::Iterator::next), [Adt(std::ops::Range, [usize])]))) at Single(bb7[6]) (src/combine.rs:35:14: 35:24 (#69)
| '?25: '?3 due to Boring at Single(bb7[5]) (src/combine.rs:35:14: 35:24 (#69)
| '?26: '?47 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb11[16]) (src/combine.rs:41:5: 41:39 (#0)
| '?27: '?5 due to Boring at Single(bb11[11]) (src/combine.rs:41:23: 41:32 (#0)
| '?28: '?48 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb11[16]) (src/combine.rs:41:5: 41:39 (#0)
| '?29: '?7 due to Boring at Single(bb11[15]) (src/combine.rs:41:34: 41:38 (#0)
| '?30: '?49 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb14[14]) (src/combine.rs:44:5: 44:39 (#0)
| '?31: '?9 due to Boring at Single(bb14[9]) (src/combine.rs:44:23: 44:31 (#0)
| '?32: '?50 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb14[14]) (src/combine.rs:44:5: 44:39 (#0)
| '?33: '?11 due to Boring at Single(bb14[13]) (src/combine.rs:44:33: 44:38 (#0)
| '?34: '?51 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb17[9]) (src/combine.rs:50:9: 50:43 (#0)
| '?35: '?13 due to Boring at Single(bb17[4]) (src/combine.rs:50:27: 50:36 (#0)
| '?36: '?52 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb17[9]) (src/combine.rs:50:9: 50:43 (#0)
| '?37: '?15 due to Boring at Single(bb17[8]) (src/combine.rs:50:38: 50:42 (#0)
| '?38: '?53 due to CallArgument(Some(FnDef(DefId(0:21 ~ crc32fast[c0c6]::combine::gf2_matrix_times), []))) at Single(bb19[8]) (src/combine.rs:52:20: 52:49 (#0)
| '?39: '?17 due to Boring at Single(bb19[5]) (src/combine.rs:52:37: 52:42 (#0)
| '?40: '?54 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb25[13]) (src/combine.rs:62:9: 62:43 (#0)
| '?41: '?19 due to Boring at Single(bb25[8]) (src/combine.rs:62:27: 62:35 (#0)
| '?42: '?55 due to CallArgument(Some(FnDef(DefId(0:23 ~ crc32fast[c0c6]::combine::gf2_matrix_square), []))) at Single(bb25[13]) (src/combine.rs:62:9: 62:43 (#0)
| '?43: '?21 due to Boring at Single(bb25[12]) (src/combine.rs:62:37: 62:42 (#0)
| '?44: '?56 due to CallArgument(Some(FnDef(DefId(0:21 ~ crc32fast[c0c6]::combine::gf2_matrix_times), []))) at Single(bb27[8]) (src/combine.rs:64:20: 64:48 (#0)
| '?45: '?23 due to Boring at Single(bb27[5]) (src/combine.rs:64:37: 64:41 (#0)
|
| User Type Annotations
| 0: user_ty: Canonical { value: Ty(u32), max_universe: U0, variables: [] }, span: src/combine.rs:23:18: 23:21, inferred_ty: u32
| 1: user_ty: Canonical { value: Ty(u32), max_universe: U0, variables: [] }, span: src/combine.rs:23:18: 23:21, inferred_ty: u32
|
fn combine::combine(_1: u32, _2: u32, _3: u64) -> u32 {
    debug crc1 => _1;
    debug crc2 => _2;
    debug len2 => _3;
    let mut _0: u32;
    let mut _4: !;
    let mut _5: u32 as UserTypeProjection { base: UserType(0), projs: [] };
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: !;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: ();
    let mut _16: std::ops::Range<usize>;
    let mut _17: std::ops::Range<usize>;
    let mut _19: ();
    let _20: ();
    let mut _21: std::option::Option<usize>;
    let mut _22: &'?24 mut std::ops::Range<usize>;
    let mut _23: &'?25 mut std::ops::Range<usize>;
    let mut _24: isize;
    let mut _25: !;
    let mut _27: u32;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: u32;
    let mut _32: bool;
    let _33: ();
    let mut _34: &'?26 mut [u32; 32];
    let mut _35: &'?27 mut [u32; 32];
    let mut _36: &'?28 [u32; 32];
    let _37: &'?29 [u32; 32];
    let _38: ();
    let mut _39: &'?30 mut [u32; 32];
    let mut _40: &'?31 mut [u32; 32];
    let mut _41: &'?32 [u32; 32];
    let _42: &'?33 [u32; 32];
    let _43: ();
    let _44: ();
    let mut _45: &'?34 mut [u32; 32];
    let mut _46: &'?35 mut [u32; 32];
    let mut _47: &'?36 [u32; 32];
    let _48: &'?37 [u32; 32];
    let _49: ();
    let mut _50: bool;
    let mut _51: u64;
    let mut _52: u64;
    let mut _53: u32;
    let mut _54: &'?38 [u32; 32];
    let _55: &'?39 [u32; 32];
    let mut _56: u32;
    let mut _57: u32;
    let mut _58: bool;
    let _59: ();
    let mut _60: bool;
    let mut _61: u64;
    let mut _62: !;
    let _63: ();
    let mut _64: &'?40 mut [u32; 32];
    let mut _65: &'?41 mut [u32; 32];
    let mut _66: &'?42 [u32; 32];
    let _67: &'?43 [u32; 32];
    let _68: ();
    let mut _69: bool;
    let mut _70: u64;
    let mut _71: u64;
    let mut _72: u32;
    let mut _73: &'?44 [u32; 32];
    let _74: &'?45 [u32; 32];
    let mut _75: u32;
    let mut _76: u32;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: u64;
    let mut _80: !;
    let mut _81: u32;
    scope 1 {
        debug row => _5;
        let mut _6: [u32; 32];
        scope 2 {
            debug even => _6;
            let mut _7: [u32; 32];
            scope 3 {
                debug odd => _7;
                let mut _18: std::ops::Range<usize>;
                scope 4 {
                    debug iter => _18;
                    let _26: usize;
                    scope 5 {
                        debug n => _26;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = [const 0_u32; 32];
        FakeRead(ForLet(None), _6);
        StorageLive(_7);
        _7 = [const 0_u32; 32];
        FakeRead(ForLet(None), _7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _9 = Le(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        _0 = _1;
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb35;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageDead(_10);
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        _12 = const 0_usize;
        _13 = Len(_7);
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb4, unwind: bb36];
    }

    bb4: {
        _7[_12] = const 3988292384_u32;
        StorageDead(_12);
        _5 = const 1_u32;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = std::ops::Range::<usize> { start: const 1_usize, end: const _ };
        _16 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _17) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        StorageDead(_17);
        FakeRead(ForMatchedPlace(None), _16);
        StorageLive(_18);
        _18 = move _16;
        goto -> bb6;
    }

    bb6: {
        falseUnwind -> [real: bb7, unwind: bb36];
    }

    bb7: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &'?2 mut _18;
        _22 = &'?3 mut (*_23);
        _21 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _22) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_22);
        FakeRead(ForMatchedPlace(None), _21);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb9, 1: bb10, otherwise: bb2];
    }

    bb9: {
        falseEdge -> [real: bb11, imaginary: bb10];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_21 as Some).0: usize);
        StorageLive(_27);
        _27 = _5;
        StorageLive(_28);
        _28 = _26;
        _29 = Len(_7);
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb12, unwind: bb36];
    }

    bb11: {
        _15 = const ();
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &'?4 mut _6;
        _34 = &'?5 mut (*_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &'?6 _7;
        _36 = &'?7 (*_37);
        _33 = combine::gf2_matrix_square(move _34, move _36) -> [return: bb14, unwind: bb36];
    }

    bb12: {
        _7[_28] = move _27;
        StorageDead(_27);
        StorageDead(_28);
        _31 = const 1_i32 as u32 (IntToInt);
        _32 = Lt(move _31, const 32_u32);
        assert(move _32, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb13, unwind: bb36];
    }

    bb13: {
        _5 = Shl(_5, const 1_i32);
        _20 = const ();
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        _19 = const ();
        goto -> bb6;
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &'?8 mut _7;
        _39 = &'?9 mut (*_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &'?10 _6;
        _41 = &'?11 (*_42);
        _38 = combine::gf2_matrix_square(move _39, move _41) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_43);
        goto -> bb16;
    }

    bb16: {
        falseUnwind -> [real: bb17, unwind: bb36];
    }

    bb17: {
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &'?12 mut _6;
        _45 = &'?13 mut (*_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &'?14 _7;
        _47 = &'?15 (*_48);
        _44 = combine::gf2_matrix_square(move _45, move _47) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _3;
        _51 = BitAnd(move _52, const 1_u64);
        StorageDead(_52);
        _50 = Eq(move _51, const 1_u64);
        switchInt(move _50) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &'?16 _6;
        _54 = &'?17 (*_55);
        StorageLive(_56);
        _56 = _1;
        _53 = combine::gf2_matrix_times(move _54, move _56) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        StorageDead(_56);
        StorageDead(_54);
        _1 = move _53;
        StorageDead(_53);
        StorageDead(_55);
        _49 = const ();
        goto -> bb22;
    }

    bb21: {
        StorageDead(_51);
        _49 = const ();
        goto -> bb22;
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_49);
        _57 = const 1_i32 as u32 (IntToInt);
        _58 = Lt(move _57, const 64_u32);
        assert(move _58, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb23, unwind: bb36];
    }

    bb23: {
        _3 = Shr(_3, const 1_i32);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _3;
        _60 = Eq(move _61, const 0_u64);
        switchInt(move _60) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_61);
        _43 = const ();
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb34;
    }

    bb25: {
        StorageDead(_61);
        _59 = const ();
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &'?18 mut _7;
        _64 = &'?19 mut (*_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &'?20 _6;
        _66 = &'?21 (*_67);
        _63 = combine::gf2_matrix_square(move _64, move _66) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _3;
        _70 = BitAnd(move _71, const 1_u64);
        StorageDead(_71);
        _69 = Eq(move _70, const 1_u64);
        switchInt(move _69) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &'?22 _7;
        _73 = &'?23 (*_74);
        StorageLive(_75);
        _75 = _1;
        _72 = combine::gf2_matrix_times(move _73, move _75) -> [return: bb28, unwind: bb36];
    }

    bb28: {
        StorageDead(_75);
        StorageDead(_73);
        _1 = move _72;
        StorageDead(_72);
        StorageDead(_74);
        _68 = const ();
        goto -> bb30;
    }

    bb29: {
        StorageDead(_70);
        _68 = const ();
        goto -> bb30;
    }

    bb30: {
        StorageDead(_69);
        StorageDead(_68);
        _76 = const 1_i32 as u32 (IntToInt);
        _77 = Lt(move _76, const 64_u32);
        assert(move _77, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb31, unwind: bb36];
    }

    bb31: {
        _3 = Shr(_3, const 1_i32);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _3;
        _78 = Eq(move _79, const 0_u64);
        switchInt(move _78) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        StorageDead(_79);
        _43 = const ();
        StorageDead(_78);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_79);
        _19 = const ();
        StorageDead(_78);
        goto -> bb16;
    }

    bb34: {
        StorageDead(_43);
        StorageLive(_81);
        _81 = _2;
        _1 = BitXor(_1, move _81);
        StorageDead(_81);
        _0 = _1;
        goto -> bb35;
    }

    bb35: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        return;
    }

    bb36 (cleanup): {
        resume;
    }
}
