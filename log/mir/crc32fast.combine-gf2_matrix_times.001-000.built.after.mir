// MIR for `combine::gf2_matrix_times` after built

fn combine::gf2_matrix_times(_1: &[u32; 32], _2: u32) -> u32 {
    debug mat => _1;
    debug vec => _2;
    let mut _0: u32;
    let mut _3: !;
    let mut _4: u32;
    let _6: ();
    let mut _7: ();
    let mut _8: bool;
    let mut _9: u32;
    let _10: ();
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: u32;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: bool;
    let mut _20: (usize, bool);
    let mut _21: !;
    let _22: ();
    let mut _23: !;
    scope 1 {
        debug sum => _4;
        let mut _5: usize;
        scope 2 {
            debug idx => _5;
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = const 0_u32;
        FakeRead(ForLet(None), _4);
        StorageLive(_5);
        _5 = const 0_usize;
        FakeRead(ForLet(None), _5);
        StorageLive(_6);
        goto -> bb1;
    }

    bb1: {
        falseUnwind -> [real: bb2, unwind: bb22];
    }

    bb2: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = Gt(move _9, const 0_u32);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        _12 = BitAnd(move _13, const 1_u32);
        StorageDead(_13);
        _11 = Eq(move _12, const 1_u32);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb4: {
        goto -> bb12;
    }

    bb5: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _5;
        _16 = Len((*_1));
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb7, unwind: bb22];
    }

    bb6: {
        goto -> bb8;
    }

    bb7: {
        _14 = (*_1)[_15];
        _4 = BitXor(_4, move _14);
        StorageDead(_14);
        StorageDead(_15);
        _10 = const ();
        goto -> bb9;
    }

    bb8: {
        StorageDead(_12);
        _10 = const ();
        goto -> bb9;
    }

    bb9: {
        StorageDead(_11);
        StorageDead(_10);
        _18 = const 1_i32 as u32 (IntToInt);
        _19 = Lt(move _18, const 32_u32);
        assert(move _19, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb10, unwind: bb22];
    }

    bb10: {
        _2 = Shr(_2, const 1_i32);
        _20 = CheckedAdd(_5, const 1_usize);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const 1_usize) -> [success: bb11, unwind: bb22];
    }

    bb11: {
        _5 = move (_20.0: usize);
        _7 = const ();
        goto -> bb16;
    }

    bb12: {
        StorageDead(_9);
        StorageLive(_22);
        _6 = const ();
        goto -> bb17;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageDead(_22);
        unreachable;
    }

    bb15: {
        goto -> bb16;
    }

    bb16: {
        StorageDead(_8);
        goto -> bb1;
    }

    bb17: {
        StorageDead(_22);
        StorageDead(_8);
        StorageDead(_6);
        _0 = _4;
        goto -> bb20;
    }

    bb18: {
        StorageDead(_5);
        StorageDead(_4);
        unreachable;
    }

    bb19: {
        goto -> bb21;
    }

    bb20: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        resume;
    }
}
