digraph Mir_0_18 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn baseline::update_slow(_1: u32, _2: &amp;'?9 [u8]) -&gt; u32<br align="left"/>let mut _3: u32;<br align="left"/>let mut _4: u32;<br align="left"/>let _5: ();<br align="left"/>let mut _6: Adt(std::slice::Iter, ['?10, u8]);<br align="left"/>let mut _7: Adt(std::slice::Iter, ['?11, u8]);<br align="left"/>let mut _8: &amp;'?12 [u8];<br align="left"/>let mut _9: Adt(std::slice::Iter, ['?13, u8]);<br align="left"/>let mut _10: ();<br align="left"/>let _11: ();<br align="left"/>let mut _12: Adt(std::option::Option, [&amp;'?14 u8]);<br align="left"/>let mut _13: &amp;'?15 mut Adt(std::slice::Iter, ['?16, u8]);<br align="left"/>let mut _14: &amp;'?17 mut Adt(std::slice::Iter, ['?18, u8]);<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: !;<br align="left"/>let _17: u8;<br align="left"/>let mut _18: u32;<br align="left"/>let mut _19: [[u32; Const { ty: usize, kind: Leaf(0x0000000000000100) }]; Const { ty: usize, kind: Leaf(0x0000000000000010) }];<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let _23: usize;<br align="left"/>let mut _24: u8;<br align="left"/>let mut _25: u8;<br align="left"/>let mut _26: u32;<br align="left"/>let mut _27: u8;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: u32;<br align="left"/>let mut _31: u32;<br align="left"/>let mut _32: u32;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: u32;<br align="left"/>debug prev =&gt; _1;<br align="left"/>debug buf =&gt; _2;<br align="left"/>debug crc =&gt; _3;<br align="left"/>debug iter =&gt; _9;<br align="left"/>debug byte =&gt; _17;<br align="left"/>>;
    bb0__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _1<br/>_3 = Not(move _4)<br/>StorageDead(_4)<br/>FakeRead(ForLet(None), _3)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;'?3 (*_2)<br/></td></tr><tr><td align="left">_7 = core::slice::&lt;impl [u8]&gt;::iter(move _8)</td></tr></table>>];
    bb1__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::Iter&lt;'?4, u8&gt; as std::iter::IntoIterator&gt;::into_iter(move _7)</td></tr></table>>];
    bb2__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>FakeRead(ForMatchedPlace(None), _6)<br/>StorageLive(_9)<br/>_9 = move _6<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">falseUnwind</td></tr></table>>];
    bb4__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;'?5 mut _9<br/>_13 = &amp;'?6 mut (*_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::slice::Iter&lt;'?7, u8&gt; as std::iter::Iterator&gt;::next(move _13)</td></tr></table>>];
    bb5__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>FakeRead(ForMatchedPlace(None), _12)<br/>_15 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb6__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">falseEdge</td></tr></table>>];
    bb7__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = (*((_12 as Some).0: &amp;'?8 u8))<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = const _<br/>StorageLive(_20)<br/>_20 = const 0_usize<br/>_21 = Len(_19)<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb8__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_5 = const ()<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_34)<br/>_34 = _3<br/>_0 = Not(move _34)<br/>StorageDead(_34)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _3<br/>_25 = move _26 as u8 (IntToInt)<br/>StorageDead(_26)<br/>StorageLive(_27)<br/>_27 = _17<br/>_24 = BitXor(move _25, move _27)<br/>StorageDead(_27)<br/>StorageDead(_25)<br/>_23 = move _24 as usize (IntToInt)<br/>StorageDead(_24)<br/>_28 = Len(_19[_20])<br/>_29 = Lt(_23, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _23)</td></tr></table>>];
    bb11__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_18 = _19[_20][_23]<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _3<br/>_32 = const 8_i32 as u32 (IntToInt)<br/>_33 = Lt(move _32, const 32_u32)<br/></td></tr><tr><td align="left">assert(move _33, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 8_i32)</td></tr></table>>];
    bb12__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_30 = Shr(move _31, const 8_i32)<br/>StorageDead(_31)<br/>_3 = BitXor(move _18, move _30)<br/>StorageDead(_30)<br/>StorageDead(_18)<br/>StorageDead(_23)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_11 = const ()<br/>StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_18 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_18 -> bb1__0_18 [label="return"];
    bb0__0_18 -> bb13__0_18 [label="unwind"];
    bb1__0_18 -> bb2__0_18 [label="return"];
    bb1__0_18 -> bb13__0_18 [label="unwind"];
    bb2__0_18 -> bb3__0_18 [label=""];
    bb3__0_18 -> bb4__0_18 [label="real"];
    bb3__0_18 -> bb13__0_18 [label="unwind"];
    bb4__0_18 -> bb5__0_18 [label="return"];
    bb4__0_18 -> bb13__0_18 [label="unwind"];
    bb5__0_18 -> bb6__0_18 [label="0"];
    bb5__0_18 -> bb7__0_18 [label="1"];
    bb5__0_18 -> bb8__0_18 [label="otherwise"];
    bb6__0_18 -> bb9__0_18 [label="real"];
    bb6__0_18 -> bb7__0_18 [label="imaginary"];
    bb7__0_18 -> bb10__0_18 [label="success"];
    bb7__0_18 -> bb13__0_18 [label="unwind"];
    bb10__0_18 -> bb11__0_18 [label="success"];
    bb10__0_18 -> bb13__0_18 [label="unwind"];
    bb11__0_18 -> bb12__0_18 [label="success"];
    bb11__0_18 -> bb13__0_18 [label="unwind"];
    bb12__0_18 -> bb3__0_18 [label=""];
}
