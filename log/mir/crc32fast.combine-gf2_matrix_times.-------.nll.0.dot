digraph Mir_0_21 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn combine::gf2_matrix_times(_1: &amp;'?3 [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }], _2: u32) -&gt; u32<br align="left"/>let mut _3: !;<br align="left"/>let mut _4: u32;<br align="left"/>let mut _5: usize;<br align="left"/>let _6: ();<br align="left"/>let mut _7: ();<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: u32;<br align="left"/>let _10: ();<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: u32;<br align="left"/>let mut _14: u32;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: u32;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: (usizebool));<br align="left"/>let mut _21: !;<br align="left"/>let _22: ();<br align="left"/>let mut _23: !;<br align="left"/>debug mat =&gt; _1;<br align="left"/>debug vec =&gt; _2;<br align="left"/>debug sum =&gt; _4;<br align="left"/>debug idx =&gt; _5;<br align="left"/>>;
    bb0__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = const 0_u32<br/>FakeRead(ForLet(None), _4)<br/>StorageLive(_5)<br/>_5 = const 0_usize<br/>FakeRead(ForLet(None), _5)<br/>StorageLive(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb1__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">falseUnwind</td></tr></table>>];
    bb2__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/>_8 = Gt(move _9, const 0_u32)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _2<br/>_12 = BitAnd(move _13, const 1_u32)<br/>StorageDead(_13)<br/>_11 = Eq(move _12, const 1_u32)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _5<br/>_16 = Len((*_1))<br/>_17 = Lt(_15, _16)<br/></td></tr><tr><td align="left">assert(move _17, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _16, _15)</td></tr></table>>];
    bb5__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_14 = (*_1)[_15]<br/>_4 = BitXor(_4, move _14)<br/>StorageDead(_14)<br/>StorageDead(_15)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>_18 = const 1_i32 as u32 (IntToInt)<br/>_19 = Lt(move _18, const 32_u32)<br/></td></tr><tr><td align="left">assert(move _19, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 1_i32)</td></tr></table>>];
    bb8__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_2 = Shr(_2, const 1_i32)<br/>_20 = CheckedAdd(_5, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_20.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _5, const 1_usize)</td></tr></table>>];
    bb9__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_5 = move (_20.0: usize)<br/>_7 = const ()<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_22)<br/>_6 = const ()<br/>StorageDead(_22)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>_0 = _4<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb11__0_21 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_21 -> bb1__0_21 [label=""];
    bb1__0_21 -> bb2__0_21 [label="real"];
    bb1__0_21 -> bb11__0_21 [label="unwind"];
    bb2__0_21 -> bb10__0_21 [label="0"];
    bb2__0_21 -> bb3__0_21 [label="otherwise"];
    bb3__0_21 -> bb6__0_21 [label="0"];
    bb3__0_21 -> bb4__0_21 [label="otherwise"];
    bb4__0_21 -> bb5__0_21 [label="success"];
    bb4__0_21 -> bb11__0_21 [label="unwind"];
    bb5__0_21 -> bb7__0_21 [label=""];
    bb6__0_21 -> bb7__0_21 [label=""];
    bb7__0_21 -> bb8__0_21 [label="success"];
    bb7__0_21 -> bb11__0_21 [label="unwind"];
    bb8__0_21 -> bb9__0_21 [label="success"];
    bb8__0_21 -> bb11__0_21 [label="unwind"];
    bb9__0_21 -> bb1__0_21 [label=""];
}
