digraph Mir_0_39 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn Hasher::internal_new_baseline(_1: u32) -&gt; Adt(Hasher, [])<br align="left"/>let mut _2: Adt(State, []);<br align="left"/>let mut _3: Adt(baseline::State, []);<br align="left"/>let mut _4: u32;<br align="left"/>debug init =&gt; _1;<br align="left"/>>;
    bb0__0_39 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _1<br/></td></tr><tr><td align="left">_3 = baseline::State::new(move _4)</td></tr></table>>];
    bb1__0_39 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = State::Baseline(move _3)<br/>StorageDead(_3)<br/>_0 = Hasher { amount: const 0_u64, state: move _2 }<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb2__0_39 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">2 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_39 -> bb1__0_39 [label="return"];
    bb0__0_39 -> bb2__0_39 [label="unwind"];
}
