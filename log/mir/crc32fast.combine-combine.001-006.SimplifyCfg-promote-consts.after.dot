digraph Mir_0_26 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn combine::combine(_1: u32, _2: u32, _3: u64) -&gt; u32<br align="left"/>let mut _4: !;<br align="left"/>let mut _5: u32;<br align="left"/>let mut _6: [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _7: [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _8: ();<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: !;<br align="left"/>let _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: bool;<br align="left"/>let _15: ();<br align="left"/>let mut _16: Adt(std::ops::Range, [usize]);<br align="left"/>let mut _17: Adt(std::ops::Range, [usize]);<br align="left"/>let mut _18: Adt(std::ops::Range, [usize]);<br align="left"/>let mut _19: ();<br align="left"/>let _20: ();<br align="left"/>let mut _21: Adt(std::option::Option, [usize]);<br align="left"/>let mut _22: &amp;ReErased mut Adt(std::ops::Range, [usize]);<br align="left"/>let mut _23: &amp;ReErased mut Adt(std::ops::Range, [usize]);<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: !;<br align="left"/>let _26: usize;<br align="left"/>let mut _27: u32;<br align="left"/>let _28: usize;<br align="left"/>let mut _29: usize;<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: u32;<br align="left"/>let mut _32: bool;<br align="left"/>let _33: ();<br align="left"/>let mut _34: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _35: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _36: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _37: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _38: ();<br align="left"/>let mut _39: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _40: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _41: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _42: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _43: ();<br align="left"/>let _44: ();<br align="left"/>let mut _45: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _46: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _47: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _48: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _49: ();<br align="left"/>let mut _50: bool;<br align="left"/>let mut _51: u64;<br align="left"/>let mut _52: u64;<br align="left"/>let mut _53: u32;<br align="left"/>let mut _54: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _55: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _56: u32;<br align="left"/>let mut _57: u32;<br align="left"/>let mut _58: bool;<br align="left"/>let _59: ();<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: u64;<br align="left"/>let mut _62: !;<br align="left"/>let _63: ();<br align="left"/>let mut _64: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _65: &amp;ReErased mut [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _66: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _67: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _68: ();<br align="left"/>let mut _69: bool;<br align="left"/>let mut _70: u64;<br align="left"/>let mut _71: u64;<br align="left"/>let mut _72: u32;<br align="left"/>let mut _73: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let _74: &amp;ReErased [u32; Const { ty: usize, kind: Leaf(0x0000000000000020) }];<br align="left"/>let mut _75: u32;<br align="left"/>let mut _76: u32;<br align="left"/>let mut _77: bool;<br align="left"/>let mut _78: bool;<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: u32;<br align="left"/>debug crc1 =&gt; _1;<br align="left"/>debug crc2 =&gt; _2;<br align="left"/>debug len2 =&gt; _3;<br align="left"/>debug row =&gt; _5;<br align="left"/>debug even =&gt; _6;<br align="left"/>debug odd =&gt; _7;<br align="left"/>debug iter =&gt; _18;<br align="left"/>debug n =&gt; _26;<br align="left"/>>;
    bb0__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = [const 0_u32; 32]<br/>FakeRead(ForLet(None), _6)<br/>StorageLive(_7)<br/>_7 = [const 0_u32; 32]<br/>FakeRead(ForLet(None), _7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _3<br/>_9 = Le(move _10, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb1__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_0 = _1<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_8 = const ()<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_12)<br/>_12 = const 0_usize<br/>_13 = Len(_7)<br/>_14 = Lt(_12, _13)<br/></td></tr><tr><td align="left">assert(move _14, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _13, _12)</td></tr></table>>];
    bb4__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_7[_12] = const 3988292384_u32<br/>StorageDead(_12)<br/>_5 = const 1_u32<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = std::ops::Range::&lt;usize&gt; { start: const 1_usize, end: const _ }<br/></td></tr><tr><td align="left">_16 = &lt;std::ops::Range&lt;usize&gt; as std::iter::IntoIterator&gt;::into_iter(move _17)</td></tr></table>>];
    bb5__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>FakeRead(ForMatchedPlace(None), _16)<br/>StorageLive(_18)<br/>_18 = move _16<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">falseUnwind</td></tr></table>>];
    bb7__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;'_ mut _18<br/>_22 = &amp;'_ mut (*_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::ops::Range&lt;usize&gt; as std::iter::Iterator&gt;::next(move _22)</td></tr></table>>];
    bb8__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>FakeRead(ForMatchedPlace(None), _21)<br/>_24 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb9__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">falseEdge</td></tr></table>>];
    bb10__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_21 as Some).0: usize)<br/>StorageLive(_27)<br/>_27 = _5<br/>StorageLive(_28)<br/>_28 = _26<br/>_29 = Len(_7)<br/>_30 = Lt(_28, _29)<br/></td></tr><tr><td align="left">assert(move _30, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _29, _28)</td></tr></table>>];
    bb11__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_15 = const ()<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = &amp;'_ mut _6<br/>_34 = &amp;'_ mut (*_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;'_ _7<br/>_36 = &amp;'_ (*_37)<br/></td></tr><tr><td align="left">_33 = combine::gf2_matrix_square(move _34, move _36)</td></tr></table>>];
    bb12__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_7[_28] = move _27<br/>StorageDead(_27)<br/>StorageDead(_28)<br/>_31 = const 1_i32 as u32 (IntToInt)<br/>_32 = Lt(move _31, const 32_u32)<br/></td></tr><tr><td align="left">assert(move _32, &quot;attempt to shift left by `{}`, which would overflow&quot;, const 1_i32)</td></tr></table>>];
    bb13__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_5 = Shl(_5, const 1_i32)<br/>_20 = const ()<br/>StorageDead(_26)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>_19 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_33)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = &amp;'_ mut _7<br/>_39 = &amp;'_ mut (*_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;'_ _6<br/>_41 = &amp;'_ (*_42)<br/></td></tr><tr><td align="left">_38 = combine::gf2_matrix_square(move _39, move _41)</td></tr></table>>];
    bb15__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_38)<br/>StorageLive(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">falseUnwind</td></tr></table>>];
    bb17__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = &amp;'_ mut _6<br/>_45 = &amp;'_ mut (*_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = &amp;'_ _7<br/>_47 = &amp;'_ (*_48)<br/></td></tr><tr><td align="left">_44 = combine::gf2_matrix_square(move _45, move _47)</td></tr></table>>];
    bb18__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_45)<br/>StorageDead(_48)<br/>StorageDead(_46)<br/>StorageDead(_44)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = _3<br/>_51 = BitAnd(move _52, const 1_u64)<br/>StorageDead(_52)<br/>_50 = Eq(move _51, const 1_u64)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb19__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = &amp;'_ _6<br/>_54 = &amp;'_ (*_55)<br/>StorageLive(_56)<br/>_56 = _1<br/></td></tr><tr><td align="left">_53 = combine::gf2_matrix_times(move _54, move _56)</td></tr></table>>];
    bb20__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_54)<br/>_1 = move _53<br/>StorageDead(_53)<br/>StorageDead(_55)<br/>_49 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>_49 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/>_57 = const 1_i32 as u32 (IntToInt)<br/>_58 = Lt(move _57, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _58, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 1_i32)</td></tr></table>>];
    bb23__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_3 = Shr(_3, const 1_i32)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = _3<br/>_60 = Eq(move _61, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb24__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_43 = const ()<br/>StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>_59 = const ()<br/>StorageDead(_60)<br/>StorageDead(_59)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_65 = &amp;'_ mut _7<br/>_64 = &amp;'_ mut (*_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_67 = &amp;'_ _6<br/>_66 = &amp;'_ (*_67)<br/></td></tr><tr><td align="left">_63 = combine::gf2_matrix_square(move _64, move _66)</td></tr></table>>];
    bb26__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageDead(_64)<br/>StorageDead(_67)<br/>StorageDead(_65)<br/>StorageDead(_63)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = _3<br/>_70 = BitAnd(move _71, const 1_u64)<br/>StorageDead(_71)<br/>_69 = Eq(move _70, const 1_u64)<br/></td></tr><tr><td align="left">switchInt(move _69)</td></tr></table>>];
    bb27__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = &amp;'_ _7<br/>_73 = &amp;'_ (*_74)<br/>StorageLive(_75)<br/>_75 = _1<br/></td></tr><tr><td align="left">_72 = combine::gf2_matrix_times(move _73, move _75)</td></tr></table>>];
    bb28__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_73)<br/>_1 = move _72<br/>StorageDead(_72)<br/>StorageDead(_74)<br/>_68 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_68 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_68)<br/>_76 = const 1_i32 as u32 (IntToInt)<br/>_77 = Lt(move _76, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _77, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 1_i32)</td></tr></table>>];
    bb31__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_3 = Shr(_3, const 1_i32)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = _3<br/>_78 = Eq(move _79, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb32__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>_43 = const ()<br/>StorageDead(_78)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>_19 = const ()<br/>StorageDead(_78)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageLive(_81)<br/>_81 = _2<br/>_1 = BitXor(_1, move _81)<br/>StorageDead(_81)<br/>_0 = _1<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb36__0_26 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">36 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_26 -> bb3__0_26 [label="0"];
    bb0__0_26 -> bb1__0_26 [label="otherwise"];
    bb1__0_26 -> bb35__0_26 [label=""];
    bb3__0_26 -> bb4__0_26 [label="success"];
    bb3__0_26 -> bb36__0_26 [label="unwind"];
    bb4__0_26 -> bb5__0_26 [label="return"];
    bb4__0_26 -> bb36__0_26 [label="unwind"];
    bb5__0_26 -> bb6__0_26 [label=""];
    bb6__0_26 -> bb7__0_26 [label="real"];
    bb6__0_26 -> bb36__0_26 [label="unwind"];
    bb7__0_26 -> bb8__0_26 [label="return"];
    bb7__0_26 -> bb36__0_26 [label="unwind"];
    bb8__0_26 -> bb9__0_26 [label="0"];
    bb8__0_26 -> bb10__0_26 [label="1"];
    bb8__0_26 -> bb2__0_26 [label="otherwise"];
    bb9__0_26 -> bb11__0_26 [label="real"];
    bb9__0_26 -> bb10__0_26 [label="imaginary"];
    bb10__0_26 -> bb12__0_26 [label="success"];
    bb10__0_26 -> bb36__0_26 [label="unwind"];
    bb11__0_26 -> bb14__0_26 [label="return"];
    bb11__0_26 -> bb36__0_26 [label="unwind"];
    bb12__0_26 -> bb13__0_26 [label="success"];
    bb12__0_26 -> bb36__0_26 [label="unwind"];
    bb13__0_26 -> bb6__0_26 [label=""];
    bb14__0_26 -> bb15__0_26 [label="return"];
    bb14__0_26 -> bb36__0_26 [label="unwind"];
    bb15__0_26 -> bb16__0_26 [label=""];
    bb16__0_26 -> bb17__0_26 [label="real"];
    bb16__0_26 -> bb36__0_26 [label="unwind"];
    bb17__0_26 -> bb18__0_26 [label="return"];
    bb17__0_26 -> bb36__0_26 [label="unwind"];
    bb18__0_26 -> bb21__0_26 [label="0"];
    bb18__0_26 -> bb19__0_26 [label="otherwise"];
    bb19__0_26 -> bb20__0_26 [label="return"];
    bb19__0_26 -> bb36__0_26 [label="unwind"];
    bb20__0_26 -> bb22__0_26 [label=""];
    bb21__0_26 -> bb22__0_26 [label=""];
    bb22__0_26 -> bb23__0_26 [label="success"];
    bb22__0_26 -> bb36__0_26 [label="unwind"];
    bb23__0_26 -> bb25__0_26 [label="0"];
    bb23__0_26 -> bb24__0_26 [label="otherwise"];
    bb24__0_26 -> bb34__0_26 [label=""];
    bb25__0_26 -> bb26__0_26 [label="return"];
    bb25__0_26 -> bb36__0_26 [label="unwind"];
    bb26__0_26 -> bb29__0_26 [label="0"];
    bb26__0_26 -> bb27__0_26 [label="otherwise"];
    bb27__0_26 -> bb28__0_26 [label="return"];
    bb27__0_26 -> bb36__0_26 [label="unwind"];
    bb28__0_26 -> bb30__0_26 [label=""];
    bb29__0_26 -> bb30__0_26 [label=""];
    bb30__0_26 -> bb31__0_26 [label="success"];
    bb30__0_26 -> bb36__0_26 [label="unwind"];
    bb31__0_26 -> bb33__0_26 [label="0"];
    bb31__0_26 -> bb32__0_26 [label="otherwise"];
    bb32__0_26 -> bb34__0_26 [label=""];
    bb33__0_26 -> bb16__0_26 [label=""];
    bb34__0_26 -> bb35__0_26 [label=""];
}
