// MIR for `<impl at src/lib.rs:150:1: 150:29>::write` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?3, '?1, '?2]
| '?1 | Local | ['?3, '?1]
| '?2 | Local | ['?3, '?2]
| '?3 | Local | ['?3]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=4], bb1[0..=2], bb2[0], '?0, '?1, '?2, '?3}
| '?1 | U0 | {bb0[0..=4], bb1[0..=2], bb2[0], '?1}
| '?2 | U0 | {bb0[0..=4], bb1[0..=2], bb2[0], '?2}
| '?3 | U0 | {bb0[0..=4], bb1[0..=2], bb2[0], '?3}
| '?4 | U0 | {bb0[1..=4]}
| '?5 | U0 | {bb0[3..=4]}
| '?6 | U0 | {bb0[0..=4], bb1[0..=2], bb2[0], '?1}
| '?7 | U0 | {bb0[0..=4], bb1[0..=2], bb2[0], '?2}
| '?8 | U0 | {bb0[2..=4]}
| '?9 | U0 | {bb0[4]}
| '?10 | U0 | {bb0[4]}
| '?11 | U0 | {bb0[4]}
|
| Inference Constraints
| '?0 live at {bb0[0..=4], bb1[0..=2], bb2[0]}
| '?1 live at {bb0[0..=4], bb1[0..=2], bb2[0]}
| '?2 live at {bb0[0..=4], bb1[0..=2], bb2[0]}
| '?3 live at {bb0[0..=4], bb1[0..=2], bb2[0]}
| '?4 live at {bb0[1]}
| '?5 live at {bb0[3]}
| '?8 live at {bb0[2..=4]}
| '?9 live at {bb0[4]}
| '?10 live at {bb0[4]}
| '?11 live at {bb0[4]}
| '?1: '?6 due to BoringNoLocation at All(src/lib.rs:151:14: 151:23) (src/lib.rs:151:14: 151:23 (#0)
| '?2: '?7 due to BoringNoLocation at All(src/lib.rs:151:25: 151:30) (src/lib.rs:151:25: 151:30 (#0)
| '?4: '?8 due to Boring at Single(bb0[1]) (src/lib.rs:152:9: 152:13 (#0)
| '?5: '?9 due to Boring at Single(bb0[3]) (src/lib.rs:152:21: 152:26 (#0)
| '?6: '?1 due to BoringNoLocation at All(src/lib.rs:151:14: 151:23) (src/lib.rs:151:14: 151:23 (#0)
| '?6: '?4 due to Boring at Single(bb0[1]) (src/lib.rs:152:9: 152:13 (#0)
| '?7: '?2 due to BoringNoLocation at All(src/lib.rs:151:25: 151:30) (src/lib.rs:151:25: 151:30 (#0)
| '?7: '?5 due to Boring at Single(bb0[3]) (src/lib.rs:152:21: 152:26 (#0)
| '?8: '?10 due to CallArgument(Some(FnDef(DefId(0:41 ~ crc32fast[c0c6]::{impl#0}::update), []))) at Single(bb0[4]) (src/lib.rs:152:9: 152:27 (#0)
| '?9: '?11 due to CallArgument(Some(FnDef(DefId(0:41 ~ crc32fast[c0c6]::{impl#0}::update), []))) at Single(bb0[4]) (src/lib.rs:152:9: 152:27 (#0)
|
fn <impl at src/lib.rs:150:1: 150:29>::write(_1: &'?6 mut Hasher, _2: &'?7 [u8]) -> () {
    debug self => _1;
    debug bytes => _2;
    let mut _0: ();
    let mut _3: &'?8 mut Hasher;
    let mut _4: &'?9 [u8];

    bb0: {
        StorageLive(_3);
        _3 = &'?4 mut (*_1);
        StorageLive(_4);
        _4 = &'?5 (*_2);
        _0 = Hasher::update(move _3, move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}
