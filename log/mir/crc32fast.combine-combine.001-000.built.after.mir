// MIR for `combine::combine` after built

| User Type Annotations
| 0: user_ty: Canonical { value: Ty(u32), max_universe: U0, variables: [] }, span: src/combine.rs:23:18: 23:21, inferred_ty: u32
| 1: user_ty: Canonical { value: Ty(u32), max_universe: U0, variables: [] }, span: src/combine.rs:23:18: 23:21, inferred_ty: u32
|
fn combine::combine(_1: u32, _2: u32, _3: u64) -> u32 {
    debug crc1 => _1;
    debug crc2 => _2;
    debug len2 => _3;
    let mut _0: u32;
    let mut _4: !;
    let mut _5: u32 as UserTypeProjection { base: UserType(0), projs: [] };
    let _8: ();
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: !;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: ();
    let mut _16: std::ops::Range<usize>;
    let mut _17: std::ops::Range<usize>;
    let mut _19: ();
    let _20: ();
    let mut _21: std::option::Option<usize>;
    let mut _22: &mut std::ops::Range<usize>;
    let mut _23: &mut std::ops::Range<usize>;
    let mut _24: isize;
    let mut _25: !;
    let mut _27: u32;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: u32;
    let mut _32: bool;
    let _33: ();
    let mut _34: &mut [u32; 32];
    let mut _35: &mut [u32; 32];
    let mut _36: &[u32; 32];
    let _37: &[u32; 32];
    let _38: ();
    let mut _39: &mut [u32; 32];
    let mut _40: &mut [u32; 32];
    let mut _41: &[u32; 32];
    let _42: &[u32; 32];
    let _43: ();
    let _44: ();
    let mut _45: &mut [u32; 32];
    let mut _46: &mut [u32; 32];
    let mut _47: &[u32; 32];
    let _48: &[u32; 32];
    let _49: ();
    let mut _50: bool;
    let mut _51: u64;
    let mut _52: u64;
    let mut _53: u32;
    let mut _54: &[u32; 32];
    let _55: &[u32; 32];
    let mut _56: u32;
    let mut _57: u32;
    let mut _58: bool;
    let _59: ();
    let mut _60: bool;
    let mut _61: u64;
    let mut _62: !;
    let _63: ();
    let mut _64: &mut [u32; 32];
    let mut _65: &mut [u32; 32];
    let mut _66: &[u32; 32];
    let _67: &[u32; 32];
    let _68: ();
    let mut _69: bool;
    let mut _70: u64;
    let mut _71: u64;
    let mut _72: u32;
    let mut _73: &[u32; 32];
    let _74: &[u32; 32];
    let mut _75: u32;
    let mut _76: u32;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: u64;
    let mut _80: !;
    let mut _81: u32;
    scope 1 {
        debug row => _5;
        let mut _6: [u32; 32];
        scope 2 {
            debug even => _6;
            let mut _7: [u32; 32];
            scope 3 {
                debug odd => _7;
                let mut _18: std::ops::Range<usize>;
                scope 4 {
                    debug iter => _18;
                    let _26: usize;
                    scope 5 {
                        debug n => _26;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = [const 0_u32; 32];
        FakeRead(ForLet(None), _6);
        StorageLive(_7);
        _7 = [const 0_u32; 32];
        FakeRead(ForLet(None), _7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _9 = Le(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        _0 = _1;
        goto -> bb58;
    }

    bb2: {
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        goto -> bb6;
    }

    bb5: {
        StorageDead(_10);
        _8 = const ();
        goto -> bb6;
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        _12 = const 0_usize;
        _13 = Len(_7);
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb7, unwind: bb61];
    }

    bb7: {
        _7[_12] = const 3988292384_u32;
        StorageDead(_12);
        _5 = const 1_u32;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = std::ops::Range::<usize> { start: const 1_usize, end: const _ };
        _16 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _17) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        StorageDead(_17);
        FakeRead(ForMatchedPlace(None), _16);
        StorageLive(_18);
        _18 = move _16;
        goto -> bb9;
    }

    bb9: {
        falseUnwind -> [real: bb10, unwind: bb61];
    }

    bb10: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &'_ mut _18;
        _22 = &'_ mut (*_23);
        _21 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _22) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        StorageDead(_22);
        FakeRead(ForMatchedPlace(None), _21);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb14];
    }

    bb12: {
        falseEdge -> [real: bb15, imaginary: bb13];
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_21 as Some).0: usize);
        StorageLive(_27);
        _27 = _5;
        StorageLive(_28);
        _28 = _26;
        _29 = Len(_7);
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb18, unwind: bb61];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        _15 = const ();
        goto -> bb21;
    }

    bb16: {
        unreachable;
    }

    bb17: {
        goto -> bb20;
    }

    bb18: {
        _7[_28] = move _27;
        StorageDead(_27);
        StorageDead(_28);
        _31 = const 1_i32 as u32 (IntToInt);
        _32 = Lt(move _31, const 32_u32);
        assert(move _32, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb19, unwind: bb61];
    }

    bb19: {
        _5 = Shl(_5, const 1_i32);
        _20 = const ();
        StorageDead(_26);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        _19 = const ();
        goto -> bb9;
    }

    bb21: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &'_ mut _6;
        _34 = &'_ mut (*_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &'_ _7;
        _36 = &'_ (*_37);
        _33 = combine::gf2_matrix_square(move _34, move _36) -> [return: bb23, unwind: bb61];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &'_ mut _7;
        _39 = &'_ mut (*_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &'_ _6;
        _41 = &'_ (*_42);
        _38 = combine::gf2_matrix_square(move _39, move _41) -> [return: bb24, unwind: bb61];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_43);
        goto -> bb25;
    }

    bb25: {
        falseUnwind -> [real: bb26, unwind: bb61];
    }

    bb26: {
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &'_ mut _6;
        _45 = &'_ mut (*_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &'_ _7;
        _47 = &'_ (*_48);
        _44 = combine::gf2_matrix_square(move _45, move _47) -> [return: bb27, unwind: bb61];
    }

    bb27: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _3;
        _51 = BitAnd(move _52, const 1_u64);
        StorageDead(_52);
        _50 = Eq(move _51, const 1_u64);
        switchInt(move _50) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_51);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &'_ _6;
        _54 = &'_ (*_55);
        StorageLive(_56);
        _56 = _1;
        _53 = combine::gf2_matrix_times(move _54, move _56) -> [return: bb30, unwind: bb61];
    }

    bb29: {
        goto -> bb31;
    }

    bb30: {
        StorageDead(_56);
        StorageDead(_54);
        _1 = move _53;
        StorageDead(_53);
        StorageDead(_55);
        _49 = const ();
        goto -> bb32;
    }

    bb31: {
        StorageDead(_51);
        _49 = const ();
        goto -> bb32;
    }

    bb32: {
        StorageDead(_50);
        StorageDead(_49);
        _57 = const 1_i32 as u32 (IntToInt);
        _58 = Lt(move _57, const 64_u32);
        assert(move _58, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb33, unwind: bb61];
    }

    bb33: {
        _3 = Shr(_3, const 1_i32);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _3;
        _60 = Eq(move _61, const 0_u64);
        switchInt(move _60) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        StorageDead(_61);
        _43 = const ();
        goto -> bb54;
    }

    bb35: {
        goto -> bb38;
    }

    bb36: {
        unreachable;
    }

    bb37: {
        goto -> bb39;
    }

    bb38: {
        StorageDead(_61);
        _59 = const ();
        goto -> bb39;
    }

    bb39: {
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &'_ mut _7;
        _64 = &'_ mut (*_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &'_ _6;
        _66 = &'_ (*_67);
        _63 = combine::gf2_matrix_square(move _64, move _66) -> [return: bb40, unwind: bb61];
    }

    bb40: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _3;
        _70 = BitAnd(move _71, const 1_u64);
        StorageDead(_71);
        _69 = Eq(move _70, const 1_u64);
        switchInt(move _69) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &'_ _7;
        _73 = &'_ (*_74);
        StorageLive(_75);
        _75 = _1;
        _72 = combine::gf2_matrix_times(move _73, move _75) -> [return: bb43, unwind: bb61];
    }

    bb42: {
        goto -> bb44;
    }

    bb43: {
        StorageDead(_75);
        StorageDead(_73);
        _1 = move _72;
        StorageDead(_72);
        StorageDead(_74);
        _68 = const ();
        goto -> bb45;
    }

    bb44: {
        StorageDead(_70);
        _68 = const ();
        goto -> bb45;
    }

    bb45: {
        StorageDead(_69);
        StorageDead(_68);
        _76 = const 1_i32 as u32 (IntToInt);
        _77 = Lt(move _76, const 64_u32);
        assert(move _77, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb46, unwind: bb61];
    }

    bb46: {
        _3 = Shr(_3, const 1_i32);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _3;
        _78 = Eq(move _79, const 0_u64);
        switchInt(move _78) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_79);
        _43 = const ();
        goto -> bb53;
    }

    bb48: {
        goto -> bb51;
    }

    bb49: {
        unreachable;
    }

    bb50: {
        goto -> bb52;
    }

    bb51: {
        StorageDead(_79);
        _19 = const ();
        goto -> bb52;
    }

    bb52: {
        StorageDead(_78);
        goto -> bb25;
    }

    bb53: {
        StorageDead(_78);
        goto -> bb55;
    }

    bb54: {
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_43);
        StorageLive(_81);
        _81 = _2;
        _1 = BitXor(_1, move _81);
        StorageDead(_81);
        _0 = _1;
        goto -> bb59;
    }

    bb56: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        unreachable;
    }

    bb57: {
        goto -> bb60;
    }

    bb58: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb60;
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        resume;
    }
}
