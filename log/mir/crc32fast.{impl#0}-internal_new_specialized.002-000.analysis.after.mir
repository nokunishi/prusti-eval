// MIR for `<impl at src/lib.rs:61:1: 61:12>::internal_new_specialized` after analysis

fn <impl at src/lib.rs:61:1: 61:12>::internal_new_specialized(_1: u32) -> std::option::Option<Hasher> {
    debug init => _1;
    let mut _0: std::option::Option<Hasher>;
    let _2: ();
    let mut _3: std::option::Option<specialized::pclmulqdq::State>;
    let mut _4: u32;
    let mut _5: isize;
    let mut _7: !;
    let mut _8: Hasher;
    let mut _9: State;
    let mut _10: specialized::pclmulqdq::State;
    scope 1 {
        debug state => _6;
        let _6: specialized::pclmulqdq::State;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        _3 = specialized::pclmulqdq::State::new(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        StorageDead(_4);
        FakeRead(ForMatchedPlace(None), _3);
        _5 = discriminant(_3);
        switchInt(move _5) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        falseEdge -> [real: bb3, imaginary: bb4];
    }

    bb3: {
        StorageLive(_6);
        _6 = move ((_3 as Some).0: specialized::pclmulqdq::State);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = move _6;
        _9 = State::Specialized(move _10);
        StorageDead(_10);
        _8 = Hasher { amount: const 0_u64, state: move _9 };
        StorageDead(_9);
        _0 = std::option::Option::<Hasher>::Some(move _8);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb5;
    }

    bb4: {
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        _0 = std::option::Option::<Hasher>::None;
        goto -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }
}
