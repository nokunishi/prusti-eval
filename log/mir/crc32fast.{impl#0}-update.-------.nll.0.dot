digraph Mir_0_41 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn Hasher::update(_1: &amp;'?11 mut Adt(Hasher, []), _2: &amp;'?12 [u8]) -&gt; ()<br align="left"/>let mut _3: u64;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: &amp;'?13 [u8];<br align="left"/>let mut _6: (u64bool));<br align="left"/>let mut _7: isize;<br align="left"/>let _8: &amp;'?14 mut Adt(baseline::State, []);<br align="left"/>let mut _9: &amp;'?15 mut Adt(baseline::State, []);<br align="left"/>let mut _10: &amp;'?16 [u8];<br align="left"/>let _11: &amp;'?17 mut Adt(specialized::pclmulqdq::State, []);<br align="left"/>let mut _12: &amp;'?18 mut Adt(specialized::pclmulqdq::State, []);<br align="left"/>let mut _13: &amp;'?19 [u8];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug buf =&gt; _2;<br align="left"/>debug state =&gt; _8;<br align="left"/>debug state =&gt; _11;<br align="left"/>>;
    bb0__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;'?4 (*_2)<br/></td></tr><tr><td align="left">_4 = core::slice::&lt;impl [u8]&gt;::len(move _5)</td></tr></table>>];
    bb1__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = move _4 as u64 (IntToInt)<br/>StorageDead(_4)<br/>_6 = CheckedAdd(((*_1).0: u64), _3)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, ((*_1).0: u64), move _3)</td></tr></table>>];
    bb2__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">((*_1).0: u64) = move (_6.0: u64)<br/>StorageDead(_3)<br/>FakeRead(ForMatchedPlace(None), ((*_1).1: State))<br/>_7 = discriminant(((*_1).1: State))<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">falseEdge</td></tr></table>>];
    bb4__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = &amp;'?5 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State)<br/>StorageLive(_12)<br/>_12 = &amp;'?6 mut (*_11)<br/>StorageLive(_13)<br/>_13 = &amp;'?7 (*_2)<br/></td></tr><tr><td align="left">_0 = specialized::pclmulqdq::State::update(move _12, move _13)</td></tr></table>>];
    bb5__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = &amp;'?8 mut ((((*_1).1: State) as Baseline).0: baseline::State)<br/>StorageLive(_9)<br/>_9 = &amp;'?9 mut (*_8)<br/>StorageLive(_10)<br/>_10 = &amp;'?10 (*_2)<br/></td></tr><tr><td align="left">_0 = baseline::State::update(move _9, move _10)</td></tr></table>>];
    bb7__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_41 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_41 -> bb1__0_41 [label="return"];
    bb0__0_41 -> bb10__0_41 [label="unwind"];
    bb1__0_41 -> bb2__0_41 [label="success"];
    bb1__0_41 -> bb10__0_41 [label="unwind"];
    bb2__0_41 -> bb3__0_41 [label="0"];
    bb2__0_41 -> bb4__0_41 [label="1"];
    bb2__0_41 -> bb5__0_41 [label="otherwise"];
    bb3__0_41 -> bb6__0_41 [label="real"];
    bb3__0_41 -> bb4__0_41 [label="imaginary"];
    bb4__0_41 -> bb8__0_41 [label="return"];
    bb4__0_41 -> bb10__0_41 [label="unwind"];
    bb6__0_41 -> bb7__0_41 [label="return"];
    bb6__0_41 -> bb10__0_41 [label="unwind"];
    bb7__0_41 -> bb9__0_41 [label=""];
    bb8__0_41 -> bb9__0_41 [label=""];
}
