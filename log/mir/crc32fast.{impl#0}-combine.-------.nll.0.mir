// MIR for `<impl at src/lib.rs:61:1: 61:12>::combine` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?3, '?1, '?2]
| '?1 | Local | ['?3, '?1]
| '?2 | Local | ['?3, '?2]
| '?3 | Local | ['?3]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0], '?0, '?1, '?2, '?3}
| '?1 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0], '?1}
| '?2 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0], '?2}
| '?3 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0], '?3}
| '?4 | U0 | {bb1[5..=6]}
| '?5 | U0 | {bb5[1..=8]}
| '?6 | U0 | {bb5[3..=8]}
| '?7 | U0 | {bb7[1..=8]}
| '?8 | U0 | {bb7[3..=8]}
| '?9 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0], '?1}
| '?10 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0], '?2}
| '?11 | U0 | {bb1[6]}
| '?12 | U0 | {bb7[2..=8]}
| '?13 | U0 | {bb7[4..=8]}
| '?14 | U0 | {bb5[2..=8]}
| '?15 | U0 | {bb5[4..=8]}
| '?16 | U0 | {bb1[6]}
| '?17 | U0 | {bb5[8]}
| '?18 | U0 | {bb7[8]}
|
| Inference Constraints
| '?0 live at {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0]}
| '?1 live at {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0]}
| '?2 live at {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0]}
| '?3 live at {bb0[0..=3], bb1[0..=6], bb2[0..=1], bb3[0..=4], bb4[0], bb5[0..=8], bb6[0], bb7[0..=8], bb8[0..=4], bb9[0..=4], bb10[0..=1], bb11[0]}
| '?4 live at {bb1[5]}
| '?5 live at {bb5[1]}
| '?6 live at {bb5[3]}
| '?7 live at {bb7[1]}
| '?8 live at {bb7[3]}
| '?11 live at {bb1[6]}
| '?12 live at {bb7[2..=3]}
| '?13 live at {bb7[4..=8]}
| '?14 live at {bb5[2..=3]}
| '?15 live at {bb5[4..=8]}
| '?16 live at {bb1[6]}
| '?17 live at {bb5[8]}
| '?18 live at {bb7[8]}
| '?1: '?9 due to BoringNoLocation at All(src/lib.rs:128:20: 128:29) (src/lib.rs:128:20: 128:29 (#0)
| '?2: '?10 due to BoringNoLocation at All(src/lib.rs:128:31: 128:36) (src/lib.rs:128:31: 128:36 (#0)
| '?4: '?11 due to Boring at Single(bb1[5]) (src/lib.rs:130:25: 130:30 (#0)
| '?5: '?14 due to Assignment at Single(bb5[1]) (src/lib.rs:133:32: 133:45 (#0)
| '?6: '?15 due to Boring at Single(bb5[3]) (src/lib.rs:133:50: 133:55 (#0)
| '?7: '?12 due to Assignment at Single(bb7[1]) (src/lib.rs:132:29: 132:42 (#0)
| '?8: '?13 due to Boring at Single(bb7[3]) (src/lib.rs:132:47: 132:52 (#0)
| '?9: '?1 due to BoringNoLocation at All(src/lib.rs:128:20: 128:29) (src/lib.rs:128:20: 128:29 (#0)
| '?9: '?5 due to Boring at Single(bb5[1]) (src/lib.rs:133:32: 133:45 (#0)
| '?9: '?7 due to Boring at Single(bb7[1]) (src/lib.rs:132:29: 132:42 (#0)
| '?10: '?2 due to BoringNoLocation at All(src/lib.rs:128:31: 128:36) (src/lib.rs:128:31: 128:36 (#0)
| '?10: '?4 due to Boring at Single(bb1[5]) (src/lib.rs:130:25: 130:30 (#0)
| '?11: '?16 due to CallArgument(Some(FnDef(DefId(2:2280 ~ core[5e8a]::clone::Clone::clone), [Adt(Hasher, [])]))) at Single(bb1[6]) (src/lib.rs:130:25: 130:38 (#0)
| '?12: '?8 due to Boring at Single(bb7[3]) (src/lib.rs:132:47: 132:52 (#0)
| '?13: '?18 due to CallArgument(Some(FnDef(DefId(0:14 ~ crc32fast[c0c6]::baseline::{impl#0}::combine), []))) at Single(bb7[8]) (src/lib.rs:132:47: 132:85 (#0)
| '?14: '?6 due to Boring at Single(bb5[3]) (src/lib.rs:133:50: 133:55 (#0)
| '?15: '?17 due to CallArgument(Some(FnDef(DefId(0:63 ~ crc32fast[c0c6]::specialized::pclmulqdq::{impl#0}::combine), []))) at Single(bb5[8]) (src/lib.rs:133:50: 133:88 (#0)
|
fn <impl at src/lib.rs:61:1: 61:12>::combine(_1: &'?9 mut Hasher, _2: &'?10 Hasher) -> () {
    debug self => _1;
    debug other => _2;
    let mut _0: ();
    let mut _3: u64;
    let mut _4: (u64, bool);
    let _5: u32;
    let mut _6: Hasher;
    let mut _7: &'?11 Hasher;
    let mut _8: isize;
    let mut _10: &'?13 mut baseline::State;
    let mut _11: u32;
    let mut _12: u64;
    let mut _14: &'?15 mut specialized::pclmulqdq::State;
    let mut _15: u32;
    let mut _16: u64;
    scope 1 {
        debug other_crc => _5;
        let _9: &'?12 mut baseline::State;
        let _13: &'?14 mut specialized::pclmulqdq::State;
        scope 2 {
            debug state => _9;
        }
        scope 3 {
            debug state => _13;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = ((*_2).0: u64);
        _4 = CheckedAdd(((*_1).0: u64), _3);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: u64), move _3) -> [success: bb1, unwind: bb11];
    }

    bb1: {
        ((*_1).0: u64) = move (_4.0: u64);
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &'?4 (*_2);
        _6 = <Hasher as std::clone::Clone>::clone(move _7) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_7);
        _5 = Hasher::finalize(move _6) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        StorageDead(_6);
        FakeRead(ForLet(None), _5);
        FakeRead(ForMatchedPlace(None), ((*_1).1: State));
        _8 = discriminant(((*_1).1: State));
        switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb6];
    }

    bb4: {
        falseEdge -> [real: bb7, imaginary: bb5];
    }

    bb5: {
        StorageLive(_13);
        _13 = &'?5 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State);
        StorageLive(_14);
        _14 = &'?6 mut (*_13);
        StorageLive(_15);
        _15 = _5;
        StorageLive(_16);
        _16 = ((*_2).0: u64);
        _0 = specialized::pclmulqdq::State::combine(move _14, move _15, move _16) -> [return: bb9, unwind: bb11];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_9);
        _9 = &'?7 mut ((((*_1).1: State) as Baseline).0: baseline::State);
        StorageLive(_10);
        _10 = &'?8 mut (*_9);
        StorageLive(_11);
        _11 = _5;
        StorageLive(_12);
        _12 = ((*_2).0: u64);
        _0 = baseline::State::combine(move _10, move _11, move _12) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_5);
        return;
    }

    bb11 (cleanup): {
        resume;
    }
}
