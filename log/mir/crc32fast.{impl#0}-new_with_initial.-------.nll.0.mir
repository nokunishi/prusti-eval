// MIR for `<impl at src/lib.rs:61:1: 61:12>::new_with_initial` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?1]
| '?1 | Local | ['?1]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=2], bb3[0], '?0, '?1}
| '?1 | U0 | {bb0[0..=3], bb1[0..=6], bb2[0..=2], bb3[0], '?1}
| '?2 | U0 | {bb1[3..=6]}
| '?3 | U0 | {bb1[4..=6]}
| '?4 | U0 | {bb1[4..=6]}
| '?5 | U0 | {bb1[4..=6]}
| '?6 | U0 | {bb1[4..=6]}
|
| Inference Constraints
| '?0 live at {bb0[0..=3], bb1[0..=6], bb2[0..=2], bb3[0]}
| '?1 live at {bb0[0..=3], bb1[0..=6], bb2[0..=2], bb3[0]}
| '?2 live at {bb1[3]}
| '?3 live at {bb1[4]}
| '?4 live at {bb1[6]}
| '?5 live at {bb1[5..=6]}
| '?6 live at {bb1[4]}
| '?2: '?6 due to Boring at Single(bb1[3]) (src/lib.rs:75:61: 75:97 (#0)
| '?3: '?5 due to Boring at Single(bb1[4]) (src/lib.rs:75:61: 75:97 (#0)
| '?4: '?5 due to CallArgument(Some(FnDef(DefId(2:8266 ~ core[5e8a]::option::{impl#0}::unwrap_or_else), [Adt(Hasher, []), Closure(DefId(0:38 ~ crc32fast[c0c6]::{impl#0}::new_with_initial::{closure#0}), [i32, Binder(extern "RustCall" fn(()) -> Adt(Hasher, []), []), (&ReErased u32,)])]))) at Single(bb1[6]) (src/lib.rs:75:9: 75:98 (#0)
| '?5: '?3 due to Boring at Single(bb1[4]) (src/lib.rs:75:61: 75:97 (#0)
| '?5: '?4 due to CallArgument(Some(FnDef(DefId(2:8266 ~ core[5e8a]::option::{impl#0}::unwrap_or_else), [Adt(Hasher, []), Closure(DefId(0:38 ~ crc32fast[c0c6]::{impl#0}::new_with_initial::{closure#0}), [i32, Binder(extern "RustCall" fn(()) -> Adt(Hasher, []), []), (&ReErased u32,)])]))) at Single(bb1[6]) (src/lib.rs:75:9: 75:98 (#0)
| '?6: '?3 due to Boring at Single(bb1[4]) (src/lib.rs:75:61: 75:97 (#0)
|
fn <impl at src/lib.rs:61:1: 61:12>::new_with_initial(_1: u32) -> Hasher {
    debug init => _1;
    let mut _0: Hasher;
    let mut _2: std::option::Option<Hasher>;
    let mut _3: u32;
    let mut _4: [closure@src/lib.rs:75:61: 75:63];
    let mut _5: &'?6 u32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        _2 = Hasher::internal_new_specialized(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &'?2 _1;
        _4 = [closure@src/lib.rs:75:61: 75:63] { init: move _5 };
        StorageDead(_5);
        _0 = std::option::Option::<Hasher>::unwrap_or_else::<[closure@src/lib.rs:75:61: 75:63]>(move _2, move _4) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
