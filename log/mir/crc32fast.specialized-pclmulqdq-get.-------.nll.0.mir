// MIR for `specialized::pclmulqdq::get` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?3, '?1, '?2]
| '?1 | Local | ['?3, '?1]
| '?2 | Local | ['?3, '?1, '?2]
| '?3 | Local | ['?3]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?0, '?1, '?2, '?3}
| '?1 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?1}
| '?2 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?3 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?3}
| '?4 | U0 | {bb1[4..=5]}
| '?5 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?0, '?1, '?2, '?3}
| '?6 | U0 | {bb6[6..=7]}
| '?7 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?8 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?9 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?10 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?1}
| '?11 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?12 | U0 | {bb1[5]}
| '?13 | U0 | {bb6[7]}
| '?14 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?15 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?16 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?17 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
| '?18 | U0 | {bb1[5]}
| '?19 | U0 | {bb6[7]}
| '?20 | U0 | {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0], '?2}
|
| Inference Constraints
| '?0 live at {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0]}
| '?1 live at {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0]}
| '?2 live at {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0]}
| '?3 live at {bb0[0..=3], bb1[0..=5], bb2[0..=2], bb3[0..=5], bb4[0..=2], bb5[0..=1], bb6[0..=7], bb7[0..=3], bb8[0..=9], bb9[0..=10], bb10[0]}
| '?4 live at {bb1[4]}
| '?5 live at {bb4[2]}
| '?6 live at {bb6[6]}
| '?7 live at {bb8[6]}
| '?8 live at {bb9[2]}
| '?9 live at {bb9[3]}
| '?12 live at {bb1[5]}
| '?13 live at {bb6[7]}
| '?18 live at {bb1[5]}
| '?19 live at {bb6[7]}
| '?20 live at {bb8[9]}
| '?1: '?10 due to BoringNoLocation at All(src/specialized/pclmulqdq.rs:198:15: 198:16) (src/specialized/pclmulqdq.rs:198:15: 198:16 (#0)
| '?2: '?11 due to BoringNoLocation at All(src/specialized/pclmulqdq.rs:198:15: 198:16) (src/specialized/pclmulqdq.rs:198:15: 198:16 (#0)
| '?4: '?12 due to Boring at Single(bb1[4]) (src/specialized/pclmulqdq.rs:199:19: 199:20 (#0)
| '?5: '?0 due to CallArgument(Some(FnDef(DefId(2:8615 ~ core[5e8a]::panicking::panic), []))) at Single(bb4[2]) (/Users/hatsusaiokunishi/.rustup/toolchains/nightly-2023-09-15-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:219:13: 219:38 (#42)
| '?6: '?13 due to Boring at Single(bb6[6]) (src/specialized/pclmulqdq.rs:200:35: 200:36 (#0)
| '?7: '?17 due to Boring at Single(bb8[6]) (src/specialized/pclmulqdq.rs:201:11: 201:12 (#0)
| '?8: '?15 due to Boring at Single(bb9[2]) (src/specialized/pclmulqdq.rs:201:10: 201:18 (#0)
| '?9: '?14 due to Boring at Single(bb9[3]) (src/specialized/pclmulqdq.rs:201:10: 201:18 (#0)
| '?10: '?1 due to BoringNoLocation at All(src/specialized/pclmulqdq.rs:198:15: 198:16) (src/specialized/pclmulqdq.rs:198:15: 198:16 (#0)
| '?11: '?2 due to BoringNoLocation at All(src/specialized/pclmulqdq.rs:198:15: 198:16) (src/specialized/pclmulqdq.rs:198:15: 198:16 (#0)
| '?11: '?4 due to Boring at Single(bb1[4]) (src/specialized/pclmulqdq.rs:199:19: 199:20 (#0)
| '?11: '?6 due to Boring at Single(bb6[6]) (src/specialized/pclmulqdq.rs:200:35: 200:36 (#0)
| '?11: '?7 due to Boring at Single(bb8[6]) (src/specialized/pclmulqdq.rs:201:11: 201:12 (#0)
| '?12: '?18 due to CallArgument(Some(FnDef(DefId(2:11255 ~ core[5e8a]::slice::{impl#0}::len), [u8]))) at Single(bb1[5]) (src/specialized/pclmulqdq.rs:199:19: 199:26 (#0)
| '?13: '?19 due to CallArgument(Some(FnDef(DefId(2:11305 ~ core[5e8a]::slice::{impl#0}::as_ptr), [u8]))) at Single(bb6[7]) (src/specialized/pclmulqdq.rs:200:35: 200:45 (#0)
| '?14: '?11 due to Assignment at Single(bb9[4]) (src/specialized/pclmulqdq.rs:201:5: 201:18 (#0)
| '?15: '?9 due to Boring at Single(bb9[3]) (src/specialized/pclmulqdq.rs:201:10: 201:18 (#0)
| '?16: '?8 due to Boring at Single(bb9[2]) (src/specialized/pclmulqdq.rs:201:10: 201:18 (#0)
| '?17: '?20 due to Boring at Single(bb8[9]) (src/specialized/pclmulqdq.rs:201:12: 201:18 (#0)
| '?20: '?16 due to Boring at Single(bb8[9]) (src/specialized/pclmulqdq.rs:201:12: 201:18 (#0)
|
fn specialized::pclmulqdq::get(_1: &'?10 mut &'?11 [u8]) -> std::arch::x86_64::__m128i {
    debug a => _1;
    let mut _0: std::arch::x86_64::__m128i;
    let mut _2: !;
    let _3: ();
    let mut _4: bool;
    let _5: ();
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: &'?12 [u8];
    let mut _9: !;
    let _10: std::arch::x86_64::__m128i;
    let mut _11: *const std::arch::x86_64::__m128i;
    let mut _12: *const u8;
    let mut _13: &'?13 [u8];
    let mut _14: &'?14 [u8];
    let _15: &'?15 [u8];
    let _16: &'?16 [u8];
    let mut _17: &'?17 [u8];
    let mut _18: std::ops::RangeFrom<usize>;
    scope 1 {
        debug r => _10;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const true;
        switchInt(move _4) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &'?4 (*(*_1));
        _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        StorageDead(_8);
        _6 = Ge(move _7, const 16_usize);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        goto -> bb6;
    }

    bb4: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = core::panicking::panic(const "assertion failed: a.len() >= 16") -> bb10;
    }

    bb5: {
        _3 = const ();
        goto -> bb6;
    }

    bb6: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &'?6 (*(*_1));
        _12 = core::slice::<impl [u8]>::as_ptr(move _13) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_13);
        _11 = move _12 as *const std::arch::x86_64::__m128i (PtrToPtr);
        StorageDead(_12);
        _10 = std::arch::x86_64::_mm_loadu_si128(move _11) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        StorageDead(_11);
        FakeRead(ForLet(None), _10);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &'?7 (*(*_1));
        StorageLive(_18);
        _18 = std::ops::RangeFrom::<usize> { start: const 16_usize };
        _16 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _17, move _18) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = &'?8 (*_16);
        _14 = &'?9 (*_15);
        (*_1) = move _14;
        StorageDead(_14);
        StorageDead(_16);
        StorageDead(_15);
        _0 = _10;
        StorageDead(_10);
        return;
    }

    bb10 (cleanup): {
        resume;
    }
}
