// MIR for `<impl at src/lib.rs:61:1: 61:12>::update` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?3, '?1, '?2]
| '?1 | Local | ['?3, '?1]
| '?2 | Local | ['?3, '?2]
| '?3 | Local | ['?3]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0], '?0, '?1, '?2, '?3}
| '?1 | U0 | {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0], '?1}
| '?2 | U0 | {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0], '?2}
| '?3 | U0 | {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0], '?3}
| '?4 | U0 | {bb0[3..=4]}
| '?5 | U0 | {bb4[1..=6]}
| '?6 | U0 | {bb4[3..=6]}
| '?7 | U0 | {bb4[5..=6]}
| '?8 | U0 | {bb6[1..=6]}
| '?9 | U0 | {bb6[3..=6]}
| '?10 | U0 | {bb6[5..=6]}
| '?11 | U0 | {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0], '?1}
| '?12 | U0 | {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0], '?2}
| '?13 | U0 | {bb0[4]}
| '?14 | U0 | {bb6[2..=6]}
| '?15 | U0 | {bb6[4..=6]}
| '?16 | U0 | {bb6[6]}
| '?17 | U0 | {bb4[2..=6]}
| '?18 | U0 | {bb4[4..=6]}
| '?19 | U0 | {bb4[6]}
| '?20 | U0 | {bb0[4]}
| '?21 | U0 | {bb4[6]}
| '?22 | U0 | {bb4[6]}
| '?23 | U0 | {bb6[6]}
| '?24 | U0 | {bb6[6]}
|
| Inference Constraints
| '?0 live at {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0]}
| '?1 live at {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0]}
| '?2 live at {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0]}
| '?3 live at {bb0[0..=4], bb1[0..=4], bb2[0..=4], bb3[0], bb4[0..=6], bb5[0], bb6[0..=6], bb7[0..=3], bb8[0..=3], bb9[0], bb10[0]}
| '?4 live at {bb0[3]}
| '?5 live at {bb4[1]}
| '?6 live at {bb4[3]}
| '?7 live at {bb4[5]}
| '?8 live at {bb6[1]}
| '?9 live at {bb6[3]}
| '?10 live at {bb6[5]}
| '?13 live at {bb0[4]}
| '?14 live at {bb6[2..=3]}
| '?15 live at {bb6[4..=6]}
| '?16 live at {bb6[6]}
| '?17 live at {bb4[2..=3]}
| '?18 live at {bb4[4..=6]}
| '?19 live at {bb4[6]}
| '?20 live at {bb0[4]}
| '?21 live at {bb4[6]}
| '?22 live at {bb4[6]}
| '?23 live at {bb6[6]}
| '?24 live at {bb6[6]}
| '?1: '?11 due to BoringNoLocation at All(src/lib.rs:102:19: 102:28) (src/lib.rs:102:19: 102:28 (#0)
| '?2: '?12 due to BoringNoLocation at All(src/lib.rs:102:30: 102:33) (src/lib.rs:102:30: 102:33 (#0)
| '?4: '?13 due to Boring at Single(bb0[3]) (src/lib.rs:103:24: 103:27 (#0)
| '?5: '?17 due to Assignment at Single(bb4[1]) (src/lib.rs:106:32: 106:45 (#0)
| '?6: '?18 due to Boring at Single(bb4[3]) (src/lib.rs:106:50: 106:55 (#0)
| '?7: '?19 due to Boring at Single(bb4[5]) (src/lib.rs:106:63: 106:66 (#0)
| '?8: '?14 due to Assignment at Single(bb6[1]) (src/lib.rs:105:29: 105:42 (#0)
| '?9: '?15 due to Boring at Single(bb6[3]) (src/lib.rs:105:47: 105:52 (#0)
| '?10: '?16 due to Boring at Single(bb6[5]) (src/lib.rs:105:60: 105:63 (#0)
| '?11: '?1 due to BoringNoLocation at All(src/lib.rs:102:19: 102:28) (src/lib.rs:102:19: 102:28 (#0)
| '?11: '?5 due to Boring at Single(bb4[1]) (src/lib.rs:106:32: 106:45 (#0)
| '?11: '?8 due to Boring at Single(bb6[1]) (src/lib.rs:105:29: 105:42 (#0)
| '?12: '?2 due to BoringNoLocation at All(src/lib.rs:102:30: 102:33) (src/lib.rs:102:30: 102:33 (#0)
| '?12: '?4 due to Boring at Single(bb0[3]) (src/lib.rs:103:24: 103:27 (#0)
| '?12: '?7 due to Boring at Single(bb4[5]) (src/lib.rs:106:63: 106:66 (#0)
| '?12: '?10 due to Boring at Single(bb6[5]) (src/lib.rs:105:60: 105:63 (#0)
| '?13: '?20 due to CallArgument(Some(FnDef(DefId(2:11255 ~ core[5e8a]::slice::{impl#0}::len), [u8]))) at Single(bb0[4]) (src/lib.rs:103:24: 103:33 (#0)
| '?14: '?9 due to Boring at Single(bb6[3]) (src/lib.rs:105:47: 105:52 (#0)
| '?15: '?23 due to CallArgument(Some(FnDef(DefId(0:11 ~ crc32fast[c0c6]::baseline::{impl#0}::update), []))) at Single(bb6[6]) (src/lib.rs:105:47: 105:64 (#0)
| '?16: '?24 due to CallArgument(Some(FnDef(DefId(0:11 ~ crc32fast[c0c6]::baseline::{impl#0}::update), []))) at Single(bb6[6]) (src/lib.rs:105:47: 105:64 (#0)
| '?17: '?6 due to Boring at Single(bb4[3]) (src/lib.rs:106:50: 106:55 (#0)
| '?18: '?21 due to CallArgument(Some(FnDef(DefId(0:60 ~ crc32fast[c0c6]::specialized::pclmulqdq::{impl#0}::update), []))) at Single(bb4[6]) (src/lib.rs:106:50: 106:67 (#0)
| '?19: '?22 due to CallArgument(Some(FnDef(DefId(0:60 ~ crc32fast[c0c6]::specialized::pclmulqdq::{impl#0}::update), []))) at Single(bb4[6]) (src/lib.rs:106:50: 106:67 (#0)
|
fn <impl at src/lib.rs:61:1: 61:12>::update(_1: &'?11 mut Hasher, _2: &'?12 [u8]) -> () {
    debug self => _1;
    debug buf => _2;
    let mut _0: ();
    let mut _3: u64;
    let mut _4: usize;
    let mut _5: &'?13 [u8];
    let mut _6: (u64, bool);
    let mut _7: isize;
    let _8: &'?14 mut baseline::State;
    let mut _9: &'?15 mut baseline::State;
    let mut _10: &'?16 [u8];
    let _11: &'?17 mut specialized::pclmulqdq::State;
    let mut _12: &'?18 mut specialized::pclmulqdq::State;
    let mut _13: &'?19 [u8];
    scope 1 {
        debug state => _8;
    }
    scope 2 {
        debug state => _11;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &'?4 (*_2);
        _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        StorageDead(_5);
        _3 = move _4 as u64 (IntToInt);
        StorageDead(_4);
        _6 = CheckedAdd(((*_1).0: u64), _3);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: u64), move _3) -> [success: bb2, unwind: bb10];
    }

    bb2: {
        ((*_1).0: u64) = move (_6.0: u64);
        StorageDead(_3);
        FakeRead(ForMatchedPlace(None), ((*_1).1: State));
        _7 = discriminant(((*_1).1: State));
        switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb5];
    }

    bb3: {
        falseEdge -> [real: bb6, imaginary: bb4];
    }

    bb4: {
        StorageLive(_11);
        _11 = &'?5 mut ((((*_1).1: State) as Specialized).0: specialized::pclmulqdq::State);
        StorageLive(_12);
        _12 = &'?6 mut (*_11);
        StorageLive(_13);
        _13 = &'?7 (*_2);
        _0 = specialized::pclmulqdq::State::update(move _12, move _13) -> [return: bb8, unwind: bb10];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_8);
        _8 = &'?8 mut ((((*_1).1: State) as Baseline).0: baseline::State);
        StorageLive(_9);
        _9 = &'?9 mut (*_8);
        StorageLive(_10);
        _10 = &'?10 (*_2);
        _0 = baseline::State::update(move _9, move _10) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }
}
