digraph Mir_0_93 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;State as std::clone::Clone&gt;::clone(_1: &amp;ReErased Adt(State, [])) -&gt; Adt(State, [])<br align="left"/>let mut _2: isize;<br align="left"/>let _3: &amp;ReErased Adt(baseline::State, []);<br align="left"/>let mut _4: Adt(baseline::State, []);<br align="left"/>let mut _5: &amp;ReErased Adt(baseline::State, []);<br align="left"/>let _6: &amp;ReErased Adt(specialized::pclmulqdq::State, []);<br align="left"/>let mut _7: Adt(specialized::pclmulqdq::State, []);<br align="left"/>let mut _8: &amp;ReErased Adt(specialized::pclmulqdq::State, []);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug __self_0 =&gt; _3;<br align="left"/>debug __self_0 =&gt; _6;<br align="left"/>>;
    bb0__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">FakeRead(ForMatchedPlace(None), _1)<br/>_2 = discriminant((*_1))<br/></td></tr><tr><td align="left">switchInt(move _2)</td></tr></table>>];
    bb1__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">falseEdge</td></tr></table>>];
    bb2__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>_6 = &amp;'_ (((*_1) as Specialized).0: specialized::pclmulqdq::State)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;'_ (*_6)<br/></td></tr><tr><td align="left">_7 = &lt;specialized::pclmulqdq::State as std::clone::Clone&gt;::clone(move _8)</td></tr></table>>];
    bb3__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb4__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;'_ (((*_1) as Baseline).0: baseline::State)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;'_ (*_3)<br/></td></tr><tr><td align="left">_4 = &lt;baseline::State as std::clone::Clone&gt;::clone(move _5)</td></tr></table>>];
    bb5__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_0 = State::Baseline(move _4)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_0 = State::Specialized(move _7)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb8__0_93 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">8 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_93 -> bb1__0_93 [label="0"];
    bb0__0_93 -> bb2__0_93 [label="1"];
    bb0__0_93 -> bb3__0_93 [label="otherwise"];
    bb1__0_93 -> bb4__0_93 [label="real"];
    bb1__0_93 -> bb2__0_93 [label="imaginary"];
    bb2__0_93 -> bb6__0_93 [label="return"];
    bb2__0_93 -> bb8__0_93 [label="unwind"];
    bb4__0_93 -> bb5__0_93 [label="return"];
    bb4__0_93 -> bb8__0_93 [label="unwind"];
    bb5__0_93 -> bb7__0_93 [label=""];
    bb6__0_93 -> bb7__0_93 [label=""];
}
