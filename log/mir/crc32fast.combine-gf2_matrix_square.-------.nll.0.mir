// MIR for `combine::gf2_matrix_square` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?3, '?1, '?2]
| '?1 | Local | ['?3, '?1]
| '?2 | Local | ['?3, '?2]
| '?3 | Local | ['?3]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0], '?0, '?1, '?2, '?3}
| '?1 | U0 | {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0], '?1}
| '?2 | U0 | {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0], '?2}
| '?3 | U0 | {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0], '?3}
| '?4 | U0 | {bb3[4..=6]}
| '?5 | U0 | {bb3[5..=6]}
| '?6 | U0 | {bb6[4..=10], bb9[0..=1]}
| '?7 | U0 | {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0], '?1}
| '?8 | U0 | {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0], '?2}
| '?9 | U0 | {bb3[6]}
| '?10 | U0 | {bb3[5..=6]}
| '?11 | U0 | {bb6[5..=10], bb9[0..=1]}
| '?12 | U0 | {bb3[6]}
| '?13 | U0 | {bb9[1]}
|
| Inference Constraints
| '?0 live at {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0]}
| '?1 live at {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0]}
| '?2 live at {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0]}
| '?3 live at {bb0[0..=3], bb1[0..=4], bb2[0], bb3[0..=6], bb4[0..=3], bb5[0], bb6[0..=10], bb7[0], bb8[0..=6], bb9[0..=1], bb10[0..=6], bb11[0..=10], bb12[0]}
| '?4 live at {bb3[4]}
| '?5 live at {bb3[5]}
| '?6 live at {bb6[4]}
| '?9 live at {bb3[6]}
| '?10 live at {bb3[5]}
| '?11 live at {bb6[5..=10], bb9[0..=1]}
| '?12 live at {bb3[6]}
| '?13 live at {bb9[1]}
| '?1: '?7 due to BoringNoLocation at All(src/combine.rs:16:22: 16:28) (src/combine.rs:16:22: 16:28 (#0)
| '?2: '?8 due to BoringNoLocation at All(src/combine.rs:16:51: 16:54) (src/combine.rs:16:51: 16:54 (#0)
| '?4: '?10 due to Boring at Single(bb3[4]) (src/combine.rs:17:14: 17:24 (#65)
| '?5: '?9 due to Boring at Single(bb3[5]) (src/combine.rs:17:14: 17:24 (#65)
| '?6: '?11 due to Boring at Single(bb6[4]) (src/combine.rs:18:38: 18:41 (#0)
| '?7: '?1 due to BoringNoLocation at All(src/combine.rs:16:22: 16:28) (src/combine.rs:16:22: 16:28 (#0)
| '?8: '?2 due to BoringNoLocation at All(src/combine.rs:16:51: 16:54) (src/combine.rs:16:51: 16:54 (#0)
| '?8: '?6 due to Boring at Single(bb6[4]) (src/combine.rs:18:38: 18:41 (#0)
| '?9: '?12 due to CallArgument(Some(FnDef(DefId(2:7549 ~ core[5e8a]::iter::traits::iterator::Iterator::next), [Adt(std::ops::Range, [usize])]))) at Single(bb3[6]) (src/combine.rs:17:14: 17:24 (#65)
| '?10: '?5 due to Boring at Single(bb3[5]) (src/combine.rs:17:14: 17:24 (#65)
| '?11: '?13 due to CallArgument(Some(FnDef(DefId(0:21 ~ crc32fast[c0c6]::combine::gf2_matrix_times), []))) at Single(bb9[1]) (src/combine.rs:18:21: 18:50 (#0)
|
fn combine::gf2_matrix_square(_1: &'?7 mut [u32; 32], _2: &'?8 [u32; 32]) -> () {
    debug square => _1;
    debug mat => _2;
    let mut _0: ();
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _5: std::ops::Range<usize>;
    let mut _6: ();
    let _7: ();
    let mut _8: std::option::Option<usize>;
    let mut _9: &'?9 mut std::ops::Range<usize>;
    let mut _10: &'?10 mut std::ops::Range<usize>;
    let mut _11: isize;
    let mut _12: !;
    let mut _14: u32;
    let mut _15: &'?11 [u32; 32];
    let mut _16: u32;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    scope 1 {
        debug iter => _5;
        let _13: usize;
        scope 2 {
            debug n => _13;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _3 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        StorageDead(_4);
        FakeRead(ForMatchedPlace(None), _3);
        StorageLive(_5);
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        falseUnwind -> [real: bb3, unwind: bb12];
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &'?4 mut _5;
        _9 = &'?5 mut (*_10);
        _8 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _9) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        StorageDead(_9);
        FakeRead(ForMatchedPlace(None), _8);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb5, 1: bb6, otherwise: bb7];
    }

    bb5: {
        falseEdge -> [real: bb8, imaginary: bb6];
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_8 as Some).0: usize);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &'?6 (*_2);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _13;
        _18 = Len((*_2));
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb9, unwind: bb12];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _0 = const ();
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }

    bb9: {
        _16 = (*_2)[_17];
        _14 = combine::gf2_matrix_times(move _15, move _16) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_20);
        _20 = _13;
        _21 = Len((*_1));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb11, unwind: bb12];
    }

    bb11: {
        (*_1)[_20] = move _14;
        StorageDead(_14);
        StorageDead(_20);
        StorageDead(_17);
        _7 = const ();
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        _6 = const ();
        goto -> bb2;
    }

    bb12 (cleanup): {
        resume;
    }
}
