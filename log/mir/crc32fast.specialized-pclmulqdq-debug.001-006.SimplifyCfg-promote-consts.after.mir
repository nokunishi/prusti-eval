// MIR for `specialized::pclmulqdq::debug` after SimplifyCfg-promote-consts

| User Type Annotations
| 0: user_ty: Canonical { value: TypeOf(DefId(2:9410 ~ core[5e8a]::fmt::{impl#2}::new_v1_formatted), UserArgs { args: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) })], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:9406 ~ core[5e8a]::fmt::{impl#2}), self_ty: Adt(std::fmt::Arguments, [ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) })]) }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }] }, span: /rustc/ca2b74f1ae5075d62e223c0a91574a1fc3f51c7c/library/std/src/macros.rs:84:28: 84:58, inferred_ty: fn(&[&'static str], &[core::fmt::rt::Argument<'_>], &[core::fmt::rt::Placeholder], core::fmt::rt::UnsafeArg) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1_formatted}
| 1: user_ty: Canonical { value: TypeOf(DefId(2:9338 ~ core[5e8a]::fmt::rt::{impl#1}::new_display), UserArgs { args: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }), ^1], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:9333 ~ core[5e8a]::fmt::rt::{impl#1}), self_ty: Adt(core::fmt::rt::Argument, [ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) })]) }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Region(U0) }] }, span: src/specialized/pclmulqdq.rs:77:18: 77:23, inferred_ty: for<'b> fn(&'b &str) -> core::fmt::rt::Argument<'b> {core::fmt::rt::Argument::<'_>::new_display::<&str>}
| 2: user_ty: Canonical { value: TypeOf(DefId(2:9410 ~ core[5e8a]::fmt::{impl#2}::new_v1_formatted), UserArgs { args: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) })], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:9406 ~ core[5e8a]::fmt::{impl#2}), self_ty: Adt(std::fmt::Arguments, [ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) })]) }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }] }, span: /rustc/ca2b74f1ae5075d62e223c0a91574a1fc3f51c7c/library/std/src/macros.rs:84:28: 84:58, inferred_ty: fn(&[&'static str], &[core::fmt::rt::Argument<'_>], &[core::fmt::rt::Placeholder], core::fmt::rt::UnsafeArg) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1_formatted}
| 3: user_ty: Canonical { value: TypeOf(DefId(2:9347 ~ core[5e8a]::fmt::rt::{impl#1}::new_lower_hex), UserArgs { args: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }), ^1], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:9333 ~ core[5e8a]::fmt::rt::{impl#1}), self_ty: Adt(core::fmt::rt::Argument, [ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) })]) }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Region(U0) }] }, span: src/specialized/pclmulqdq.rs:79:21: 79:27, inferred_ty: for<'b> fn(&'b &u8) -> core::fmt::rt::Argument<'b> {core::fmt::rt::Argument::<'_>::new_lower_hex::<&u8>}
| 4: user_ty: Canonical { value: TypeOf(DefId(2:9408 ~ core[5e8a]::fmt::{impl#2}::new_const), UserArgs { args: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) })], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(2:9406 ~ core[5e8a]::fmt::{impl#2}), self_ty: Adt(std::fmt::Arguments, [ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) })]) }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }] }, span: /rustc/ca2b74f1ae5075d62e223c0a91574a1fc3f51c7c/library/std/src/macros.rs:84:28: 84:58, inferred_ty: fn(&[&'static str]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_const}
|
fn specialized::pclmulqdq::debug(_1: &str, _2: std::arch::x86_64::__m128i) -> std::arch::x86_64::__m128i {
    debug s => _1;
    debug a => _2;
    let mut _0: std::arch::x86_64::__m128i;
    let mut _3: !;
    let _4: ();
    let mut _5: bool;
    let _6: [u8; 16];
    let mut _7: specialized::pclmulqdq::debug::A;
    let mut _8: std::arch::x86_64::__m128i;
    let _9: ();
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[&str; 2];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let mut _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: &&str;
    let _22: &&str;
    let mut _23: &[core::fmt::rt::Placeholder];
    let mut _24: &[core::fmt::rt::Placeholder; 1];
    let _25: &[core::fmt::rt::Placeholder; 1];
    let _26: [core::fmt::rt::Placeholder; 1];
    let mut _27: core::fmt::rt::Placeholder;
    let mut _28: core::fmt::rt::Alignment;
    let mut _29: core::fmt::rt::Count;
    let mut _30: core::fmt::rt::Count;
    let mut _31: core::fmt::rt::UnsafeArg;
    let _32: ();
    let mut _33: std::slice::Iter<'_, u8>;
    let mut _34: std::slice::Iter<'_, u8>;
    let mut _35: &[u8];
    let mut _36: &[u8; 16];
    let mut _38: ();
    let _39: ();
    let mut _40: std::option::Option<&u8>;
    let mut _41: &mut std::slice::Iter<'_, u8>;
    let mut _42: &mut std::slice::Iter<'_, u8>;
    let mut _43: isize;
    let mut _44: !;
    let _46: ();
    let _47: ();
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[&str; 2];
    let _51: &[&str; 2];
    let _52: [&str; 2];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let mut _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: [core::fmt::rt::Argument<'_>; 1];
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &&u8;
    let _59: &&u8;
    let mut _60: &[core::fmt::rt::Placeholder];
    let mut _61: &[core::fmt::rt::Placeholder; 1];
    let _62: &[core::fmt::rt::Placeholder; 1];
    let _63: [core::fmt::rt::Placeholder; 1];
    let mut _64: core::fmt::rt::Placeholder;
    let mut _65: core::fmt::rt::Alignment;
    let mut _66: core::fmt::rt::Count;
    let mut _67: core::fmt::rt::Count;
    let mut _68: core::fmt::rt::UnsafeArg;
    let _69: ();
    let _70: ();
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[&str; 1];
    let _74: &[&str; 1];
    let _75: [&str; 1];
    scope 1 {
        debug x => _6;
        let mut _37: std::slice::Iter<'_, u8>;
        let mut _77: &[&str; 1];
        let mut _78: &[&str; 2];
        scope 2 {
        }
        scope 3 {
            debug iter => _37;
            let _45: &u8;
            scope 4 {
                debug x => _45;
                let mut _76: &[&str; 2];
                scope 5 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = const false;
        switchInt(move _5) -> [0: bb23, otherwise: bb1];
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        _7 = specialized::pclmulqdq::debug::A { a: move _8 };
        StorageDead(_8);
        _6 = (_7.1: [u8; 16]);
        FakeRead(ForLet(None), _6);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _78 = const _;
        _14 = &'_ (*_78);
        _13 = &'_ (*_14);
        _12 = move _13 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &'_ _1;
        _21 = &'_ (*_22);
        _20 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _21) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_21);
        _19 = [move _20];
        StorageDead(_20);
        _18 = &'_ _19;
        _17 = &'_ (*_18);
        _16 = move _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_17);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_29);
        _29 = core::fmt::rt::Count::Implied;
        StorageLive(_30);
        _30 = core::fmt::rt::Count::Is(const 20_usize);
        _27 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _28, const 0_u32, move _29, move _30) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &'_ _26;
        _24 = &'_ (*_25);
        _23 = move _24 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_31);
        _31 = core::fmt::rt::UnsafeArg::new() -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _11 = std::fmt::Arguments::<'_>::new_v1_formatted(move _12, move _16, move _23, move _31) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        StorageDead(_31);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_12);
        _10 = std::io::_print(move _11) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_10);
        _9 = const ();
        StorageDead(_9);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &'_ _6;
        _35 = move _36 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_36);
        _34 = core::slice::<impl [u8]>::iter(move _35) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        StorageDead(_35);
        _33 = <std::slice::Iter<'_, u8> as std::iter::IntoIterator>::into_iter(move _34) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_34);
        FakeRead(ForMatchedPlace(None), _33);
        StorageLive(_37);
        _37 = move _33;
        goto -> bb9;
    }

    bb9: {
        falseUnwind -> [real: bb10, unwind: bb25];
    }

    bb10: {
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &'_ mut _37;
        _41 = &'_ mut (*_42);
        _40 = <std::slice::Iter<'_, u8> as std::iter::Iterator>::next(move _41) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        StorageDead(_41);
        FakeRead(ForMatchedPlace(None), _40);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb12, 1: bb13, otherwise: bb14];
    }

    bb12: {
        falseEdge -> [real: bb15, imaginary: bb13];
    }

    bb13: {
        StorageLive(_45);
        _45 = ((_40 as Some).0: &u8);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _76 = const _;
        _51 = &'_ (*_76);
        _50 = &'_ (*_51);
        _49 = move _50 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &'_ _45;
        _58 = &'_ (*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_lower_hex::<&u8>(move _58) -> [return: bb16, unwind: bb25];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        _32 = const ();
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _77 = const _;
        _74 = &'_ (*_77);
        _73 = &'_ (*_74);
        _72 = move _73 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_73);
        _71 = std::fmt::Arguments::<'_>::new_const(move _72) -> [return: bb21, unwind: bb25];
    }

    bb16: {
        StorageDead(_58);
        _56 = [move _57];
        StorageDead(_57);
        _55 = &'_ _56;
        _54 = &'_ (*_55);
        _53 = move _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_66);
        _66 = core::fmt::rt::Count::Implied;
        StorageLive(_67);
        _67 = core::fmt::rt::Count::Is(const 2_usize);
        _64 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _65, const 8_u32, move _66, move _67) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        _63 = [move _64];
        StorageDead(_64);
        _62 = &'_ _63;
        _61 = &'_ (*_62);
        _60 = move _61 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_61);
        StorageLive(_68);
        _68 = core::fmt::rt::UnsafeArg::new() -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _48 = std::fmt::Arguments::<'_>::new_v1_formatted(move _49, move _53, move _60, move _68) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        StorageDead(_68);
        StorageDead(_60);
        StorageDead(_53);
        StorageDead(_49);
        _47 = std::io::_print(move _48) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_47);
        _46 = const ();
        StorageDead(_46);
        _39 = const ();
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_39);
        _38 = const ();
        goto -> bb9;
    }

    bb21: {
        StorageDead(_72);
        _70 = std::io::_print(move _71) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        StorageDead(_71);
        StorageDead(_74);
        StorageDead(_70);
        _69 = const ();
        StorageDead(_69);
        _4 = const ();
        StorageDead(_6);
        goto -> bb24;
    }

    bb23: {
        _4 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = _2;
        return;
    }

    bb25 (cleanup): {
        resume;
    }
}
