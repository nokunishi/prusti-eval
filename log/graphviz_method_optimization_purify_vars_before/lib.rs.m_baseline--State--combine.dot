digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_baseline$$State$$combine";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::baseline::\{impl#0\}::combine"</font><br/><font color="orange">// Span: src/baseline.rs:25:5: 27:6 (#0)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(struct$m_baseline$$State(_1.val_ref), write)) &amp;&amp; ((acc(u32(_2), write)) &amp;&amp; ((ac \ <br/>    c(u64(_3), write)) &amp;&amp; (true))))<br/>inhale true<br/>inhale (true) &amp;&amp; ((true) &amp;&amp; ((true) &amp;&amp; (true)))<br/>inhale true<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l7<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>fold acc(Ref(struct$m_baseline$$State)(_1.val_ref), write)<br/>obtain acc(struct$m_baseline$$State(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(tuple0$)(_0), write)<br/>obtain acc(tuple0$(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/>assert true<br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(struct$m_baseline$$State(_old$pre$0), write)) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(tuple0$(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] _5 = ((*_1).0: u32)</font><br/>_5 := builtin$havoc_ref()<br/>inhale acc(_5.val_int, write)<br/>unfold acc(Ref(struct$m_baseline$$State)(_1.val_ref), write)<br/>unfold acc(Ref(u32)(_1.val_ref.f$state), write)<br/>_5.val_int := copy _1.val_ref.f$state.val_int<br/>label l0<br/><font color="orange">// [mir] StorageLive(_6)</font><br/><font color="orange">// [mir] _6 = _2</font><br/>_6 := builtin$havoc_ref()<br/>inhale acc(_6.val_int, write)<br/>unfold acc(Ref(u32)(_2), write)<br/>_6.val_int := copy _2.val_int<br/>label l1<br/><font color="orange">// [mir] StorageLive(_7)</font><br/><font color="orange">// [mir] _7 = _3</font><br/>_7 := builtin$havoc_ref()<br/>inhale acc(_7.val_int, write)<br/>unfold acc(Ref(u64)(_3), write)<br/>_7.val_int := copy _3.val_int<br/>label l2<br/><font color="orange">// [mir] _4 = combine::combine(move _5, move _6, move _7) -&gt; [return: bb1, unwind: bb2]</font><br/>label l3<br/>assert true<br/>assert (true) &amp;&amp; ((true) &amp;&amp; ((true) &amp;&amp; (true)))<br/>fold acc(Ref(u32)(_5), write)<br/>fold acc(Ref(u32)(_6), write)<br/>fold acc(Ref(u64)(_7), write)<br/>exhale (acc(u32(_5), write)) &amp;&amp; ((acc(u32(_6), write)) &amp;&amp; ((acc(u64(_7), write)) &amp;&amp; (true)))<br/>_4 := builtin$havoc_ref()<br/>inhale true<br/>inhale acc(u32(_4), write)<br/>inhale (true) &amp;&amp; (true)<br/>inhale true<br/>exhale true<br/>label l4</td></tr><tr><td align="left">Goto(cfg:3)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageDead(_7)</font><br/><font color="orange">// [mir] StorageDead(_6)</font><br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] ((*_1).0: u32) = move _4</font><br/>_1.val_ref.f$state := move _4<br/>label l5<br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] _0 = const ()</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_bb1";
"block_bb1" -> "block_return";
}
