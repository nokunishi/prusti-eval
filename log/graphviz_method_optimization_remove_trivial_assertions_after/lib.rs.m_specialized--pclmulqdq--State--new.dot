digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_specialized$$pclmulqdq$$State$$new";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::specialized::pclmulqdq::\{impl#0\}::new"</font><br/><font color="orange">// Span: src/specialized/pclmulqdq.rs:27:5: 38:6 (#0)</font><br/>__t0 := copy false<br/>__t1 := copy false<br/>__t2 := copy false<br/>__t3 := copy false<br/>__t4 := copy false<br/>__t5 := copy false<br/>__t6 := copy false<br/>__t7 := copy false<br/>__t8 := copy false<br/>__t9 := copy false<br/>__t10 := copy false<br/>__t11 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(u32(_1), write)) &amp;&amp; (true)<br/>inhale (true) &amp;&amp; (true)<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l22<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/><font color="orange">// Fold the result</font><br/>obtain acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_2)</font><br/><font color="orange">// [mir] _2 = const false</font><br/>_2 := builtin$havoc_ref()<br/>inhale acc(_2.val_bool, write)<br/>_2.val_bool := copy false<br/><font color="orange">// [mir] switchInt(move _2) -&gt; [0: bb1, otherwise: bb3]</font><br/>__t12 := copy _2.val_bool</td></tr><tr><td align="left">GotoSwitch((!(__t12), cfg:4), cfg:3)<br/></td></tr></table>>];
"block_l0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l0 (cfg:3)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l0 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb3</font></td></tr><tr><td align="left">Goto(cfg:9)<br/></td></tr></table>>];
"block_l1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l1 (cfg:4)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l1 ==========</font><br/><font color="orange">// MIR edge bb0 --&gt; bb1</font></td></tr><tr><td align="left">Goto(cfg:5)<br/></td></tr></table>>];
"block_bb1" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb1 (cfg:5)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb1 ==========</font><br/>__t1 := copy true<br/><font color="orange">// [mir] StorageLive(_3)</font><br/><font color="orange">// [mir] _3 = std_detect::detect::arch::x86::__is_feature_detected::pclmulqdq() -&gt; [return: bb2, unwind: bb12]</font><br/>label l2<br/>_3 := builtin$havoc_ref()<br/>inhale acc(bool(_3), write)<br/>inhale (true) &amp;&amp; (true)<br/>label l3</td></tr><tr><td align="left">Goto(cfg:6)<br/></td></tr></table>>];
"block_bb2" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb2 (cfg:6)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb2 ==========</font><br/>__t2 := copy true<br/><font color="orange">// [mir] switchInt(move _3) -&gt; [0: bb10, otherwise: bb3]</font><br/>unfold acc(Ref(bool)(_3), write)<br/>__t13 := copy _3.val_bool</td></tr><tr><td align="left">GotoSwitch((!(__t13), cfg:8), cfg:7)<br/></td></tr></table>>];
"block_l4" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l4 (cfg:7)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l4 ==========</font><br/><font color="orange">// MIR edge bb2 --&gt; bb3</font></td></tr><tr><td align="left">Goto(cfg:26)<br/></td></tr></table>>];
"block_l5" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l5 (cfg:8)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l5 ==========</font><br/><font color="orange">// MIR edge bb2 --&gt; bb10</font></td></tr><tr><td align="left">Goto(cfg:29)<br/></td></tr></table>>];
"block_bb3" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb3 (cfg:9)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb3 ==========</font><br/>__t3 := copy true<br/><font color="orange">// [mir] StorageLive(_4)</font><br/><font color="orange">// [mir] _4 = const true</font><br/>_4 := builtin$havoc_ref()<br/>inhale acc(_4.val_bool, write)<br/>_4.val_bool := copy true<br/><font color="orange">// [mir] switchInt(move _4) -&gt; [0: bb4, otherwise: bb6]</font><br/>__t14 := copy _4.val_bool</td></tr><tr><td align="left">GotoSwitch((!(__t14), cfg:11), cfg:10)<br/></td></tr></table>>];
"block_l6" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l6 (cfg:10)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l6 ==========</font><br/><font color="orange">// MIR edge bb3 --&gt; bb6</font></td></tr><tr><td align="left">Goto(cfg:16)<br/></td></tr></table>>];
"block_l7" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l7 (cfg:11)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l7 ==========</font><br/><font color="orange">// MIR edge bb3 --&gt; bb4</font></td></tr><tr><td align="left">Goto(cfg:12)<br/></td></tr></table>>];
"block_bb4" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb4 (cfg:12)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb4 ==========</font><br/>__t4 := copy true<br/><font color="orange">// [mir] StorageLive(_5)</font><br/><font color="orange">// [mir] _5 = std_detect::detect::arch::x86::__is_feature_detected::sse2() -&gt; [return: bb5, unwind: bb12]</font><br/>label l8<br/>_5 := builtin$havoc_ref()<br/>inhale acc(bool(_5), write)<br/>inhale (true) &amp;&amp; (true)<br/>label l9</td></tr><tr><td align="left">Goto(cfg:13)<br/></td></tr></table>>];
"block_bb5" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb5 (cfg:13)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb5 ==========</font><br/>__t5 := copy true<br/><font color="orange">// [mir] switchInt(move _5) -&gt; [0: bb10, otherwise: bb6]</font><br/>unfold acc(Ref(bool)(_5), write)<br/>__t15 := copy _5.val_bool</td></tr><tr><td align="left">GotoSwitch((!(__t15), cfg:15), cfg:14)<br/></td></tr></table>>];
"block_l10" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l10 (cfg:14)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l10 ==========</font><br/><font color="orange">// MIR edge bb5 --&gt; bb6</font></td></tr><tr><td align="left">Goto(cfg:27)<br/></td></tr></table>>];
"block_l11" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l11 (cfg:15)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l11 ==========</font><br/><font color="orange">// MIR edge bb5 --&gt; bb10</font></td></tr><tr><td align="left">Goto(cfg:30)<br/></td></tr></table>>];
"block_bb6" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb6 (cfg:16)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb6 ==========</font><br/>__t6 := copy true<br/><font color="orange">// [mir] StorageLive(_6)</font><br/><font color="orange">// [mir] _6 = const false</font><br/>_6 := builtin$havoc_ref()<br/>inhale acc(_6.val_bool, write)<br/>_6.val_bool := copy false<br/><font color="orange">// [mir] switchInt(move _6) -&gt; [0: bb7, otherwise: bb9]</font><br/>__t16 := copy _6.val_bool</td></tr><tr><td align="left">GotoSwitch((__t16, cfg:18), cfg:17)<br/></td></tr></table>>];
"block_l12" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l12 (cfg:17)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l12 ==========</font><br/><font color="orange">// MIR edge bb6 --&gt; bb7</font></td></tr><tr><td align="left">Goto(cfg:19)<br/></td></tr></table>>];
"block_l13" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l13 (cfg:18)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l13 ==========</font><br/><font color="orange">// MIR edge bb6 --&gt; bb9</font></td></tr><tr><td align="left">Goto(cfg:23)<br/></td></tr></table>>];
"block_bb7" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb7 (cfg:19)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb7 ==========</font><br/>__t7 := copy true<br/><font color="orange">// [mir] StorageLive(_7)</font><br/><font color="orange">// [mir] _7 = std_detect::detect::arch::x86::__is_feature_detected::sse4_1() -&gt; [return: bb8, unwind: bb12]</font><br/>label l14<br/>_7 := builtin$havoc_ref()<br/>inhale acc(bool(_7), write)<br/>inhale (true) &amp;&amp; (true)<br/>label l15</td></tr><tr><td align="left">Goto(cfg:20)<br/></td></tr></table>>];
"block_bb8" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb8 (cfg:20)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb8 ==========</font><br/>__t8 := copy true<br/><font color="orange">// [mir] switchInt(move _7) -&gt; [0: bb10, otherwise: bb9]</font><br/>unfold acc(Ref(bool)(_7), write)<br/>__t17 := copy _7.val_bool</td></tr><tr><td align="left">GotoSwitch((!(__t17), cfg:22), cfg:21)<br/></td></tr></table>>];
"block_l16" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l16 (cfg:21)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l16 ==========</font><br/><font color="orange">// MIR edge bb8 --&gt; bb9</font></td></tr><tr><td align="left">Goto(cfg:28)<br/></td></tr></table>>];
"block_l17" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l17 (cfg:22)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l17 ==========</font><br/><font color="orange">// MIR edge bb8 --&gt; bb10</font></td></tr><tr><td align="left">Goto(cfg:31)<br/></td></tr></table>>];
"block_bb9" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb9 (cfg:23)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb9 ==========</font><br/>__t9 := copy true<br/><font color="orange">// [mir] StorageLive(_8)</font><br/><font color="orange">// [mir] StorageLive(_9)</font><br/><font color="orange">// [mir] _9 = _1</font><br/>_9 := builtin$havoc_ref()<br/>inhale acc(_9.val_int, write)<br/>unfold acc(Ref(u32)(_1), write)<br/>_9.val_int := copy _1.val_int<br/>label l18<br/><font color="orange">// [mir] _8 = specialized::pclmulqdq::State \{ state: move _9 \}</font><br/>_8 := builtin$havoc_ref()<br/>inhale acc(struct$m_specialized$$pclmulqdq$$State(_8), write)<br/>unfold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_8), write)<br/>_8.f$state := move _9<br/>label l19<br/><font color="orange">// [mir] StorageDead(_9)</font><br/><font color="orange">// [mir] _0 = std::option::Option::&lt;specialized::pclmulqdq::State&gt;::Some(move _8)</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)<br/>inhale (m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$discriminant$$&lt;&gt;(_0)) == (1)<br/>downcast _0 to enum_Some<br/>unfold acc(Ref(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_)&lt;variant \{Some\}&gt;(_0), write)<br/>unfold acc(Ref(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some)(_0[enum_Some]), write)<br/>_0[enum_Some].f$0 := move _8<br/>label l20<br/><font color="orange">// [mir] StorageDead(_8)</font><br/><font color="orange">// [mir] goto -&gt; bb11</font></td></tr><tr><td align="left">Goto(cfg:32)<br/></td></tr></table>>];
"block_bb10" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb10 (cfg:24)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb10 ==========</font><br/>__t10 := copy true<br/><font color="orange">// [mir] _0 = std::option::Option::&lt;specialized::pclmulqdq::State&gt;::None</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_(_0), write)<br/>inhale (m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_$$discriminant$$&lt;&gt;(_0)) == (0)<br/><font color="orange">// [mir] goto -&gt; bb11</font></td></tr><tr><td align="left">Goto(cfg:33)<br/></td></tr></table>>];
"block_bb11" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb11 (cfg:25)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb11 ==========</font><br/>__t11 := copy true<br/><font color="orange">// [mir] StorageDead(_7)</font><br/><font color="orange">// [mir] StorageDead(_6)</font><br/><font color="orange">// [mir] StorageDead(_5)</font><br/><font color="orange">// [mir] StorageDead(_4)</font><br/><font color="orange">// [mir] StorageDead(_3)</font><br/><font color="orange">// [mir] StorageDead(_2)</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_l21" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l21 (cfg:26)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l21 ==========</font><br/><font color="orange">// drop Acc(_3.val_bool, write) (Acc(_3.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:9)<br/></td></tr></table>>];
"block_l23" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l23 (cfg:27)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l23 ==========</font><br/><font color="orange">// drop Acc(_5.val_bool, write) (Acc(_5.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:16)<br/></td></tr></table>>];
"block_l24" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l24 (cfg:28)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l24 ==========</font><br/><font color="orange">// drop Acc(_7.val_bool, write) (Acc(_7.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:23)<br/></td></tr></table>>];
"block_l25" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l25 (cfg:29)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l25 ==========</font><br/><font color="orange">// drop Acc(_3.val_bool, write) (Acc(_3.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:24)<br/></td></tr></table>>];
"block_l26" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l26 (cfg:30)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l26 ==========</font><br/><font color="orange">// drop Acc(_5.val_bool, write) (Acc(_5.val_bool, write))</font><br/><font color="orange">// drop Acc(_4.val_bool, write) (Acc(_4.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:24)<br/></td></tr></table>>];
"block_l27" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l27 (cfg:31)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l27 ==========</font><br/><font color="orange">// drop Acc(_6.val_bool, write) (Acc(_6.val_bool, write))</font><br/><font color="orange">// drop Acc(_7.val_bool, write) (Acc(_7.val_bool, write))</font><br/><font color="orange">// drop Acc(_4.val_bool, write) (Acc(_4.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:24)<br/></td></tr></table>>];
"block_l28" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l28 (cfg:32)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l28 ==========</font><br/>fold acc(Ref(u32)(_0[enum_Some].f$0.f$state), write)<br/>fold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_0[enum_Some].f$0), write)<br/>fold acc(Ref(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_Some)(_0[enum_Some]), write)<br/>fold acc(Ref(m_std$$option$$Option$_beg_$struct$m_specialized$$pclmulqdq$$State$_end_)&lt;variant \{Some\}&gt;(_0), write)<br/><font color="orange">// drop Acc(_6.val_bool, write) (Acc(_6.val_bool, write))</font><br/><font color="orange">// drop Acc(_4.val_bool, write) (Acc(_4.val_bool, write))</font></td></tr><tr><td align="left">Goto(cfg:25)<br/></td></tr></table>>];
"block_l29" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">l29 (cfg:33)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== l29 ==========</font><br/>unfold acc(Ref(u32)(_1), write)</td></tr><tr><td align="left">Goto(cfg:25)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_l1";
"block_bb0" -> "block_l0";
"block_l0" -> "block_bb3";
"block_l1" -> "block_bb1";
"block_bb1" -> "block_bb2";
"block_bb2" -> "block_l5";
"block_bb2" -> "block_l4";
"block_l4" -> "block_l21";
"block_l5" -> "block_l25";
"block_bb3" -> "block_l7";
"block_bb3" -> "block_l6";
"block_l6" -> "block_bb6";
"block_l7" -> "block_bb4";
"block_bb4" -> "block_bb5";
"block_bb5" -> "block_l11";
"block_bb5" -> "block_l10";
"block_l10" -> "block_l23";
"block_l11" -> "block_l26";
"block_bb6" -> "block_l13";
"block_bb6" -> "block_l12";
"block_l12" -> "block_bb7";
"block_l13" -> "block_bb9";
"block_bb7" -> "block_bb8";
"block_bb8" -> "block_l17";
"block_bb8" -> "block_l16";
"block_l16" -> "block_l24";
"block_l17" -> "block_l27";
"block_bb9" -> "block_l28";
"block_bb10" -> "block_l29";
"block_bb11" -> "block_return";
"block_l21" -> "block_bb3";
"block_l23" -> "block_bb6";
"block_l24" -> "block_bb9";
"block_l25" -> "block_bb10";
"block_l26" -> "block_bb10";
"block_l27" -> "block_bb10";
"block_l28" -> "block_bb11";
"block_l29" -> "block_bb11";
}
