digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_baseline$$State$$new";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::baseline::\{impl#0\}::new"</font><br/><font color="orange">// Span: src/baseline.rs:9:5: 11:6 (#0)</font><br/>__t0 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(u32(_1), write)) &amp;&amp; (true)<br/>inhale (true) &amp;&amp; (true)<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l3<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(u32)(_0.f$state), write)<br/>fold acc(Ref(struct$m_baseline$$State)(_0), write)<br/>obtain acc(struct$m_baseline$$State(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(struct$m_baseline$$State(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] StorageLive(_2)</font><br/><font color="orange">// [mir] _2 = _1</font><br/>_2 := builtin$havoc_ref()<br/>inhale acc(_2.val_int, write)<br/>unfold acc(Ref(u32)(_1), write)<br/>_2.val_int := copy _1.val_int<br/>label l0<br/><font color="orange">// [mir] _0 = baseline::State \{ state: move _2 \}</font><br/>_0 := builtin$havoc_ref()<br/>inhale acc(struct$m_baseline$$State(_0), write)<br/>unfold acc(Ref(struct$m_baseline$$State)(_0), write)<br/>_0.f$state := move _2<br/>label l1<br/><font color="orange">// [mir] StorageDead(_2)</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_return";
}
