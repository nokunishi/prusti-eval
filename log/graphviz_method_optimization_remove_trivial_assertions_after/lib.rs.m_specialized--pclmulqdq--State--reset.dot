digraph CFG {
graph [fontname=monospace];
node [fontname=monospace];
edge [fontname=monospace];
labelloc="t";
label="Method m_specialized$$pclmulqdq$$State$$reset";
"block_start" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">start (cfg:0)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== start ==========</font><br/><font color="orange">// Def path: "crc32fast::specialized::pclmulqdq::\{impl#0\}::reset"</font><br/><font color="orange">// Span: src/specialized/pclmulqdq.rs:50:5: 52:6 (#0)</font><br/>__t0 := copy false<br/><font color="orange">// Preconditions:</font><br/>inhale (acc(_1.val_ref, write)) &amp;&amp; ((acc(struct$m_specialized$$pclmulqdq$$State(_1.val_ref), write)) &amp;&amp; (true))<br/>inhale (true) &amp;&amp; (true)<br/>label pre</td></tr><tr><td align="left">Goto(cfg:2)<br/></td></tr></table>>];
"block_return" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">return (cfg:1)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== return ==========</font><br/><font color="orange">// Target of any 'return' statement.</font><br/><font color="orange">// Exhale postcondition</font><br/>label l1<br/><font color="orange">// Fold predicates for &amp;mut args and transfer borrow permissions to old</font><br/>fold acc(Ref(u32)(_1.val_ref.f$state), write)<br/>fold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_1.val_ref), write)<br/>obtain acc(struct$m_specialized$$pclmulqdq$$State(_1.val_ref), write)<br/>_old$pre$0 := move _1.val_ref<br/><font color="orange">// Fold the result</font><br/>fold acc(Ref(tuple0$)(_0), write)<br/>obtain acc(tuple0$(_0), write)<br/><font color="orange">// Assert possible strengthening</font><br/><font color="orange">// Assert functional specification of postcondition</font><br/><font color="orange">// Assert type invariants</font><br/>assert (true) &amp;&amp; ((true) &amp;&amp; (true))<br/><font color="orange">// Exhale permissions of postcondition (1/3)</font><br/>exhale (acc(struct$m_specialized$$pclmulqdq$$State(_old$pre$0), write)) &amp;&amp; (true)<br/><font color="orange">// Exhale permissions of postcondition (2/3)</font><br/>exhale acc(tuple0$(_0), write)<br/><font color="orange">// Exhale permissions of postcondition (3/3)</font></td></tr><tr><td align="left" bgcolor="#82CA9D">Return<br/></td></tr></table>>];
"block_bb0" [shape=none,label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center">bb0 (cfg:2)</td></tr><tr><td align="left" balign="left"><font color="orange">// ========== bb0 ==========</font><br/>__t0 := copy true<br/><font color="orange">// [mir] ((*_1).0: u32) = const 0_u32</font><br/>unfold acc(Ref(struct$m_specialized$$pclmulqdq$$State)(_1.val_ref), write)<br/>unfold acc(Ref(u32)(_1.val_ref.f$state), write)<br/>_1.val_ref.f$state.val_int := copy 0<br/><font color="orange">// [mir] _0 = const ()</font><br/><font color="orange">// [mir] return</font></td></tr><tr><td align="left">Goto(cfg:1)<br/></td></tr></table>>];
"block_start" -> "block_bb0";
"block_bb0" -> "block_return";
}
