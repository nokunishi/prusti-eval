fn div_overflow(_1: &u8) -> () {
    debug out => _1;
    let mut _0: ();
    let _2: i32;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;

    bb0: {
        _3 = Eq(const -1_i32, const 0_i32);
        assert(!move _3, "attempt to divide `{}` by zero", const _) -> [success: bb1, unwind: bb3];
    }

    bb1: {
        _4 = Eq(const -1_i32, const -1_i32);
        _5 = Eq(const _, const i32::MIN);
        _6 = BitAnd(move _4, move _5);
        assert(!move _6, "attempt to compute `{} / {}`, which would overflow", const _, const -1_i32) -> [success: bb2, unwind: bb3];
    }

    bb2: {
        _2 = Div(const _, const -1_i32);
        _0 = const ();
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
path: ./test/test.rs:5:26: 5:27 (#0)