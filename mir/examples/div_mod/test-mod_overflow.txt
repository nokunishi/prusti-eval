fn mod_overflow() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;

    bb0: {
        _2 = Eq(const -1_i32, const 0_i32);
        assert(!move _2, "attempt to calculate the remainder of `{}` with a divisor of zero", const _) -> [success: bb1, unwind: bb3];
    }

    bb1: {
        _3 = Eq(const -1_i32, const -1_i32);
        _4 = Eq(const _, const i32::MIN);
        _5 = BitAnd(move _3, move _4);
        assert(!move _5, "attempt to compute the remainder of `{} % {}`, which would overflow", const _, const -1_i32) -> [success: bb2, unwind: bb3];
    }

    bb2: {
        _1 = Rem(const _, const -1_i32);
        _0 = const ();
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
path: ./test/test.rs:68:22: 68:22 (#0)