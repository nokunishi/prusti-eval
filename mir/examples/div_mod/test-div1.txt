fn div1(_1: i32, _2: i32) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();
    let _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;

    bb0: {
        _4 = _1;
        _5 = _2;
        _6 = Eq(_5, const 0_i32);
        assert(!move _6, "attempt to divide `{}` by zero", _4) -> [success: bb1, unwind: bb3];
    }

    bb1: {
        _7 = Eq(_5, const -1_i32);
        _8 = Eq(_4, const i32::MIN);
        _9 = BitAnd(move _7, move _8);
        assert(!move _9, "attempt to compute `{} / {}`, which would overflow", _4, _5) -> [success: bb2, unwind: bb3];
    }

    bb2: {
        _3 = Div(move _4, move _5);
        _0 = const ();
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
path: ./div_mod/test.rs:1:27: 1:27 (#0)