   Compiling flowistry v0.5.41 (/Users/hatsusaiokunishi/UBC/2023/cs448/source/prusti-eval/mir/mir-rust)
warning: unused import: `std::env`
  --> src/main.rs:21:5
   |
21 | use std::env;
   |     ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `PathBuf`, `Path`
  --> src/main.rs:24:17
   |
24 | use std::path::{Path, PathBuf};
   |                 ^^^^  ^^^^^^^

warning: unused import: `BufRead`
  --> src/main.rs:23:21
   |
23 | use std::io::{self, BufRead};
   |                     ^^^^^^^

warning: unused variable: `i`
  --> src/main.rs:85:15
   |
85 |       let mut i = 0;
   |               ^ help: if this is intentional, prefix it with an underscore: `_i`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:85:11
   |
85 |       let mut i = 0;
   |           ----^
   |           |
   |           help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused `Result` that must be used
  --> src/main.rs:61:3
   |
61 |   f.write_all(body_with_facts.body.to_string(tcx).unwrap().as_bytes()); 
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
   = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
   |
61 |   let _ = f.write_all(body_with_facts.body.to_string(tcx).unwrap().as_bytes()); 
   |   +++++++

warning: unused `Result` that must be used
  --> src/main.rs:65:3
   |
65 |   file.write(path.as_bytes());
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
65 |   let _ = file.write(path.as_bytes());
   |   +++++++

warning: unused `Result` that must be used
  --> src/main.rs:98:17
   |
98 |                 compute_dependencies(tcx, body_with_facts,  param.span);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
98 |                 let _ = compute_dependencies(tcx, body_with_facts,  param.span);
   |                 +++++++

warning: unused `Result` that must be used
   --> src/main.rs:109:17
    |
109 |                 compute_dependencies(tcx, body_with_facts, item.span);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
109 |                 let _ = compute_dependencies(tcx, body_with_facts, item.span);
    |                 +++++++

warning: `flowistry` (bin "flowistry") generated 9 warnings (run `cargo fix --bin "flowistry"` to apply 4 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 1.56s
     Running `target/debug/flowistry ./test/test.rs`
Generics {
    params: [],
    predicates: [],
    has_where_clause_predicates: false,
    where_clause_span: ./test/test.rs:1:12: 1:12 (#0),
    span: ./test/test.rs:1:10: 1:10 (#0),
}
Generics {
    params: [],
    predicates: [],
    has_where_clause_predicates: false,
    where_clause_span: ./test/test.rs:5:19: 5:19 (#0),
    span: ./test/test.rs:5:11: 5:11 (#0),
}
Generics {
    params: [
        GenericParam {
            hir_id: HirId(DefId(0:5 ~ test[8743]::arg_ref).10),
            def_id: DefId(0:9 ~ test[8743]::arg_ref::'_),
            name: Fresh,
            span: ./test/test.rs:9:15: 9:16 (#0),
            pure_wrt_drop: false,
            kind: Lifetime {
                kind: Elided,
            },
            colon_span: None,
            source: Generics,
        },
    ],
    predicates: [],
    has_where_clause_predicates: false,
    where_clause_span: ./test/test.rs:9:20: 9:20 (#0),
    span: ./test/test.rs:9:11: 9:11 (#0),
}
warning: unused variable: `y`
  --> ./test/test.rs:10:9
   |
10 |     let y= x;
   |         ^ help: if this is intentional, prefix it with an underscore: `_y`
   |
   = note: `#[warn(unused_variables)]` on by default

Generics {
    params: [
        GenericParam {
            hir_id: HirId(DefId(0:6 ~ test[8743]::print).62),
            def_id: DefId(0:10 ~ test[8743]::print::'_),
            name: Fresh,
            span: ./test/test.rs:13:13: 13:14 (#0),
            pure_wrt_drop: false,
            kind: Lifetime {
                kind: Elided,
            },
            colon_span: None,
            source: Generics,
        },
    ],
    predicates: [],
    has_where_clause_predicates: false,
    where_clause_span: ./test/test.rs:13:18: 13:18 (#0),
    span: ./test/test.rs:13:9: 13:9 (#0),
}
Generics {
    params: [
        GenericParam {
            hir_id: HirId(DefId(0:7 ~ test[8743]::panic).14),
            def_id: DefId(0:11 ~ test[8743]::panic::'_),
            name: Fresh,
            span: ./test/test.rs:17:13: 17:14 (#0),
            pure_wrt_drop: false,
            kind: Lifetime {
                kind: Elided,
            },
            colon_span: None,
            source: Generics,
        },
    ],
    predicates: [],
    has_where_clause_predicates: false,
    where_clause_span: ./test/test.rs:17:18: 17:18 (#0),
    span: ./test/test.rs:17:9: 17:9 (#0),
}
warning: unused variable: `x`
  --> ./test/test.rs:17:10
   |
17 | fn panic(x: &u32) {
   |          ^ help: if this is intentional, prefix it with an underscore: `_x`

Generics {
    params: [],
    predicates: [],
    has_where_clause_predicates: false,
    where_clause_span: ./test/test.rs:22:10: 22:10 (#0),
    span: ./test/test.rs:22:8: 22:8 (#0),
}
warning: 2 warnings emitted

