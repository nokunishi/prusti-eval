// MIR for `do2` after built

fn do2(_1: &mut u32, _2: &mut u32, _3: &[u8]) -> () {
    debug adler => _1;
    debug sum2 => _2;
    debug buf => _3;
    let mut _0: ();
    let _4: ();
    let mut _5: &mut u32;
    let mut _6: &mut u32;
    let mut _7: &[u8];
    let _8: &[u8];
    let _9: &[u8];
    let mut _10: &[u8];
    let mut _11: std::ops::Range<usize>;
    let _12: ();
    let mut _13: &mut u32;
    let mut _14: &mut u32;
    let mut _15: &[u8];
    let _16: &[u8];
    let _17: &[u8];
    let mut _18: &[u8];
    let mut _19: std::ops::Range<usize>;

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut (*_1);
        StorageLive(_6);
        _6 = &mut (*_2);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_3);
        StorageLive(_11);
        _11 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize };
        _9 = <[u8] as Index<std::ops::Range<usize>>>::index(move _10, move _11) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = &(*_9);
        _7 = &(*_8);
        _4 = do1(move _5, move _6, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut (*_1);
        StorageLive(_14);
        _14 = &mut (*_2);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_3);
        StorageLive(_19);
        _19 = std::ops::Range::<usize> { start: const 1_usize, end: const 2_usize };
        _17 = <[u8] as Index<std::ops::Range<usize>>>::index(move _18, move _19) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = &(*_17);
        _15 = &(*_16);
        _12 = do1(move _13, move _14, move _15) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_12);
        _0 = const ();
        return;
    }

    bb5 (cleanup): {
        resume;
    }
}
