// MIR for `<impl at lib.rs:98:1: 98:20>::remove` after built

| User Type Annotations
| 0: user_ty: Canonical { value: TypeOf(DefId(2:2545 ~ core[13d3]::convert::From::from), UserArgs { args: [u32, ^0], user_self_ty: None }), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: lib.rs:125:20: 125:29, inferred_ty: fn(u8) -> u32 {<u32 as std::convert::From<u8>>::from}
|
fn <impl at lib.rs:98:1: 98:20>::remove(_1: &mut RollingAdler32, _2: usize, _3: u8) -> () {
    debug self => _1;
    debug size => _2;
    debug byte => _3;
    let mut _0: ();
    let _4: u32;
    let mut _5: u8;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: (u32, bool);
    let mut _10: u32;
    let mut _11: (u32, bool);
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let mut _15: u32;
    let mut _16: u32;
    let mut _17: (u32, bool);
    let mut _18: (u32, bool);
    let mut _19: u32;
    let mut _20: u32;
    let mut _21: u32;
    let mut _22: usize;
    let mut _23: u32;
    let mut _24: bool;
    scope 1 {
        debug byte => _4;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _3;
        _4 = <u32 as From<u8>>::from(move _5) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        StorageDead(_5);
        FakeRead(ForLet(None), _4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).0: u32);
        _9 = CheckedAdd(_8, const _);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const _) -> [success: bb2, unwind: bb11];
    }

    bb2: {
        _7 = move (_9.0: u32);
        StorageDead(_8);
        StorageLive(_10);
        _10 = _4;
        _11 = CheckedSub(_7, _10);
        assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _10) -> [success: bb3, unwind: bb11];
    }

    bb3: {
        _6 = move (_11.0: u32);
        StorageDead(_10);
        StorageDead(_7);
        _12 = Eq(const _, const 0_u32);
        assert(!move _12, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> [success: bb4, unwind: bb11];
    }

    bb4: {
        ((*_1).0: u32) = Rem(move _6, const _);
        StorageDead(_6);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).1: u32);
        _17 = CheckedAdd(_16, const _);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const _) -> [success: bb5, unwind: bb11];
    }

    bb5: {
        _15 = move (_17.0: u32);
        StorageDead(_16);
        _18 = CheckedSub(_15, const 1_u32);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, const 1_u32) -> [success: bb6, unwind: bb11];
    }

    bb6: {
        _14 = move (_18.0: u32);
        StorageDead(_15);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _2;
        _21 = move _22 as u32 (IntToInt);
        StorageDead(_22);
        _20 = core::num::<impl u32>::wrapping_sub(const _, move _21) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_23);
        _23 = _4;
        _19 = core::num::<impl u32>::wrapping_mul(move _20, move _23) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_20);
        _13 = core::num::<impl u32>::wrapping_add(move _14, move _19) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_14);
        _24 = Eq(const _, const 0_u32);
        assert(!move _24, "attempt to calculate the remainder of `{}` with a divisor of zero", _13) -> [success: bb10, unwind: bb11];
    }

    bb10: {
        ((*_1).1: u32) = Rem(move _13, const _);
        StorageDead(_13);
        _0 = const ();
        StorageDead(_4);
        return;
    }

    bb11 (cleanup): {
        resume;
    }
}
