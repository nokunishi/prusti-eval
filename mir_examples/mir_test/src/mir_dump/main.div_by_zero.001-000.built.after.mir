// MIR for `div_by_zero` after built

fn div_by_zero(_1: u32) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: bool;
    scope 1 {
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        _4 = Eq(const 0_u32, const 0_u32);
        assert(!move _4, "attempt to divide `{}` by zero", _3) -> [success: bb1, unwind: bb2];
    }

    bb1: {
        _2 = Div(move _3, const 0_u32);
        StorageDead(_3);
        PlaceMention(_2);
        StorageDead(_2);
        _0 = const ();
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}
