// MIR for `add` after built

fn add(_1: u32) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: (u32, bool);
    scope 1 {
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        _4 = CheckedAdd(_3, const _);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const _) -> [success: bb1, unwind: bb2];
    }

    bb1: {
        _2 = move (_4.0: u32);
        StorageDead(_3);
        PlaceMention(_2);
        StorageDead(_2);
        _0 = const ();
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}
